Architecture:        aarch64
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A35
Stepping:            r0p1
CPU max MHz:         1300.0000
CPU min MHz:         598.0000
BogoMIPS:            26.00
Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
================================================================================
/root/i-benchmarks/word2vec/bin
perf stat -o ../data/word2vec_perf_output_1614238134469534971.txt --per-core -a taskset -c 0-3 ./word2vec -train ../data/text8_1.7mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_1.7mb
Vocab size: 5847
Words in train file: 252418
Alpha: 0.000197  Progress: 100.18%  Words/thread/sec: 10.88k  # started on Thu Feb 25 07:28:54 2021


 Performance counter stats for 'system wide':

S0-C0           1           93632.62 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              26827      context-switches          #    0.287 K/sec                  
S0-C0           1                726      cpu-migrations            #    0.008 K/sec                  
S0-C0           1               1151      page-faults               #    0.012 K/sec                  
S0-C0           1         3166228587      cycles                    #    0.034 GHz                    
S0-C0           1         2295309034      instructions              #    0.72  insn per cycle         
S0-C0           1         4172583774      branches                  #   44.563 M/sec                  
S0-C0           1           65195636      branch-misses             #    1.56% of all branches        
S0-C1           1           93632.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              11464      context-switches          #    0.122 K/sec                  
S0-C1           1                623      cpu-migrations            #    0.007 K/sec                  
S0-C1           1             131347      page-faults               #    0.001 M/sec                  
S0-C1           1         2458295071      cycles                    #    0.026 GHz                    
S0-C1           1         3950275038      instructions              #    1.61  insn per cycle         
S0-C1           1         4270663711      branches                  #   45.611 M/sec                  
S0-C1           1           66160013      branch-misses             #    1.55% of all branches        
S0-C2           1           93632.62 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              14735      context-switches          #    0.157 K/sec                  
S0-C2           1                606      cpu-migrations            #    0.006 K/sec                  
S0-C2           1               1236      page-faults               #    0.013 K/sec                  
S0-C2           1         3527680665      cycles                    #    0.038 GHz                    
S0-C2           1         2735589666      instructions              #    0.78  insn per cycle         
S0-C2           1         4224129359      branches                  #   45.114 M/sec                  
S0-C2           1           65837748      branch-misses             #    1.56% of all branches        
S0-C3           1           93632.62 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               6386      context-switches          #    0.068 K/sec                  
S0-C3           1                523      cpu-migrations            #    0.006 K/sec                  
S0-C3           1               1108      page-faults               #    0.012 K/sec                  
S0-C3           1         2365701652      cycles                    #    0.025 GHz                    
S0-C3           1         2258570501      instructions              #    0.95  insn per cycle         
S0-C3           1         4165139431      branches                  #   44.484 M/sec                  
S0-C3           1           60003999      branch-misses             #    1.44% of all branches        

      93.633539829 seconds time elapsed

perf stat -o ../data/word2vec_perf_output_no_branch_1614238134476553172.txt --per-core -a taskset -c 0-3 ./word2vec_no-guess-branch-probability -train ../data/text8_3.3mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_3.3mb
Vocab size: 9546
Words in train file: 524166
Alpha: 0.000005  Progress: 100.35%  Words/thread/sec: 20.05k  # started on Thu Feb 25 07:30:29 2021


 Performance counter stats for 'system wide':

S0-C0           1          105003.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              44273      context-switches          #    0.422 K/sec                  
S0-C0           1               1149      cpu-migrations            #    0.011 K/sec                  
S0-C0           1                106      page-faults               #    0.001 K/sec                  
S0-C0           1          552171466      cycles                    #    0.005 GHz                    
S0-C0           1         1142033380      instructions              #    2.07  insn per cycle         
S0-C0           1         1267469465      branches                  #   12.071 M/sec                  
S0-C0           1           68209372      branch-misses             #    5.38% of all branches        
S0-C1           1          105003.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              16253      context-switches          #    0.155 K/sec                  
S0-C1           1                842      cpu-migrations            #    0.008 K/sec                  
S0-C1           1              74924      page-faults               #    0.714 K/sec                  
S0-C1           1          305056205      cycles                    #    0.003 GHz                    
S0-C1           1          515613629      instructions              #    1.69  insn per cycle         
S0-C1           1         1505200048      branches                  #   14.335 M/sec                  
S0-C1           1           66872248      branch-misses             #    4.44% of all branches        
S0-C2           1          105003.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              19082      context-switches          #    0.182 K/sec                  
S0-C2           1                902      cpu-migrations            #    0.009 K/sec                  
S0-C2           1                 22      page-faults               #    0.000 K/sec                  
S0-C2           1          869556103      cycles                    #    0.008 GHz                    
S0-C2           1         3112357222      instructions              #    3.58  insn per cycle         
S0-C2           1         1294038429      branches                  #   12.324 M/sec                  
S0-C2           1           60760250      branch-misses             #    4.70% of all branches        
S0-C3           1          105003.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              17858      context-switches          #    0.170 K/sec                  
S0-C3           1               1097      cpu-migrations            #    0.010 K/sec                  
S0-C3           1              57328      page-faults               #    0.546 K/sec                  
S0-C3           1         1301079108      cycles                    #    0.012 GHz                    
S0-C3           1         3412375509      instructions              #    2.62  insn per cycle         
S0-C3           1         1397598551      branches                  #   13.310 M/sec                  
S0-C3           1           64734761      branch-misses             #    4.63% of all branches        

     105.004232739 seconds time elapsed

================================================================================
perf stat -o sqlite_4_threads.txt  --per-core -a taskset -c 0-3 ./sqlite_benchmark 4
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index......................  100 - 13000 INSERTs into table with no index......................  100 - 13000 INSERTs into table with no index......................  100 - 13000 INSERTs into table with no index......................    0.099s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.101s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.102s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.104s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.147s
 120 - 13000 unordered INSERTS with one index/PK...................    0.152s
 120 - 13000 unordered INSERTS with one index/PK...................    0.152s
 120 - 13000 unordered INSERTS with one index/PK...................    0.208s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.209s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.213s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.216s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.117s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.121s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.208s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.210s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.206s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.208s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.332s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.336s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.329s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.332s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.177s
 150 - CREATE INDEX five times.....................................    0.174s
   0.177s
 150 - CREATE INDEX five times.....................................  150 - CREATE INDEX five times.....................................    0.176s
 150 - CREATE INDEX five times.....................................    0.229s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.230s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.236s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.232s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.113s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.111s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.108s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.119s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.107s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.110s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.109s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.110s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.228s
 180 - 13000 INSERTS with three indexes............................    0.232s
 180 - 13000 INSERTS with three indexes............................    0.227s
 180 - 13000 INSERTS with three indexes............................    0.234s
 180 - 13000 INSERTS with three indexes............................    0.252s
 190 - DELETE and REFILL one table.................................    0.253s
 190 - DELETE and REFILL one table.................................    0.257s
 190 - DELETE and REFILL one table.................................    0.268s
 190 - DELETE and REFILL one table.................................    0.263s
 200 - VACUUM......................................................    0.261s
 200 - VACUUM......................................................    0.262s
 200 - VACUUM......................................................    0.263s
 200 - VACUUM......................................................    0.479s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.470s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.483s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.483s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.012s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.013s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.109s
 240 - 13000 UPDATES of individual rows............................    0.107s
 240 - 13000 UPDATES of individual rows............................    0.108s
 240 - 13000 UPDATES of individual rows............................    0.114s
 240 - 13000 UPDATES of individual rows............................    0.177s
 250 - One big UPDATE of the whole 13000-row table.................    0.175s
 250 - One big UPDATE of the whole 13000-row table.................    0.178s
 250 - One big UPDATE of the whole 13000-row table.................    0.058s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.184s
 250 - One big UPDATE of the whole 13000-row table.................    0.057s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.061s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.062s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.254s
 280 - 13000 DELETEs of individual rows............................    0.255s
 280 - 13000 DELETEs of individual rows............................    0.267s
 280 - 13000 DELETEs of individual rows............................    0.278s
 280 - 13000 DELETEs of individual rows............................    0.240s
 290 - Refill two 13000-row tables using REPLACE...................    0.237s
 290 - Refill two 13000-row tables using REPLACE...................    0.237s
 290 - Refill two 13000-row tables using REPLACE...................    0.252s
 290 - Refill two 13000-row tables using REPLACE...................    0.664s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.659s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.655s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.666s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.296s
 310 - 2600 four-ways joins........................................    0.298s
 310 - 2600 four-ways joins........................................    0.303s
 310 - 2600 four-ways joins........................................    0.320s
 310 - 2600 four-ways joins........................................    0.519s
 320 - subquery in result set......................................    0.526s
 320 - subquery in result set......................................    0.517s
 320 - subquery in result set......................................    0.526s
 320 - subquery in result set......................................    0.945s
 400 - 26000 REPLACE ops on an IPK.................................    0.947s
 400 - 26000 REPLACE ops on an IPK.................................    0.937s
 400 - 26000 REPLACE ops on an IPK.................................    0.940s
 400 - 26000 REPLACE ops on an IPK.................................    0.326s
 410 - 26000 SELECTS on an IPK.....................................    0.329s
 410 - 26000 SELECTS on an IPK.....................................    0.331s
 410 - 26000 SELECTS on an IPK.....................................    0.341s
 410 - 26000 SELECTS on an IPK.....................................    0.215s
 500 - 26000 REPLACE on TEXT PK....................................    0.207s
 500 - 26000 REPLACE on TEXT PK....................................    0.210s
 500 - 26000 REPLACE on TEXT PK....................................    0.214s
 500 - 26000 REPLACE on TEXT PK....................................    0.337s
 510 - 26000 SELECTS on a TEXT PK..................................    0.340s
 510 - 26000 SELECTS on a TEXT PK..................................    0.344s
 510 - 26000 SELECTS on a TEXT PK..................................    0.360s
 510 - 26000 SELECTS on a TEXT PK..................................    0.369s
 520 - 26000 SELECT DISTINCT.......................................    0.362s
 520 - 26000 SELECT DISTINCT.......................................    0.364s
 520 - 26000 SELECT DISTINCT.......................................    0.380s
 520 - 26000 SELECT DISTINCT.......................................    0.255s
 980 - PRAGMA integrity_check......................................    0.258s
 980 - PRAGMA integrity_check......................................    0.265s
 980 - PRAGMA integrity_check......................................    0.268s
 980 - PRAGMA integrity_check......................................    0.501s
 990 - ANALYZE.....................................................    0.496s
 990 - ANALYZE.....................................................    0.487s
 990 - ANALYZE.....................................................    0.078s
       TOTAL.......................................................    8.313s
   0.075s
       TOTAL.......................................................    8.309s
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
   0.077s
       TOTAL.......................................................    8.349s
SUCCESS::system(./speedtest1 --size 130) succeeded
   0.483s
 990 - ANALYZE.....................................................    0.075s
       TOTAL.......................................................    8.483s
SUCCESS::system(./speedtest1 --size 130) succeeded
# started on Thu Feb 25 07:32:16 2021


 Performance counter stats for 'system wide':

S0-C0           1            8580.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               4390      context-switches          #    0.512 K/sec                  
S0-C0           1                222      cpu-migrations            #    0.026 K/sec                  
S0-C0           1               1821      page-faults               #    0.212 K/sec                  
S0-C0           1         2051896335      cycles                    #    0.239 GHz                    
S0-C0           1          722935989      instructions              #    0.35  insn per cycle         
S0-C0           1          624503060      branches                  #   72.781 M/sec                  
S0-C0           1           90434610      branch-misses             #   14.48% of all branches        
S0-C1           1            8580.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               1646      context-switches          #    0.192 K/sec                  
S0-C1           1                178      cpu-migrations            #    0.021 K/sec                  
S0-C1           1               2020      page-faults               #    0.235 K/sec                  
S0-C1           1         1974189025      cycles                    #    0.230 GHz                    
S0-C1           1          700640675      instructions              #    0.35  insn per cycle         
S0-C1           1          621562606      branches                  #   72.438 M/sec                  
S0-C1           1           89783303      branch-misses             #   14.44% of all branches        
S0-C2           1            8580.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               9139      context-switches          #    0.001 M/sec                  
S0-C2           1                119      cpu-migrations            #    0.014 K/sec                  
S0-C2           1               1835      page-faults               #    0.214 K/sec                  
S0-C2           1         2160295386      cycles                    #    0.252 GHz                    
S0-C2           1          737541009      instructions              #    0.34  insn per cycle         
S0-C2           1          626439437      branches                  #   73.007 M/sec                  
S0-C2           1           92017768      branch-misses             #   14.69% of all branches        
S0-C3           1            8580.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               2974      context-switches          #    0.347 K/sec                  
S0-C3           1                207      cpu-migrations            #    0.024 K/sec                  
S0-C3           1               1889      page-faults               #    0.220 K/sec                  
S0-C3           1         1982131878      cycles                    #    0.231 GHz                    
S0-C3           1          707685471      instructions              #    0.36  insn per cycle         
S0-C3           1          622449530      branches                  #   72.542 M/sec                  
S0-C3           1           90993681      branch-misses             #   14.62% of all branches        

       8.580981143 seconds time elapsed

================================================================================
perf stat -o go_word2vec_4_threads.txt  --per-core -a taskset -c 0-3 ./go_word2vec.sh 4
/root/i-benchmarks/golang/bin
Save trained vectors to example/word_vectors_sg.txt
# started on Thu Feb 25 07:32:25 2021


 Performance counter stats for 'system wide':

S0-C0           1           40454.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              10178      context-switches          #    0.252 K/sec                  
S0-C0           1                122      cpu-migrations            #    0.003 K/sec                  
S0-C0           1               8990      page-faults               #    0.222 K/sec                  
S0-C0           1         2330904194      cycles                    #    0.058 GHz                    
S0-C0           1         3730718537      instructions              #    1.60  insn per cycle         
S0-C0           1         1921451000      branches                  #   47.497 M/sec                  
S0-C0           1           35238378      branch-misses             #    1.83% of all branches        
S0-C1           1           40454.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               9120      context-switches          #    0.225 K/sec                  
S0-C1           1                 98      cpu-migrations            #    0.002 K/sec                  
S0-C1           1                194      page-faults               #    0.005 K/sec                  
S0-C1           1         1343047824      cycles                    #    0.033 GHz                    
S0-C1           1         3182175885      instructions              #    2.37  insn per cycle         
S0-C1           1         1875078641      branches                  #   46.351 M/sec                  
S0-C1           1           34835969      branch-misses             #    1.86% of all branches        
S0-C2           1           40454.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               9053      context-switches          #    0.224 K/sec                  
S0-C2           1                118      cpu-migrations            #    0.003 K/sec                  
S0-C2           1              11193      page-faults               #    0.277 K/sec                  
S0-C2           1         1810309484      cycles                    #    0.045 GHz                    
S0-C2           1         2314170700      instructions              #    1.28  insn per cycle         
S0-C2           1         2179117768      branches                  #   53.866 M/sec                  
S0-C2           1           61454792      branch-misses             #    2.82% of all branches        
S0-C3           1           40454.32 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               9800      context-switches          #    0.242 K/sec                  
S0-C3           1                 77      cpu-migrations            #    0.002 K/sec                  
S0-C3           1              13848      page-faults               #    0.342 K/sec                  
S0-C3           1         3095423626      cycles                    #    0.077 GHz                    
S0-C3           1         3112978575      instructions              #    1.01  insn per cycle         
S0-C3           1         2255294231      branches                  #   55.749 M/sec                  
S0-C3           1           68996989      branch-misses             #    3.06% of all branches        

      40.454859763 seconds time elapsed

================================================================================
================================================================================
Running run_forest_importances_faces test
perf stat -o ../output/run_forest_importances_faces.log --per-core -a taskset -c 0-3 ./run_forest_importances_faces.sh -n 4

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.


=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.



/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Fitting ExtraTreesClassifier on faces data with 1 cores...
Fitting ExtraTreesClassifier on faces data with 1 cores...
Fitting ExtraTreesClassifier on faces data with 1 cores...
Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.683s
done in 12.660s
done in 12.823s
done in 12.851s
/root/i-benchmarks/scikit/bin
# started on Thu Feb 25 07:33:05 2021


 Performance counter stats for 'system wide':

S0-C0           1           23354.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               6855      context-switches          #    0.294 K/sec                  
S0-C0           1                153      cpu-migrations            #    0.007 K/sec                  
S0-C0           1              41610      page-faults               #    0.002 M/sec                  
S0-C0           1         3666526382      cycles                    #    0.157 GHz                    
S0-C0           1         2715597532      instructions              #    0.74  insn per cycle         
S0-C0           1          777942887      branches                  #   33.310 M/sec                  
S0-C0           1          194678045      branch-misses             #   25.02% of all branches        
S0-C1           1           23354.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               3876      context-switches          #    0.166 K/sec                  
S0-C1           1                150      cpu-migrations            #    0.006 K/sec                  
S0-C1           1              42563      page-faults               #    0.002 M/sec                  
S0-C1           1         3743999803      cycles                    #    0.160 GHz                    
S0-C1           1         2811858916      instructions              #    0.75  insn per cycle         
S0-C1           1          789174461      branches                  #   33.791 M/sec                  
S0-C1           1          195139578      branch-misses             #   24.73% of all branches        
S0-C2           1           23354.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               5093      context-switches          #    0.218 K/sec                  
S0-C2           1                141      cpu-migrations            #    0.006 K/sec                  
S0-C2           1              42674      page-faults               #    0.002 M/sec                  
S0-C2           1         3722157122      cycles                    #    0.159 GHz                    
S0-C2           1         2749997749      instructions              #    0.74  insn per cycle         
S0-C2           1          782049403      branches                  #   33.485 M/sec                  
S0-C2           1          194366683      branch-misses             #   24.85% of all branches        
S0-C3           1           23354.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               5037      context-switches          #    0.216 K/sec                  
S0-C3           1                156      cpu-migrations            #    0.007 K/sec                  
S0-C3           1              41488      page-faults               #    0.002 M/sec                  
S0-C3           1         3618714183      cycles                    #    0.155 GHz                    
S0-C3           1         2766227815      instructions              #    0.76  insn per cycle         
S0-C3           1          784077528      branches                  #   33.572 M/sec                  
S0-C3           1          195009392      branch-misses             #   24.87% of all branches        

      23.355352031 seconds time elapsed

================================================================================
Running run_multioutput_face_completion test
perf stat -o ../output/run_multioutput_face_completion.log --per-core -a taskset -c 0-3 ./run_multioutput_face_completion.sh -n 4

==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.


==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.




==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.


/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/root/i-benchmarks/scikit/bin
# started on Thu Feb 25 07:33:29 2021


 Performance counter stats for 'system wide':

S0-C0           1           55638.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              11334      context-switches          #    0.204 K/sec                  
S0-C0           1                200      cpu-migrations            #    0.004 K/sec                  
S0-C0           1             111734      page-faults               #    0.002 M/sec                  
S0-C0           1         1150488486      cycles                    #    0.021 GHz                    
S0-C0           1         3702833466      instructions              #    3.22  insn per cycle         
S0-C0           1         1577334566      branches                  #   28.350 M/sec                  
S0-C0           1          137259698      branch-misses             #    8.70% of all branches        
S0-C1           1           55638.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               4956      context-switches          #    0.089 K/sec                  
S0-C1           1                208      cpu-migrations            #    0.004 K/sec                  
S0-C1           1             130168      page-faults               #    0.002 M/sec                  
S0-C1           1          951370191      cycles                    #    0.017 GHz                    
S0-C1           1         3639470006      instructions              #    3.83  insn per cycle         
S0-C1           1         1536431790      branches                  #   27.614 M/sec                  
S0-C1           1          132612190      branch-misses             #    8.63% of all branches        
S0-C2           1           55638.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6473      context-switches          #    0.116 K/sec                  
S0-C2           1                196      cpu-migrations            #    0.004 K/sec                  
S0-C2           1             127249      page-faults               #    0.002 M/sec                  
S0-C2           1         1082355936      cycles                    #    0.019 GHz                    
S0-C2           1         3665760488      instructions              #    3.39  insn per cycle         
S0-C2           1         1560846273      branches                  #   28.053 M/sec                  
S0-C2           1          135702906      branch-misses             #    8.69% of all branches        
S0-C3           1           55638.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               5015      context-switches          #    0.090 K/sec                  
S0-C3           1                186      cpu-migrations            #    0.003 K/sec                  
S0-C3           1             135117      page-faults               #    0.002 M/sec                  
S0-C3           1          984386320      cycles                    #    0.018 GHz                    
S0-C3           1         3682393504      instructions              #    3.74  insn per cycle         
S0-C3           1         1553028460      branches                  #   27.913 M/sec                  
S0-C3           1          133002008      branch-misses             #    8.56% of all branches        

      55.639294869 seconds time elapsed

================================================================================
Running run_logistic_path test
perf stat -o ../output/run_logistic_path.log --per-core -a taskset -c 0-3 ./run_logistic_path.sh -n 4

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.



==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.



==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.



==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Computing regularization path ...
Computing regularization path ...
Computing regularization path ...
Computing regularization path ...
This took 34.760s
This took 35.006s
This took 35.343s
This took 36.525s
/root/i-benchmarks/scikit/bin
# started on Thu Feb 25 07:34:24 2021


 Performance counter stats for 'system wide':

S0-C0           1           45349.02 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               9172      context-switches          #    0.202 K/sec                  
S0-C0           1                204      cpu-migrations            #    0.004 K/sec                  
S0-C0           1              26665      page-faults               #    0.588 K/sec                  
S0-C0           1         3543746923      cycles                    #    0.078 GHz                    
S0-C0           1         3909144546      instructions              #    1.10  insn per cycle         
S0-C0           1         2607892483      branches                  #   57.507 M/sec                  
S0-C0           1          445150295      branch-misses             #   17.07% of all branches        
S0-C1           1           45349.02 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               5965      context-switches          #    0.132 K/sec                  
S0-C1           1                148      cpu-migrations            #    0.003 K/sec                  
S0-C1           1              27634      page-faults               #    0.609 K/sec                  
S0-C1           1          599051327      cycles                    #    0.013 GHz                    
S0-C1           1         1015322066      instructions              #    1.69  insn per cycle         
S0-C1           1         2746998098      branches                  #   60.575 M/sec                  
S0-C1           1          513440691      branch-misses             #   18.69% of all branches        
S0-C2           1           45349.02 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               7357      context-switches          #    0.162 K/sec                  
S0-C2           1                177      cpu-migrations            #    0.004 K/sec                  
S0-C2           1              27356      page-faults               #    0.603 K/sec                  
S0-C2           1         2821756656      cycles                    #    0.062 GHz                    
S0-C2           1          289698582      instructions              #    0.10  insn per cycle         
S0-C2           1         2676642313      branches                  #   59.023 M/sec                  
S0-C2           1          447763945      branch-misses             #   16.73% of all branches        
S0-C3           1           45349.02 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               6397      context-switches          #    0.141 K/sec                  
S0-C3           1                159      cpu-migrations            #    0.004 K/sec                  
S0-C3           1              27487      page-faults               #    0.606 K/sec                  
S0-C3           1         3162271198      cycles                    #    0.070 GHz                    
S0-C3           1          285324126      instructions              #    0.09  insn per cycle         
S0-C3           1         2674642626      branches                  #   58.979 M/sec                  
S0-C3           1          447272997      branch-misses             #   16.72% of all branches        

      45.349579748 seconds time elapsed

================================================================================
Running run_plot_svm_nonlinear test
perf stat -o ../output/run_plot_svm_nonlinear.log --per-core -a taskset -c 0-3 ./run_plot_svm_nonlinear.sh -n 4

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.



==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/root/i-benchmarks/scikit/bin
# started on Thu Feb 25 07:35:10 2021


 Performance counter stats for 'system wide':

S0-C0           1           16343.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               2519      context-switches          #    0.154 K/sec                  
S0-C0           1                101      cpu-migrations            #    0.006 K/sec                  
S0-C0           1              30701      page-faults               #    0.002 M/sec                  
S0-C0           1         3053252570      cycles                    #    0.187 GHz                    
S0-C0           1          409647685      instructions              #    0.13  insn per cycle         
S0-C0           1          942704386      branches                  #   57.681 M/sec                  
S0-C0           1           89859239      branch-misses             #    9.53% of all branches        
S0-C1           1           16343.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               2928      context-switches          #    0.179 K/sec                  
S0-C1           1                 93      cpu-migrations            #    0.006 K/sec                  
S0-C1           1              29541      page-faults               #    0.002 M/sec                  
S0-C1           1         3105213530      cycles                    #    0.190 GHz                    
S0-C1           1          401796466      instructions              #    0.13  insn per cycle         
S0-C1           1          941605309      branches                  #   57.614 M/sec                  
S0-C1           1           89835716      branch-misses             #    9.54% of all branches        
S0-C2           1           16343.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               2101      context-switches          #    0.129 K/sec                  
S0-C2           1                 88      cpu-migrations            #    0.005 K/sec                  
S0-C2           1              32464      page-faults               #    0.002 M/sec                  
S0-C2           1         3302398502      cycles                    #    0.202 GHz                    
S0-C2           1          440193437      instructions              #    0.13  insn per cycle         
S0-C2           1          948368915      branches                  #   58.028 M/sec                  
S0-C2           1           89368341      branch-misses             #    9.42% of all branches        
S0-C3           1           16343.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               1717      context-switches          #    0.105 K/sec                  
S0-C3           1                104      cpu-migrations            #    0.006 K/sec                  
S0-C3           1              32074      page-faults               #    0.002 M/sec                  
S0-C3           1         3238305322      cycles                    #    0.198 GHz                    
S0-C3           1          440789626      instructions              #    0.14  insn per cycle         
S0-C3           1          947752664      branches                  #   57.990 M/sec                  
S0-C3           1           89374808      branch-misses             #    9.43% of all branches        

      16.343712115 seconds time elapsed

================================================================================
Running run_plot_theilsen test
perf stat -o ../output/run_plot_theilsen.log --per-core -a taskset -c 0-3 ./run_plot_theilsen.sh -n 4
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp

====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.

====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.



====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.

/root/i-benchmarks/scikit/bin
# started on Thu Feb 25 07:35:26 2021


 Performance counter stats for 'system wide':

S0-C0           1           38099.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              16751      context-switches          #    0.440 K/sec                  
S0-C0           1                117      cpu-migrations            #    0.003 K/sec                  
S0-C0           1              44076      page-faults               #    0.001 M/sec                  
S0-C0           1         3539834888      cycles                    #    0.093 GHz                    
S0-C0           1         1280788764      instructions              #    0.36  insn per cycle         
S0-C0           1         1164418590      branches                  #   30.562 M/sec                  
S0-C0           1          343055492      branch-misses             #   29.46% of all branches        
S0-C1           1           38099.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               5414      context-switches          #    0.142 K/sec                  
S0-C1           1                 99      cpu-migrations            #    0.003 K/sec                  
S0-C1           1              47803      page-faults               #    0.001 M/sec                  
S0-C1           1         3537199005      cycles                    #    0.093 GHz                    
S0-C1           1         1405692327      instructions              #    0.40  insn per cycle         
S0-C1           1         1181470074      branches                  #   31.010 M/sec                  
S0-C1           1          342721799      branch-misses             #   29.01% of all branches        
S0-C2           1           38099.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               5171      context-switches          #    0.136 K/sec                  
S0-C2           1                 79      cpu-migrations            #    0.002 K/sec                  
S0-C2           1              49318      page-faults               #    0.001 M/sec                  
S0-C2           1          213921562      cycles                    #    0.006 GHz                    
S0-C2           1         1590086228      instructions              #    7.43  insn per cycle         
S0-C2           1         1208502997      branches                  #   31.719 M/sec                  
S0-C2           1          345609769      branch-misses             #   28.60% of all branches        
S0-C3           1           38099.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               3583      context-switches          #    0.094 K/sec                  
S0-C3           1                109      cpu-migrations            #    0.003 K/sec                  
S0-C3           1              47687      page-faults               #    0.001 M/sec                  
S0-C3           1         3527261516      cycles                    #    0.093 GHz                    
S0-C3           1         1414683965      instructions              #    0.40  insn per cycle         
S0-C3           1         1182988369      branches                  #   31.050 M/sec                  
S0-C3           1          342871919      branch-misses             #   28.98% of all branches        

      38.100253522 seconds time elapsed

================================================================================
================================================================================
perf stat -o 099_go.log --per-core -a taskset -c 0-3 ./spec95_099_go.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:36:04 2021


 Performance counter stats for 'system wide':

S0-C0           1           50745.13 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               4260      context-switches          #    0.084 K/sec                  
S0-C0           1                 52      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                257      page-faults               #    0.005 K/sec                  
S0-C0           1         3041309921      cycles                    #    0.060 GHz                    
S0-C0           1         1351377878      instructions              #    0.44  insn per cycle         
S0-C0           1         2632523641      branches                  #   51.877 M/sec                  
S0-C0           1         1080747968      branch-misses             #   41.05% of all branches        
S0-C1           1           50745.13 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               6660      context-switches          #    0.131 K/sec                  
S0-C1           1                 17      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                360      page-faults               #    0.007 K/sec                  
S0-C1           1         3139257456      cycles                    #    0.062 GHz                    
S0-C1           1         1400104093      instructions              #    0.45  insn per cycle         
S0-C1           1         2636936017      branches                  #   51.964 M/sec                  
S0-C1           1         1082396811      branch-misses             #   41.05% of all branches        
S0-C2           1           50745.13 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               3978      context-switches          #    0.078 K/sec                  
S0-C2           1                 41      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                490      page-faults               #    0.010 K/sec                  
S0-C2           1         3106957494      cycles                    #    0.061 GHz                    
S0-C2           1         1372207397      instructions              #    0.44  insn per cycle         
S0-C2           1         2633917373      branches                  #   51.905 M/sec                  
S0-C2           1         1081821623      branch-misses             #   41.07% of all branches        
S0-C3           1           50745.13 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               1975      context-switches          #    0.039 K/sec                  
S0-C3           1                 43      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                433      page-faults               #    0.009 K/sec                  
S0-C3           1         1891722139      cycles                    #    0.037 GHz                    
S0-C3           1         1403461240      instructions              #    0.74  insn per cycle         
S0-C3           1         2636538141      branches                  #   51.956 M/sec                  
S0-C3           1         1081271562      branch-misses             #   41.01% of all branches        

      50.745831130 seconds time elapsed

================================================================================
perf stat -o 101_tomcatv.log --per-core -a taskset -c 0-3 ./spec95_101_tomcatv.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:36:55 2021


 Performance counter stats for 'system wide':

S0-C0           1           83575.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               6872      context-switches          #    0.082 K/sec                  
S0-C0           1                 66      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               3824      page-faults               #    0.046 K/sec                  
S0-C0           1         1471059879      cycles                    #    0.018 GHz                    
S0-C0           1         3280619827      instructions              #    2.23  insn per cycle         
S0-C0           1          855812694      branches                  #   10.240 M/sec                  
S0-C0           1           32888895      branch-misses             #    3.84% of all branches        
S0-C1           1           83575.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               3532      context-switches          #    0.042 K/sec                  
S0-C1           1                 41      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               3923      page-faults               #    0.047 K/sec                  
S0-C1           1          903233359      cycles                    #    0.011 GHz                    
S0-C1           1         3207023787      instructions              #    3.55  insn per cycle         
S0-C1           1          847110305      branches                  #   10.136 M/sec                  
S0-C1           1           30967446      branch-misses             #    3.66% of all branches        
S0-C2           1           83575.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6034      context-switches          #    0.072 K/sec                  
S0-C2           1                 46      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               3941      page-faults               #    0.047 K/sec                  
S0-C2           1         1515046347      cycles                    #    0.018 GHz                    
S0-C2           1         3282591082      instructions              #    2.17  insn per cycle         
S0-C2           1          857143460      branches                  #   10.256 M/sec                  
S0-C2           1           32344495      branch-misses             #    3.77% of all branches        
S0-C3           1           83575.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              12015      context-switches          #    0.144 K/sec                  
S0-C3           1                 58      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               3921      page-faults               #    0.047 K/sec                  
S0-C3           1         1014850309      cycles                    #    0.012 GHz                    
S0-C3           1         3273378241      instructions              #    3.23  insn per cycle         
S0-C3           1          856571924      branches                  #   10.249 M/sec                  
S0-C3           1           33216687      branch-misses             #    3.88% of all branches        

      83.577633188 seconds time elapsed

================================================================================
perf stat -o 102_swim.log --per-core -a taskset -c 0-3 ./spec95_102_swim.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:38:19 2021


 Performance counter stats for 'system wide':

S0-C0           1           69212.50 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               8034      context-switches          #    0.116 K/sec                  
S0-C0           1                 95      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               4546      page-faults               #    0.066 K/sec                  
S0-C0           1         2236164972      cycles                    #    0.032 GHz                    
S0-C0           1         1880109055      instructions              #    0.84  insn per cycle         
S0-C0           1          197159352      branches                  #    2.849 M/sec                  
S0-C0           1            6807955      branch-misses             #    3.45% of all branches        
S0-C1           1           69212.50 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               8254      context-switches          #    0.119 K/sec                  
S0-C1           1                 38      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               4690      page-faults               #    0.068 K/sec                  
S0-C1           1         2063258022      cycles                    #    0.030 GHz                    
S0-C1           1         1874386029      instructions              #    0.91  insn per cycle         
S0-C1           1          195397186      branches                  #    2.823 M/sec                  
S0-C1           1            6188181      branch-misses             #    3.17% of all branches        
S0-C2           1           69212.50 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6043      context-switches          #    0.087 K/sec                  
S0-C2           1                 53      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               4032      page-faults               #    0.058 K/sec                  
S0-C2           1         1690911337      cycles                    #    0.024 GHz                    
S0-C2           1         1821651703      instructions              #    1.08  insn per cycle         
S0-C2           1          189766574      branches                  #    2.742 M/sec                  
S0-C2           1            5036073      branch-misses             #    2.65% of all branches        
S0-C3           1           69212.50 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               2750      context-switches          #    0.040 K/sec                  
S0-C3           1                 52      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               4254      page-faults               #    0.061 K/sec                  
S0-C3           1         1764954534      cycles                    #    0.026 GHz                    
S0-C3           1         1885715512      instructions              #    1.07  insn per cycle         
S0-C3           1          195212595      branches                  #    2.820 M/sec                  
S0-C3           1            5663922      branch-misses             #    2.90% of all branches        

      69.213892386 seconds time elapsed

================================================================================
perf stat -o 103_su2cor.log --per-core -a taskset -c 0-3 ./spec95_103_su2cor.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:39:28 2021


 Performance counter stats for 'system wide':

S0-C0           1          121616.41 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              29397      context-switches          #    0.242 K/sec                  
S0-C0           1                152      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               6117      page-faults               #    0.050 K/sec                  
S0-C0           1          730809508      cycles                    #    0.006 GHz                    
S0-C0           1          207369659      instructions              #    0.28  insn per cycle         
S0-C0           1         1233355696      branches                  #   10.141 M/sec                  
S0-C0           1          117174886      branch-misses             #    9.50% of all branches        
S0-C1           1          121616.41 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               8223      context-switches          #    0.068 K/sec                  
S0-C1           1                 54      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               6319      page-faults               #    0.052 K/sec                  
S0-C1           1         3730847538      cycles                    #    0.031 GHz                    
S0-C1           1         4263094101      instructions              #    1.14  insn per cycle         
S0-C1           1         1200574387      branches                  #    9.872 M/sec                  
S0-C1           1          109076015      branch-misses             #    9.09% of all branches        
S0-C2           1          121616.41 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              14518      context-switches          #    0.119 K/sec                  
S0-C2           1                109      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               6245      page-faults               #    0.051 K/sec                  
S0-C2           1         4190651666      cycles                    #    0.034 GHz                    
S0-C2           1           17789387      instructions              #    0.00  insn per cycle         
S0-C2           1         1207075419      branches                  #    9.925 M/sec                  
S0-C2           1          110791614      branch-misses             #    9.18% of all branches        
S0-C3           1          121616.41 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               3863      context-switches          #    0.032 K/sec                  
S0-C3           1                 68      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               6209      page-faults               #    0.051 K/sec                  
S0-C3           1         3993550858      cycles                    #    0.033 GHz                    
S0-C3           1          121828470      instructions              #    0.03  insn per cycle         
S0-C3           1         1216904179      branches                  #   10.006 M/sec                  
S0-C3           1          111225500      branch-misses             #    9.14% of all branches        

     121.618225651 seconds time elapsed

================================================================================
perf stat -o 104_hydro2d.log --per-core -a taskset -c 0-3 ./spec95_104_hydro2d.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:41:30 2021


 Performance counter stats for 'system wide':

S0-C0           1           98143.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               9334      context-switches          #    0.095 K/sec                  
S0-C0           1                 89      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               2596      page-faults               #    0.026 K/sec                  
S0-C0           1         1916483418      cycles                    #    0.020 GHz                    
S0-C0           1         1489171885      instructions              #    0.78  insn per cycle         
S0-C0           1         2621243875      branches                  #   26.708 M/sec                  
S0-C0           1           22992763      branch-misses             #    0.88% of all branches        
S0-C1           1           98143.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              10601      context-switches          #    0.108 K/sec                  
S0-C1           1                 28      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               2505      page-faults               #    0.026 K/sec                  
S0-C1           1         1882807208      cycles                    #    0.019 GHz                    
S0-C1           1         1489489716      instructions              #    0.79  insn per cycle         
S0-C1           1         2619948468      branches                  #   26.695 M/sec                  
S0-C1           1           22505812      branch-misses             #    0.86% of all branches        
S0-C2           1           98143.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               9177      context-switches          #    0.094 K/sec                  
S0-C2           1                 67      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               2445      page-faults               #    0.025 K/sec                  
S0-C2           1         2129531530      cycles                    #    0.022 GHz                    
S0-C2           1         1478336927      instructions              #    0.69  insn per cycle         
S0-C2           1         2619169253      branches                  #   26.687 M/sec                  
S0-C2           1           22103222      branch-misses             #    0.84% of all branches        
S0-C3           1           98143.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               2717      context-switches          #    0.028 K/sec                  
S0-C3           1                 29      cpu-migrations            #    0.000 K/sec                  
S0-C3           1               2441      page-faults               #    0.025 K/sec                  
S0-C3           1         1889050667      cycles                    #    0.019 GHz                    
S0-C3           1         1480914367      instructions              #    0.78  insn per cycle         
S0-C3           1         2618298619      branches                  #   26.678 M/sec                  
S0-C3           1           21136202      branch-misses             #    0.81% of all branches        

      98.144830024 seconds time elapsed

================================================================================
perf stat -o 107_mgrid.log --per-core -a taskset -c 0-3 ./spec95_107_mgrid.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:43:08 2021


 Performance counter stats for 'system wide':

S0-C0           1          105746.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              10478      context-switches          #    0.099 K/sec                  
S0-C0           1                143      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               2085      page-faults               #    0.020 K/sec                  
S0-C0           1          429209114      cycles                    #    0.004 GHz                    
S0-C0           1          272777292      instructions              #    0.64  insn per cycle         
S0-C0           1          727581061      branches                  #    6.880 M/sec                  
S0-C0           1           38943362      branch-misses             #    5.35% of all branches        
S0-C1           1          105746.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               5380      context-switches          #    0.051 K/sec                  
S0-C1           1                 45      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               2214      page-faults               #    0.021 K/sec                  
S0-C1           1          253623928      cycles                    #    0.002 GHz                    
S0-C1           1          243671442      instructions              #    0.96  insn per cycle         
S0-C1           1          718454747      branches                  #    6.794 M/sec                  
S0-C1           1           36505091      branch-misses             #    5.08% of all branches        
S0-C2           1          105746.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               8545      context-switches          #    0.081 K/sec                  
S0-C2           1                 93      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               2268      page-faults               #    0.021 K/sec                  
S0-C2           1          323491524      cycles                    #    0.003 GHz                    
S0-C2           1          272551564      instructions              #    0.84  insn per cycle         
S0-C2           1          724727416      branches                  #    6.853 M/sec                  
S0-C2           1           37863839      branch-misses             #    5.22% of all branches        
S0-C3           1          105746.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              11893      context-switches          #    0.112 K/sec                  
S0-C3           1                 57      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               2049      page-faults               #    0.019 K/sec                  
S0-C3           1          429561171      cycles                    #    0.004 GHz                    
S0-C3           1          323203854      instructions              #    0.75  insn per cycle         
S0-C3           1          731071433      branches                  #    6.913 M/sec                  
S0-C3           1           39441361      branch-misses             #    5.40% of all branches        

     105.747645437 seconds time elapsed

================================================================================
perf stat -o 110_applu.log --per-core -a taskset -c 0-3 ./spec95_110_applu.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:44:54 2021


 Performance counter stats for 'system wide':

S0-C0           1           85283.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              19495      context-switches          #    0.229 K/sec                  
S0-C0           1                 67      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               7538      page-faults               #    0.088 K/sec                  
S0-C0           1          608248931      cycles                    #    0.007 GHz                    
S0-C0           1          608029969      instructions              #    1.00  insn per cycle         
S0-C0           1          374313313      branches                  #    4.389 M/sec                  
S0-C0           1           25223559      branch-misses             #    6.74% of all branches        
S0-C1           1           85283.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               4387      context-switches          #    0.051 K/sec                  
S0-C1           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               7764      page-faults               #    0.091 K/sec                  
S0-C1           1         4117118079      cycles                    #    0.048 GHz                    
S0-C1           1          429092060      instructions              #    0.10  insn per cycle         
S0-C1           1          348523285      branches                  #    4.087 M/sec                  
S0-C1           1           19115306      branch-misses             #    5.48% of all branches        
S0-C2           1           85283.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6537      context-switches          #    0.077 K/sec                  
S0-C2           1                 45      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               7762      page-faults               #    0.091 K/sec                  
S0-C2           1         4137414178      cycles                    #    0.049 GHz                    
S0-C2           1          487612499      instructions              #    0.12  insn per cycle         
S0-C2           1          354695046      branches                  #    4.159 M/sec                  
S0-C2           1           20329926      branch-misses             #    5.73% of all branches        
S0-C3           1           85283.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               9839      context-switches          #    0.115 K/sec                  
S0-C3           1                 38      cpu-migrations            #    0.000 K/sec                  
S0-C3           1               7547      page-faults               #    0.088 K/sec                  
S0-C3           1         4131107530      cycles                    #    0.048 GHz                    
S0-C3           1          530716817      instructions              #    0.13  insn per cycle         
S0-C3           1          359882445      branches                  #    4.220 M/sec                  
S0-C3           1           21458955      branch-misses             #    5.96% of all branches        

      85.284758174 seconds time elapsed

================================================================================
perf stat -o 125_turb3d.log --per-core -a taskset -c 0-3 ./spec95_125_turb3d.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:46:19 2021


 Performance counter stats for 'system wide':

S0-C0           1          106171.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               9972      context-switches          #    0.094 K/sec                  
S0-C0           1                 66      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               6491      page-faults               #    0.061 K/sec                  
S0-C0           1         2107131042      cycles                    #    0.020 GHz                    
S0-C0           1         1691971238      instructions              #    0.80  insn per cycle         
S0-C0           1         3567790552      branches                  #   33.604 M/sec                  
S0-C0           1          288592297      branch-misses             #    8.09% of all branches        
S0-C1           1          106171.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              12971      context-switches          #    0.122 K/sec                  
S0-C1           1                 36      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               6692      page-faults               #    0.063 K/sec                  
S0-C1           1         2549533458      cycles                    #    0.024 GHz                    
S0-C1           1         1928542268      instructions              #    0.76  insn per cycle         
S0-C1           1         3577996220      branches                  #   33.700 M/sec                  
S0-C1           1          288695480      branch-misses             #    8.07% of all branches        
S0-C2           1          106171.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               8661      context-switches          #    0.082 K/sec                  
S0-C2           1                 34      cpu-migrations            #    0.000 K/sec                  
S0-C2           1               6618      page-faults               #    0.062 K/sec                  
S0-C2           1         2357818346      cycles                    #    0.022 GHz                    
S0-C2           1         1896794128      instructions              #    0.80  insn per cycle         
S0-C2           1         3574277459      branches                  #   33.665 M/sec                  
S0-C2           1          287087158      branch-misses             #    8.03% of all branches        
S0-C3           1          106171.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               3307      context-switches          #    0.031 K/sec                  
S0-C3           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C3           1               6755      page-faults               #    0.064 K/sec                  
S0-C3           1         2654708910      cycles                    #    0.025 GHz                    
S0-C3           1         2202775660      instructions              #    0.83  insn per cycle         
S0-C3           1         3591049156      branches                  #   33.823 M/sec                  
S0-C3           1          290877950      branch-misses             #    8.10% of all branches        

     106.172878011 seconds time elapsed

================================================================================
perf stat -o 126_gcc.log --per-core -a taskset -c 0-3 ./spec95_126_gcc.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:48:06 2021


 Performance counter stats for 'system wide':

S0-C0           1            7281.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               1149      context-switches          #    0.158 K/sec                  
S0-C0           1                 26      cpu-migrations            #    0.004 K/sec                  
S0-C0           1               4645      page-faults               #    0.638 K/sec                  
S0-C0           1         3919449576      cycles                    #    0.538 GHz                    
S0-C0           1         3347476425      instructions              #    0.85  insn per cycle         
S0-C0           1          458662073      branches                  #   62.986 M/sec                  
S0-C0           1          117787045      branch-misses             #   25.68% of all branches        
S0-C1           1            7281.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                544      context-switches          #    0.075 K/sec                  
S0-C1           1                 27      cpu-migrations            #    0.004 K/sec                  
S0-C1           1               4418      page-faults               #    0.607 K/sec                  
S0-C1           1         3781135517      cycles                    #    0.519 GHz                    
S0-C1           1         3358033542      instructions              #    0.89  insn per cycle         
S0-C1           1          459666608      branches                  #   63.124 M/sec                  
S0-C1           1          117492331      branch-misses             #   25.56% of all branches        
S0-C2           1            7281.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               1002      context-switches          #    0.138 K/sec                  
S0-C2           1                 20      cpu-migrations            #    0.003 K/sec                  
S0-C2           1               4208      page-faults               #    0.578 K/sec                  
S0-C2           1         3765128854      cycles                    #    0.517 GHz                    
S0-C2           1         3355989294      instructions              #    0.89  insn per cycle         
S0-C2           1          459369939      branches                  #   63.084 M/sec                  
S0-C2           1          117410498      branch-misses             #   25.56% of all branches        
S0-C3           1            7281.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                993      context-switches          #    0.136 K/sec                  
S0-C3           1                 28      cpu-migrations            #    0.004 K/sec                  
S0-C3           1               4729      page-faults               #    0.649 K/sec                  
S0-C3           1         3885154839      cycles                    #    0.534 GHz                    
S0-C3           1         3348427584      instructions              #    0.86  insn per cycle         
S0-C3           1          458747689      branches                  #   62.998 M/sec                  
S0-C3           1          117868247      branch-misses             #   25.69% of all branches        

       7.282323026 seconds time elapsed

================================================================================
perf stat -o 129_compress.log --per-core -a taskset -c 0-3 ./spec95_129_compress.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:48:13 2021


 Performance counter stats for 'system wide':

S0-C0           1          179151.26 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              28943      context-switches          #    0.162 K/sec                  
S0-C0           1                100      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               9186      page-faults               #    0.051 K/sec                  
S0-C0           1         1414761459      cycles                    #    0.008 GHz                    
S0-C0           1         1684859689      instructions              #    1.19  insn per cycle         
S0-C0           1         3718224224      branches                  #   20.755 M/sec                  
S0-C0           1          627372830      branch-misses             #   16.87% of all branches        
S0-C1           1          179151.26 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               6386      context-switches          #    0.036 K/sec                  
S0-C1           1                 51      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               9247      page-faults               #    0.052 K/sec                  
S0-C1           1         2348874732      cycles                    #    0.013 GHz                    
S0-C1           1         1130982660      instructions              #    0.48  insn per cycle         
S0-C1           1         3653811857      branches                  #   20.395 M/sec                  
S0-C1           1          613074857      branch-misses             #   16.78% of all branches        
S0-C2           1          179151.26 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              12860      context-switches          #    0.072 K/sec                  
S0-C2           1                 49      cpu-migrations            #    0.000 K/sec                  
S0-C2           1               9136      page-faults               #    0.051 K/sec                  
S0-C2           1          308977961      cycles                    #    0.002 GHz                    
S0-C2           1         1279678333      instructions              #    4.14  insn per cycle         
S0-C2           1         3670158607      branches                  #   20.486 M/sec                  
S0-C2           1          616736726      branch-misses             #   16.80% of all branches        
S0-C3           1          179151.25 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              24283      context-switches          #    0.136 K/sec                  
S0-C3           1                 53      cpu-migrations            #    0.000 K/sec                  
S0-C3           1               9329      page-faults               #    0.052 K/sec                  
S0-C3           1         3105703417      cycles                    #    0.017 GHz                    
S0-C3           1         1421759947      instructions              #    0.46  insn per cycle         
S0-C3           1         3686558743      branches                  #   20.578 M/sec                  
S0-C3           1          621084986      branch-misses             #   16.85% of all branches        

     179.152956700 seconds time elapsed

================================================================================
perf stat -o 130_li.log --per-core -a taskset -c 0-3 ./spec95_130_li.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:51:12 2021


 Performance counter stats for 'system wide':

S0-C0           1           85772.96 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               8937      context-switches          #    0.104 K/sec                  
S0-C0           1                 59      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                336      page-faults               #    0.004 K/sec                  
S0-C0           1         1535321678      cycles                    #    0.018 GHz                    
S0-C0           1         1102185606      instructions              #    0.72  insn per cycle         
S0-C0           1         1834660578      branches                  #   21.390 M/sec                  
S0-C0           1         1043850138      branch-misses             #   56.90% of all branches        
S0-C1           1           85772.96 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               3831      context-switches          #    0.045 K/sec                  
S0-C1           1                 34      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                586      page-faults               #    0.007 K/sec                  
S0-C1           1         1355298156      cycles                    #    0.016 GHz                    
S0-C1           1         1019798436      instructions              #    0.75  insn per cycle         
S0-C1           1         1824774210      branches                  #   21.274 M/sec                  
S0-C1           1         1041754974      branch-misses             #   57.09% of all branches        
S0-C2           1           85772.97 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6898      context-switches          #    0.080 K/sec                  
S0-C2           1                 40      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                291      page-faults               #    0.003 K/sec                  
S0-C2           1         1346361079      cycles                    #    0.016 GHz                    
S0-C2           1         1040139132      instructions              #    0.77  insn per cycle         
S0-C2           1         1827689389      branches                  #   21.308 M/sec                  
S0-C2           1         1041787134      branch-misses             #   57.00% of all branches        
S0-C3           1           85772.96 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               8492      context-switches          #    0.099 K/sec                  
S0-C3           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                381      page-faults               #    0.004 K/sec                  
S0-C3           1         1349183470      cycles                    #    0.016 GHz                    
S0-C3           1         1037778595      instructions              #    0.77  insn per cycle         
S0-C3           1         1827455496      branches                  #   21.306 M/sec                  
S0-C3           1         1043112424      branch-misses             #   57.08% of all branches        

      85.773894218 seconds time elapsed

================================================================================
perf stat -o 132_ijpeg.log --per-core -a taskset -c 0-3 ./spec95_132_ijpeg.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:52:38 2021


 Performance counter stats for 'system wide':

S0-C0           1           25629.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               2740      context-switches          #    0.107 K/sec                  
S0-C0           1                 49      cpu-migrations            #    0.002 K/sec                  
S0-C0           1               2989      page-faults               #    0.117 K/sec                  
S0-C0           1         2982679241      cycles                    #    0.116 GHz                    
S0-C0           1          335563634      instructions              #    0.11  insn per cycle         
S0-C0           1         1130127538      branches                  #   44.095 M/sec                  
S0-C0           1          203121303      branch-misses             #   17.97% of all branches        
S0-C1           1           25629.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               2656      context-switches          #    0.104 K/sec                  
S0-C1           1                 28      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               2791      page-faults               #    0.109 K/sec                  
S0-C1           1         3106158968      cycles                    #    0.121 GHz                    
S0-C1           1          273341412      instructions              #    0.09  insn per cycle         
S0-C1           1         1119442970      branches                  #   43.678 M/sec                  
S0-C1           1          202841541      branch-misses             #   18.12% of all branches        
S0-C2           1           25629.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               2661      context-switches          #    0.104 K/sec                  
S0-C2           1                 35      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               2245      page-faults               #    0.088 K/sec                  
S0-C2           1         1590597739      cycles                    #    0.062 GHz                    
S0-C2           1         3678304492      instructions              #    2.31  insn per cycle         
S0-C2           1         1057088001      branches                  #   41.245 M/sec                  
S0-C2           1          188750696      branch-misses             #   17.86% of all branches        
S0-C3           1           25629.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               1430      context-switches          #    0.056 K/sec                  
S0-C3           1                 37      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               2674      page-faults               #    0.104 K/sec                  
S0-C3           1         3614785718      cycles                    #    0.141 GHz                    
S0-C3           1         1862775503      instructions              #    0.52  insn per cycle         
S0-C3           1          971394415      branches                  #   37.901 M/sec                  
S0-C3           1          165439717      branch-misses             #   17.03% of all branches        

      25.629972186 seconds time elapsed

================================================================================
perf stat -o 134_perl.log --per-core -a taskset -c 0-3 ./spec95_134_perl.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:53:04 2021


 Performance counter stats for 'system wide':

S0-C0           1           33122.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               6204      context-switches          #    0.187 K/sec                  
S0-C0           1                 50      cpu-migrations            #    0.002 K/sec                  
S0-C0           1               9131      page-faults               #    0.276 K/sec                  
S0-C0           1          993576938      cycles                    #    0.030 GHz                    
S0-C0           1          859618617      instructions              #    0.87  insn per cycle         
S0-C0           1         2733558314      branches                  #   82.529 M/sec                  
S0-C0           1          479093045      branch-misses             #   17.53% of all branches        
S0-C1           1           33122.21 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               2619      context-switches          #    0.079 K/sec                  
S0-C1           1                 23      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               9377      page-faults               #    0.283 K/sec                  
S0-C1           1          968790732      cycles                    #    0.029 GHz                    
S0-C1           1          827660307      instructions              #    0.85  insn per cycle         
S0-C1           1         2729370860      branches                  #   82.403 M/sec                  
S0-C1           1          477864105      branch-misses             #   17.51% of all branches        
S0-C2           1           33122.21 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               1330      context-switches          #    0.040 K/sec                  
S0-C2           1                 30      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               9288      page-faults               #    0.280 K/sec                  
S0-C2           1         1010049055      cycles                    #    0.030 GHz                    
S0-C2           1          818874071      instructions              #    0.81  insn per cycle         
S0-C2           1         2728312807      branches                  #   82.371 M/sec                  
S0-C2           1          477394164      branch-misses             #   17.50% of all branches        
S0-C3           1           33122.21 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               1646      context-switches          #    0.050 K/sec                  
S0-C3           1                 34      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               9242      page-faults               #    0.279 K/sec                  
S0-C3           1         1158932205      cycles                    #    0.035 GHz                    
S0-C3           1          822575831      instructions              #    0.71  insn per cycle         
S0-C3           1         2728704853      branches                  #   82.383 M/sec                  
S0-C3           1          477358993      branch-misses             #   17.49% of all branches        

      33.122765652 seconds time elapsed

================================================================================
perf stat -o 141_apsi.log --per-core -a taskset -c 0-3 ./spec95_141_apsi.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:53:37 2021


 Performance counter stats for 'system wide':

S0-C0           1           70947.21 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              11969      context-switches          #    0.169 K/sec                  
S0-C0           1                129      cpu-migrations            #    0.002 K/sec                  
S0-C0           1                996      page-faults               #    0.014 K/sec                  
S0-C0           1           99363806      cycles                    #    0.001 GHz                    
S0-C0           1         2253071027      instructions              #   22.67  insn per cycle         
S0-C0           1          889296963      branches                  #   12.535 M/sec                  
S0-C0           1           44198329      branch-misses             #    4.97% of all branches        
S0-C1           1           70947.21 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               5061      context-switches          #    0.071 K/sec                  
S0-C1           1                105      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               1110      page-faults               #    0.016 K/sec                  
S0-C1           1         4126525322      cycles                    #    0.058 GHz                    
S0-C1           1         2105332716      instructions              #    0.51  insn per cycle         
S0-C1           1          871966556      branches                  #   12.290 M/sec                  
S0-C1           1           40499863      branch-misses             #    4.64% of all branches        
S0-C2           1           70947.21 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6021      context-switches          #    0.085 K/sec                  
S0-C2           1                 79      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               1112      page-faults               #    0.016 K/sec                  
S0-C2           1         4287472695      cycles                    #    0.060 GHz                    
S0-C2           1         2121236908      instructions              #    0.49  insn per cycle         
S0-C2           1          873785341      branches                  #   12.316 M/sec                  
S0-C2           1           40918744      branch-misses             #    4.68% of all branches        
S0-C3           1           70947.21 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               3242      context-switches          #    0.046 K/sec                  
S0-C3           1                 59      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                916      page-faults               #    0.013 K/sec                  
S0-C3           1         4141856557      cycles                    #    0.058 GHz                    
S0-C3           1         2091338082      instructions              #    0.50  insn per cycle         
S0-C3           1          870078878      branches                  #   12.264 M/sec                  
S0-C3           1           39822229      branch-misses             #    4.58% of all branches        

      70.948077897 seconds time elapsed

================================================================================
perf stat -o 145_fpppp.log --per-core -a taskset -c 0-3 ./spec95_145_fpppp.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:54:48 2021


 Performance counter stats for 'system wide':

S0-C0           1          158622.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              26808      context-switches          #    0.169 K/sec                  
S0-C0           1                132      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                135      page-faults               #    0.001 K/sec                  
S0-C0           1         1242618219      cycles                    #    0.008 GHz                    
S0-C0           1         4032908713      instructions              #    3.25  insn per cycle         
S0-C0           1         1307250686      branches                  #    8.241 M/sec                  
S0-C0           1          132193733      branch-misses             #   10.11% of all branches        
S0-C1           1          158622.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              14708      context-switches          #    0.093 K/sec                  
S0-C1           1                 98      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                456      page-faults               #    0.003 K/sec                  
S0-C1           1          598047805      cycles                    #    0.004 GHz                    
S0-C1           1         3805856511      instructions              #    6.36  insn per cycle         
S0-C1           1         1277013254      branches                  #    8.051 M/sec                  
S0-C1           1          125945829      branch-misses             #    9.86% of all branches        
S0-C2           1          158622.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              10960      context-switches          #    0.069 K/sec                  
S0-C2           1                 40      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                447      page-faults               #    0.003 K/sec                  
S0-C2           1          223007313      cycles                    #    0.001 GHz                    
S0-C2           1         3768373502      instructions              #   16.90  insn per cycle         
S0-C2           1         1273216028      branches                  #    8.027 M/sec                  
S0-C2           1          124439864      branch-misses             #    9.77% of all branches        
S0-C3           1          158622.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              13470      context-switches          #    0.085 K/sec                  
S0-C3           1                 62      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                329      page-faults               #    0.002 K/sec                  
S0-C3           1          628273056      cycles                    #    0.004 GHz                    
S0-C3           1         3785960523      instructions              #    6.03  insn per cycle         
S0-C3           1         1275156922      branches                  #    8.039 M/sec                  
S0-C3           1          125828487      branch-misses             #    9.87% of all branches        

     158.624229776 seconds time elapsed

================================================================================
perf stat -o 146_wave5.log --per-core -a taskset -c 0-3 ./spec95_146_wave5.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:57:27 2021


 Performance counter stats for 'system wide':

S0-C0           1           71476.85 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               5784      context-switches          #    0.081 K/sec                  
S0-C0           1                 88      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              10518      page-faults               #    0.147 K/sec                  
S0-C0           1         2739156177      cycles                    #    0.038 GHz                    
S0-C0           1         2645775628      instructions              #    0.97  insn per cycle         
S0-C0           1         1335389436      branches                  #   18.683 M/sec                  
S0-C0           1           18682473      branch-misses             #    1.40% of all branches        
S0-C1           1           71476.85 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               2414      context-switches          #    0.034 K/sec                  
S0-C1           1                 54      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              10611      page-faults               #    0.148 K/sec                  
S0-C1           1         2600875803      cycles                    #    0.036 GHz                    
S0-C1           1         2560482342      instructions              #    0.98  insn per cycle         
S0-C1           1         1325464516      branches                  #   18.544 M/sec                  
S0-C1           1           16700800      branch-misses             #    1.26% of all branches        
S0-C2           1           71476.85 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               7039      context-switches          #    0.098 K/sec                  
S0-C2           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              10488      page-faults               #    0.147 K/sec                  
S0-C2           1         2721544762      cycles                    #    0.038 GHz                    
S0-C2           1         2618094805      instructions              #    0.96  insn per cycle         
S0-C2           1         1332028773      branches                  #   18.636 M/sec                  
S0-C2           1           18250179      branch-misses             #    1.37% of all branches        
S0-C3           1           71476.85 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               8076      context-switches          #    0.113 K/sec                  
S0-C3           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              10752      page-faults               #    0.150 K/sec                  
S0-C3           1         1895014789      cycles                    #    0.027 GHz                    
S0-C3           1         2599114704      instructions              #    1.37  insn per cycle         
S0-C3           1         1330427250      branches                  #   18.613 M/sec                  
S0-C3           1           18195050      branch-misses             #    1.37% of all branches        

      71.477713307 seconds time elapsed

================================================================================
perf stat -o 147_vortex.log --per-core -a taskset -c 0-3 ./spec95_147_vortex.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Feb 25 07:58:38 2021


 Performance counter stats for 'system wide':

S0-C0           1          101777.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              12095      context-switches          #    0.119 K/sec                  
S0-C0           1                129      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              11840      page-faults               #    0.116 K/sec                  
S0-C0           1           50718118      cycles                    #    0.000 GHz                    
S0-C0           1         3586314886      instructions              #   70.71  insn per cycle         
S0-C0           1         1560461077      branches                  #   15.332 M/sec                  
S0-C0           1          392526956      branch-misses             #   25.15% of all branches        
S0-C1           1          101777.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               4112      context-switches          #    0.040 K/sec                  
S0-C1           1                 82      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              12064      page-faults               #    0.119 K/sec                  
S0-C1           1         2478859999      cycles                    #    0.024 GHz                    
S0-C1           1         3475162177      instructions              #    1.40  insn per cycle         
S0-C1           1         1545516472      branches                  #   15.185 M/sec                  
S0-C1           1          392761167      branch-misses             #   25.41% of all branches        
S0-C2           1          101777.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               9517      context-switches          #    0.094 K/sec                  
S0-C2           1                 73      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              12024      page-faults               #    0.118 K/sec                  
S0-C2           1         2566580234      cycles                    #    0.025 GHz                    
S0-C2           1         3537419451      instructions              #    1.38  insn per cycle         
S0-C2           1         1554592945      branches                  #   15.274 M/sec                  
S0-C2           1          394874000      branch-misses             #   25.40% of all branches        
S0-C3           1          101777.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              11587      context-switches          #    0.114 K/sec                  
S0-C3           1                 62      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              11889      page-faults               #    0.117 K/sec                  
S0-C3           1         4029884319      cycles                    #    0.040 GHz                    
S0-C3           1         3546481220      instructions              #    0.88  insn per cycle         
S0-C3           1         1553928010      branches                  #   15.268 M/sec                  
S0-C3           1          391931544      branch-misses             #   25.22% of all branches        

     101.778948261 seconds time elapsed

================================================================================
perf stat -o aes_benchmark.log --per-core -a taskset -c 0-3 ./aes_benchmark 4
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
# started on Thu Feb 25 08:00:20 2021


 Performance counter stats for 'system wide':

S0-C0           1            6551.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               1316      context-switches          #    0.201 K/sec                  
S0-C0           1                 14      cpu-migrations            #    0.002 K/sec                  
S0-C0           1                385      page-faults               #    0.059 K/sec                  
S0-C0           1         4118160373      cycles                    #    0.629 GHz                    
S0-C0           1         3445747282      instructions              #    0.84  insn per cycle         
S0-C0           1          179121929      branches                  #   27.340 M/sec                  
S0-C0           1            3227354      branch-misses             #    1.80% of all branches        
S0-C1           1            6551.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                392      context-switches          #    0.060 K/sec                  
S0-C1           1                 16      cpu-migrations            #    0.002 K/sec                  
S0-C1           1                397      page-faults               #    0.061 K/sec                  
S0-C1           1         4116320295      cycles                    #    0.628 GHz                    
S0-C1           1         3454365885      instructions              #    0.84  insn per cycle         
S0-C1           1          179669825      branches                  #   27.423 M/sec                  
S0-C1           1            3152113      branch-misses             #    1.75% of all branches        
S0-C2           1            6551.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                587      context-switches          #    0.090 K/sec                  
S0-C2           1                 16      cpu-migrations            #    0.002 K/sec                  
S0-C2           1                492      page-faults               #    0.075 K/sec                  
S0-C2           1         4123287472      cycles                    #    0.629 GHz                    
S0-C2           1         3453636844      instructions              #    0.84  insn per cycle         
S0-C2           1          180179069      branches                  #   27.501 M/sec                  
S0-C2           1            3243083      branch-misses             #    1.80% of all branches        
S0-C3           1            6551.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                563      context-switches          #    0.086 K/sec                  
S0-C3           1                 28      cpu-migrations            #    0.004 K/sec                  
S0-C3           1                385      page-faults               #    0.059 K/sec                  
S0-C3           1         4101405355      cycles                    #    0.626 GHz                    
S0-C3           1         3444120771      instructions              #    0.84  insn per cycle         
S0-C3           1          178353054      branches                  #   27.222 M/sec                  
S0-C3           1            3008605      branch-misses             #    1.69% of all branches        

       6.552114587 seconds time elapsed

================================================================================
This benchmark has been compiled to use 16 threads. You have to repcompile it if you want to use different number of threads. See ../install/setup.sh for details.
cp: cannot stat 'coremark_benchmark.log': No such file or directory
================================================================================
================================================================================
Printing results
File: 126_gcc.txt
instructions: 13409926845
=(3347476425+3358033542+3355989294+3348427584)
frequencies: 0.527
=(0.538+0.519+0.517+0.534)/4
ipcs:0.87
=1*(0.85+0.89+0.89+0.86)/4

File: run_plot_theilsen.txt
instructions: 5691251284
=(1280788764+1405692327+1590086228+1414683965)
frequencies: 0.071
=(0.093+0.093+0.006+0.093)/4
ipcs:2.15
=1*(0.36+0.40+7.43+0.40)/4

File: 147_vortex.txt
instructions: 14145377734
=(3586314886+3475162177+3537419451+3546481220)
frequencies: 0.022
=(0.000+0.024+0.025+0.040)/4
ipcs:18.59
=1*(70.71+1.40+1.38+0.88)/4

File: 145_fpppp.txt
instructions: 15393099249
=(4032908713+3805856511+3768373502+3785960523)
frequencies: 0.004
=(0.008+0.004+0.001+0.004)/4
ipcs:8.13
=1*(3.25+6.36+16.90+6.03)/4

File: word2vec_perf_output_no_branch_1614238134476553172.txt
instructions: 8182379740
=(1142033380+515613629+3112357222+3412375509)
frequencies: 0.007
=(0.005+0.003+0.008+0.012)/4
ipcs:2.49
=1*(2.07+1.69+3.58+2.62)/4

File: 130_li.txt
instructions: 4199901769
=(1102185606+1019798436+1040139132+1037778595)
frequencies: 0.017
=(0.018+0.016+0.016+0.016)/4
ipcs:0.75
=1*(0.72+0.75+0.77+0.77)/4

File: sqlite_4_threads.txt
instructions: 2868803144
=(722935989+700640675+737541009+707685471)
frequencies: 0.238
=(0.239+0.230+0.252+0.231)/4
ipcs:0.35
=1*(0.35+0.35+0.34+0.36)/4

File: 103_su2cor.txt
instructions: 4610081617
=(207369659+4263094101+17789387+121828470)
frequencies: 0.026
=(0.006+0.031+0.034+0.033)/4
ipcs:0.36
=1*(0.28+1.14+0.00+0.03)/4

File: 107_mgrid.txt
instructions: 1112204152
=(272777292+243671442+272551564+323203854)
frequencies: 0.003
=(0.004+0.002+0.003+0.004)/4
ipcs:0.80
=1*(0.64+0.96+0.84+0.75)/4

File: 101_tomcatv.txt
instructions: 13043612937
=(3280619827+3207023787+3282591082+3273378241)
frequencies: 0.015
=(0.018+0.011+0.018+0.012)/4
ipcs:2.79
=1*(2.23+3.55+2.17+3.23)/4

File: 132_ijpeg.txt
instructions: 6149985041
=(335563634+273341412+3678304492+1862775503)
frequencies: 0.110
=(0.116+0.121+0.062+0.141)/4
ipcs:0.76
=1*(0.11+0.09+2.31+0.52)/4

File: 146_wave5.txt
instructions: 10423467479
=(2645775628+2560482342+2618094805+2599114704)
frequencies: 0.035
=(0.038+0.036+0.038+0.027)/4
ipcs:1.07
=1*(0.97+0.98+0.96+1.37)/4

File: run_plot_svm_nonlinear.txt
instructions: 1692427214
=(409647685+401796466+440193437+440789626)
frequencies: 0.194
=(0.187+0.190+0.202+0.198)/4
ipcs:0.13
=1*(0.13+0.13+0.13+0.14)/4

File: word2vec_perf_output_1614238134469534971.txt
instructions: 11239744239
=(2295309034+3950275038+2735589666+2258570501)
frequencies: 0.031
=(0.034+0.026+0.038+0.025)/4
ipcs:1.02
=1*(0.72+1.61+0.78+0.95)/4

File: aes_benchmark.txt
instructions: 13797870782
=(3445747282+3454365885+3453636844+3444120771)
frequencies: 0.628
=(0.629+0.628+0.629+0.626)/4
ipcs:0.84
=1*(0.84+0.84+0.84+0.84)/4

File: run_forest_importances_faces.txt
instructions: 11043682012
=(2715597532+2811858916+2749997749+2766227815)
frequencies: 0.158
=(0.157+0.160+0.159+0.155)/4
ipcs:0.75
=1*(0.74+0.75+0.74+0.76)/4

File: 102_swim.txt
instructions: 7461862299
=(1880109055+1874386029+1821651703+1885715512)
frequencies: 0.028
=(0.032+0.030+0.024+0.026)/4
ipcs:0.98
=1*(0.84+0.91+1.08+1.07)/4

File: go_word2vec_4_threads.txt
instructions: 12340043697
=(3730718537+3182175885+2314170700+3112978575)
frequencies: 0.053
=(0.058+0.033+0.045+0.077)/4
ipcs:1.56
=1*(1.60+2.37+1.28+1.01)/4

File: 104_hydro2d.txt
instructions: 5937912895
=(1489171885+1489489716+1478336927+1480914367)
frequencies: 0.020
=(0.020+0.019+0.022+0.019)/4
ipcs:0.76
=1*(0.78+0.79+0.69+0.78)/4

File: run_multioutput_face_completion.txt
instructions: 14690457464
=(3702833466+3639470006+3665760488+3682393504)
frequencies: 0.019
=(0.021+0.017+0.019+0.018)/4
ipcs:3.55
=1*(3.22+3.83+3.39+3.74)/4

File: 141_apsi.txt
instructions: 8570978733
=(2253071027+2105332716+2121236908+2091338082)
frequencies: 0.044
=(0.001+0.058+0.060+0.058)/4
ipcs:6.04
=1*(22.67+0.51+0.49+0.50)/4

File: 125_turb3d.txt
instructions: 7720083294
=(1691971238+1928542268+1896794128+2202775660)
frequencies: 0.023
=(0.020+0.024+0.022+0.025)/4
ipcs:0.80
=1*(0.80+0.76+0.80+0.83)/4

File: 134_perl.txt
instructions: 3328728826
=(859618617+827660307+818874071+822575831)
frequencies: 0.031
=(0.030+0.029+0.030+0.035)/4
ipcs:0.81
=1*(0.87+0.85+0.81+0.71)/4

File: 099_go.txt
instructions: 5527150608
=(1351377878+1400104093+1372207397+1403461240)
frequencies: 0.055
=(0.060+0.062+0.061+0.037)/4
ipcs:0.52
=1*(0.44+0.45+0.44+0.74)/4

File: 110_applu.txt
instructions: 2055451345
=(608029969+429092060+487612499+530716817)
frequencies: 0.038
=(0.007+0.048+0.049+0.048)/4
ipcs:0.34
=1*(1.00+0.10+0.12+0.13)/4

File: 129_compress.txt
instructions: 5517280629
=(1684859689+1130982660+1279678333+1421759947)
frequencies: 0.010
=(0.008+0.013+0.002+0.017)/4
ipcs:1.57
=1*(1.19+0.48+4.14+0.46)/4

================================================================================
Finished running benchmarks
================================================================================
