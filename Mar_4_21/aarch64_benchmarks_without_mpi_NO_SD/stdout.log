Architecture:        aarch64
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A35
Stepping:            r0p1
CPU max MHz:         1300.0000
CPU min MHz:         598.0000
BogoMIPS:            26.00
Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
================================================================================
/root/i-benchmarks/word2vec/bin
perf stat -o ../data/word2vec_perf_output_1614899382295411139.txt --per-core -a taskset -c 0-3 ./word2vec -train ../data/text8_1.7mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_1.7mb
Vocab size: 5847
Words in train file: 252418
Alpha: 0.000197  Progress: 100.61%  Words/thread/sec: 10.90k  # started on Thu Mar  4 23:09:42 2021


 Performance counter stats for 'system wide':

S0-C0           1           93185.82 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              36808      context-switches          #    0.395 K/sec                  
S0-C0           1                799      cpu-migrations            #    0.009 K/sec                  
S0-C0           1                232      page-faults               #    0.002 K/sec                  
S0-C0           1          406477288      cycles                    #    0.004 GHz                    
S0-C0           1         2435954192      instructions              #    5.99  insn per cycle         
S0-C0           1         4191209752      branches                  #   44.977 M/sec                  
S0-C0           1           67076206      branch-misses             #    1.60% of all branches        
S0-C1           1           93185.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              20696      context-switches          #    0.222 K/sec                  
S0-C1           1                683      cpu-migrations            #    0.007 K/sec                  
S0-C1           1                 82      page-faults               #    0.001 K/sec                  
S0-C1           1         2579512320      cycles                    #    0.028 GHz                    
S0-C1           1         2222228326      instructions              #    0.86  insn per cycle         
S0-C1           1         4163732427      branches                  #   44.682 M/sec                  
S0-C1           1           60993988      branch-misses             #    1.46% of all branches        
S0-C2           1           93185.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              13751      context-switches          #    0.148 K/sec                  
S0-C2           1                626      cpu-migrations            #    0.007 K/sec                  
S0-C2           1             130178      page-faults               #    0.001 M/sec                  
S0-C2           1         3076750822      cycles                    #    0.033 GHz                    
S0-C2           1           17300661      instructions              #    0.01  insn per cycle         
S0-C2           1           15518205      branches                  #    0.167 M/sec                  
S0-C2           1           67468775      branch-misses             #  434.77% of all branches        
S0-C3           1           93185.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              14580      context-switches          #    0.156 K/sec                  
S0-C3           1                707      cpu-migrations            #    0.008 K/sec                  
S0-C3           1                120      page-faults               #    0.001 K/sec                  
S0-C3           1         2863792283      cycles                    #    0.031 GHz                    
S0-C3           1         2395739115      instructions              #    0.84  insn per cycle         
S0-C3           1         4183938140      branches                  #   44.899 M/sec                  
S0-C3           1           61807707      branch-misses             #    1.48% of all branches        

      93.186075784 seconds time elapsed

perf stat -o ../data/word2vec_perf_output_no_branch_1614899382301361291.txt --per-core -a taskset -c 0-3 ./word2vec_no-guess-branch-probability -train ../data/text8_3.3mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_3.3mb
Vocab size: 9546
Words in train file: 524166
Alpha: 0.000005  Progress: 100.45%  Words/thread/sec: 21.21k  # started on Thu Mar  4 23:11:15 2021


 Performance counter stats for 'system wide':

S0-C0           1          100279.05 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              44661      context-switches          #    0.445 K/sec                  
S0-C0           1               1098      cpu-migrations            #    0.011 K/sec                  
S0-C0           1                 26      page-faults               #    0.000 K/sec                  
S0-C0           1          202991595      cycles                    #    0.002 GHz                    
S0-C0           1         2776465935      instructions              #   13.68  insn per cycle         
S0-C0           1         1309507219      branches                  #   13.059 M/sec                  
S0-C0           1           67113406      branch-misses             #    5.13% of all branches        
S0-C1           1          100279.05 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              15105      context-switches          #    0.151 K/sec                  
S0-C1           1                730      cpu-migrations            #    0.007 K/sec                  
S0-C1           1                 48      page-faults               #    0.000 K/sec                  
S0-C1           1         2614666435      cycles                    #    0.026 GHz                    
S0-C1           1         1420588597      instructions              #    0.54  insn per cycle         
S0-C1           1         1246033513      branches                  #   12.426 M/sec                  
S0-C1           1           56980897      branch-misses             #    4.57% of all branches        
S0-C2           1          100279.05 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              18250      context-switches          #    0.182 K/sec                  
S0-C2           1                913      cpu-migrations            #    0.009 K/sec                  
S0-C2           1             132171      page-faults               #    0.001 M/sec                  
S0-C2           1         3924335656      cycles                    #    0.039 GHz                    
S0-C2           1          859995056      instructions              #    0.22  insn per cycle         
S0-C2           1         1568979129      branches                  #   15.646 M/sec                  
S0-C2           1           66111875      branch-misses             #    4.21% of all branches        
S0-C3           1          100279.05 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              22695      context-switches          #    0.226 K/sec                  
S0-C3           1               1139      cpu-migrations            #    0.011 K/sec                  
S0-C3           1                 76      page-faults               #    0.001 K/sec                  
S0-C3           1         2902806187      cycles                    #    0.029 GHz                    
S0-C3           1         3097813703      instructions              #    1.07  insn per cycle         
S0-C3           1         1334872557      branches                  #   13.312 M/sec                  
S0-C3           1           64494272      branch-misses             #    4.83% of all branches        

     100.280382155 seconds time elapsed

================================================================================
perf stat -o sqlite_4_threads.txt  --per-core -a taskset -c 0-3 ./sqlite_benchmark 4
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index......................  100 - 13000 INSERTs into table with no index......................  100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index......................    0.095s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.096s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.097s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.103s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.147s
 120 - 13000 unordered INSERTS with one index/PK...................    0.148s
 120 - 13000 unordered INSERTS with one index/PK...................    0.152s
 120 - 13000 unordered INSERTS with one index/PK...................    0.154s
 120 - 13000 unordered INSERTS with one index/PK...................    0.209s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.210s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.222s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.219s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.115s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.117s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.117s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.118s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.205s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.205s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.212s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.209s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.327s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.329s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.335s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.329s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.173s
 150 - CREATE INDEX five times.....................................    0.175s
 150 - CREATE INDEX five times.....................................    0.179s
 150 - CREATE INDEX five times.....................................    0.177s
 150 - CREATE INDEX five times.....................................    0.229s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.227s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.235s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.250s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.113s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.113s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.114s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.111s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.109s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.110s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.116s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.110s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.228s
 180 - 13000 INSERTS with three indexes............................    0.230s
 180 - 13000 INSERTS with three indexes............................    0.235s
 180 - 13000 INSERTS with three indexes............................    0.231s
 180 - 13000 INSERTS with three indexes............................    0.252s
 190 - DELETE and REFILL one table.................................    0.258s
 190 - DELETE and REFILL one table.................................    0.257s
 190 - DELETE and REFILL one table.................................    0.269s
 190 - DELETE and REFILL one table.................................    0.261s
 200 - VACUUM......................................................    0.263s
 200 - VACUUM......................................................    0.260s
 200 - VACUUM......................................................    0.267s
 200 - VACUUM......................................................    0.480s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.475s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.484s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.482s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.108s
 240 - 13000 UPDATES of individual rows............................    0.102s
 240 - 13000 UPDATES of individual rows............................    0.100s
 240 - 13000 UPDATES of individual rows............................    0.104s
 240 - 13000 UPDATES of individual rows............................    0.167s
 250 - One big UPDATE of the whole 13000-row table.................    0.165s
 250 - One big UPDATE of the whole 13000-row table.................    0.054s
 260 - Query added column after filling............................    0.164s
 250 - One big UPDATE of the whole 13000-row table.................    0.009s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.054s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.180s
 250 - One big UPDATE of the whole 13000-row table.................    0.054s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.060s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.249s
 280 - 13000 DELETEs of individual rows............................    0.242s
 280 - 13000 DELETEs of individual rows............................    0.250s
 280 - 13000 DELETEs of individual rows............................    0.263s
 280 - 13000 DELETEs of individual rows............................    0.231s
 290 - Refill two 13000-row tables using REPLACE...................    0.235s
 290 - Refill two 13000-row tables using REPLACE...................    0.242s
 290 - Refill two 13000-row tables using REPLACE...................    0.234s
 290 - Refill two 13000-row tables using REPLACE...................    0.653s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.655s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.663s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.651s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.299s
 310 - 2600 four-ways joins........................................    0.294s
 310 - 2600 four-ways joins........................................    0.314s
 310 - 2600 four-ways joins........................................    0.302s
 310 - 2600 four-ways joins........................................    0.509s
 320 - subquery in result set......................................    0.500s
 320 - subquery in result set......................................    0.492s
 320 - subquery in result set......................................    0.529s
 320 - subquery in result set......................................    0.885s
 400 - 26000 REPLACE ops on an IPK.................................    0.891s
 400 - 26000 REPLACE ops on an IPK.................................    0.891s
 400 - 26000 REPLACE ops on an IPK.................................    0.904s
 400 - 26000 REPLACE ops on an IPK.................................    0.324s
 410 - 26000 SELECTS on an IPK.....................................    0.329s
 410 - 26000 SELECTS on an IPK.....................................    0.333s
 410 - 26000 SELECTS on an IPK.....................................    0.337s
 410 - 26000 SELECTS on an IPK.....................................    0.211s
 500 - 26000 REPLACE on TEXT PK....................................    0.211s
 500 - 26000 REPLACE on TEXT PK....................................    0.210s
 500 - 26000 REPLACE on TEXT PK....................................    0.215s
 500 - 26000 REPLACE on TEXT PK....................................    0.333s
 510 - 26000 SELECTS on a TEXT PK..................................    0.335s
 510 - 26000 SELECTS on a TEXT PK..................................    0.335s
 510 - 26000 SELECTS on a TEXT PK..................................    0.341s
 510 - 26000 SELECTS on a TEXT PK..................................    0.338s
 520 - 26000 SELECT DISTINCT.......................................    0.338s
 520 - 26000 SELECT DISTINCT.......................................    0.340s
 520 - 26000 SELECT DISTINCT.......................................    0.363s
 520 - 26000 SELECT DISTINCT.......................................    0.241s
 980 - PRAGMA integrity_check......................................    0.255s
 980 - PRAGMA integrity_check......................................    0.237s
 980 - PRAGMA integrity_check......................................    0.243s
 980 - PRAGMA integrity_check......................................    0.477s
 990 - ANALYZE.....................................................    0.483s
 990 - ANALYZE.....................................................    0.075s
       TOTAL.......................................................    8.129s
   0.078s
       TOTAL.......................................................    8.125s
SUCCESS::system(./speedtest1 --size 130) succeeded
   0.473s
 990 - ANALYZE..................................................... SUCCESS::system(./speedtest1 --size 130) succeeded
   0.468s
 990 - ANALYZE.....................................................    0.074s
       TOTAL.......................................................    8.220s
SUCCESS::system(./speedtest1 --size 130) succeeded
   0.075s
       TOTAL.......................................................    8.295s
SUCCESS::system(./speedtest1 --size 130) succeeded
# started on Thu Mar  4 23:12:55 2021


 Performance counter stats for 'system wide':

S0-C0           1            8357.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               4939      context-switches          #    0.591 K/sec                  
S0-C0           1                185      cpu-migrations            #    0.022 K/sec                  
S0-C0           1               1855      page-faults               #    0.222 K/sec                  
S0-C0           1         2262983407      cycles                    #    0.271 GHz                    
S0-C0           1          724159189      instructions              #    0.32  insn per cycle         
S0-C0           1          624584239      branches                  #   74.732 M/sec                  
S0-C0           1           91315656      branch-misses             #   14.62% of all branches        
S0-C1           1            8357.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               2317      context-switches          #    0.277 K/sec                  
S0-C1           1                200      cpu-migrations            #    0.024 K/sec                  
S0-C1           1               1862      page-faults               #    0.223 K/sec                  
S0-C1           1         2057733037      cycles                    #    0.246 GHz                    
S0-C1           1          703639174      instructions              #    0.34  insn per cycle         
S0-C1           1          621983924      branches                  #   74.421 M/sec                  
S0-C1           1           90472637      branch-misses             #   14.55% of all branches        
S0-C2           1            8357.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               4313      context-switches          #    0.516 K/sec                  
S0-C2           1                228      cpu-migrations            #    0.027 K/sec                  
S0-C2           1               1960      page-faults               #    0.235 K/sec                  
S0-C2           1         2084750136      cycles                    #    0.249 GHz                    
S0-C2           1          715495788      instructions              #    0.34  insn per cycle         
S0-C2           1          623558522      branches                  #   74.609 M/sec                  
S0-C2           1           90219415      branch-misses             #   14.47% of all branches        
S0-C3           1            8357.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               7176      context-switches          #    0.859 K/sec                  
S0-C3           1                175      cpu-migrations            #    0.021 K/sec                  
S0-C3           1               1795      page-faults               #    0.215 K/sec                  
S0-C3           1         2174888292      cycles                    #    0.260 GHz                    
S0-C3           1          727903442      instructions              #    0.33  insn per cycle         
S0-C3           1          625137984      branches                  #   74.798 M/sec                  
S0-C3           1           91848790      branch-misses             #   14.69% of all branches        

       8.358041432 seconds time elapsed

================================================================================
perf stat -o go_word2vec_4_threads.txt  --per-core -a taskset -c 0-3 ./go_word2vec.sh 4
/root/i-benchmarks/golang/bin
Save trained vectors to example/word_vectors_sg.txt
# started on Thu Mar  4 23:13:04 2021


 Performance counter stats for 'system wide':

S0-C0           1           37363.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              14861      context-switches          #    0.398 K/sec                  
S0-C0           1                158      cpu-migrations            #    0.004 K/sec                  
S0-C0           1               1906      page-faults               #    0.051 K/sec                  
S0-C0           1         3106494993      cycles                    #    0.083 GHz                    
S0-C0           1         3605179244      instructions              #    1.16  insn per cycle         
S0-C0           1         1912911671      branches                  #   51.198 M/sec                  
S0-C0           1           40511243      branch-misses             #    2.12% of all branches        
S0-C1           1           37363.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              10138      context-switches          #    0.271 K/sec                  
S0-C1           1                129      cpu-migrations            #    0.003 K/sec                  
S0-C1           1               1504      page-faults               #    0.040 K/sec                  
S0-C1           1         2427184686      cycles                    #    0.065 GHz                    
S0-C1           1         3365078368      instructions              #    1.39  insn per cycle         
S0-C1           1         1895960993      branches                  #   50.744 M/sec                  
S0-C1           1           38020691      branch-misses             #    2.01% of all branches        
S0-C2           1           37363.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               8313      context-switches          #    0.222 K/sec                  
S0-C2           1                113      cpu-migrations            #    0.003 K/sec                  
S0-C2           1              21732      page-faults               #    0.582 K/sec                  
S0-C2           1         3062343355      cycles                    #    0.082 GHz                    
S0-C2           1         1549956476      instructions              #    0.51  insn per cycle         
S0-C2           1         2493088668      branches                  #   66.726 M/sec                  
S0-C2           1           87763346      branch-misses             #    3.52% of all branches        
S0-C3           1           37363.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               9247      context-switches          #    0.247 K/sec                  
S0-C3           1                137      cpu-migrations            #    0.004 K/sec                  
S0-C3           1               9069      page-faults               #    0.243 K/sec                  
S0-C3           1         3175682929      cycles                    #    0.085 GHz                    
S0-C3           1         3833448012      instructions              #    1.21  insn per cycle         
S0-C3           1         1931832983      branches                  #   51.704 M/sec                  
S0-C3           1           34990931      branch-misses             #    1.81% of all branches        

      37.363796495 seconds time elapsed

================================================================================
================================================================================
Running run_forest_importances_faces test
perf stat -o ../output/run_forest_importances_faces.log --per-core -a taskset -c 0-3 ./run_forest_importances_faces.sh -n 4

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.


=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.


=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.


=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Fitting ExtraTreesClassifier on faces data with 1 cores...
Fitting ExtraTreesClassifier on faces data with 1 cores...
Fitting ExtraTreesClassifier on faces data with 1 cores...
Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.485s
done in 12.522s
done in 12.626s
done in 12.911s
/root/i-benchmarks/scikit/bin
# started on Thu Mar  4 23:13:41 2021


 Performance counter stats for 'system wide':

S0-C0           1           24136.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               8172      context-switches          #    0.339 K/sec                  
S0-C0           1                112      cpu-migrations            #    0.005 K/sec                  
S0-C0           1              41884      page-faults               #    0.002 M/sec                  
S0-C0           1          643173401      cycles                    #    0.027 GHz                    
S0-C0           1         2778528757      instructions              #    4.32  insn per cycle         
S0-C0           1          785592016      branches                  #   32.548 M/sec                  
S0-C0           1          196646861      branch-misses             #   25.03% of all branches        
S0-C1           1           24136.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               4060      context-switches          #    0.168 K/sec                  
S0-C1           1                143      cpu-migrations            #    0.006 K/sec                  
S0-C1           1              43167      page-faults               #    0.002 M/sec                  
S0-C1           1         4237577282      cycles                    #    0.176 GHz                    
S0-C1           1         2767359547      instructions              #    0.65  insn per cycle         
S0-C1           1          783898582      branches                  #   32.478 M/sec                  
S0-C1           1          195038484      branch-misses             #   24.88% of all branches        
S0-C2           1           24136.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               4950      context-switches          #    0.205 K/sec                  
S0-C2           1                148      cpu-migrations            #    0.006 K/sec                  
S0-C2           1              41580      page-faults               #    0.002 M/sec                  
S0-C2           1         4121241475      cycles                    #    0.171 GHz                    
S0-C2           1         2801406595      instructions              #    0.68  insn per cycle         
S0-C2           1          788531640      branches                  #   32.670 M/sec                  
S0-C2           1          195441732      branch-misses             #   24.79% of all branches        
S0-C3           1           24136.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               5181      context-switches          #    0.215 K/sec                  
S0-C3           1                139      cpu-migrations            #    0.006 K/sec                  
S0-C3           1              41474      page-faults               #    0.002 M/sec                  
S0-C3           1         4153036471      cycles                    #    0.172 GHz                    
S0-C3           1         2790915288      instructions              #    0.67  insn per cycle         
S0-C3           1          787466975      branches                  #   32.626 M/sec                  
S0-C3           1          195557870      branch-misses             #   24.83% of all branches        

      24.136814967 seconds time elapsed

================================================================================
Running run_multioutput_face_completion test
perf stat -o ../output/run_multioutput_face_completion.log --per-core -a taskset -c 0-3 ./run_multioutput_face_completion.sh -n 4

==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.


/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/root/i-benchmarks/scikit/bin
# started on Thu Mar  4 23:14:06 2021


 Performance counter stats for 'system wide':

S0-C0           1           52460.04 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              30472      context-switches          #    0.581 K/sec                  
S0-C0           1                193      cpu-migrations            #    0.004 K/sec                  
S0-C0           1             125286      page-faults               #    0.002 M/sec                  
S0-C0           1         2607177559      cycles                    #    0.050 GHz                    
S0-C0           1         3165284556      instructions              #    1.21  insn per cycle         
S0-C0           1         1548740840      branches                  #   29.522 M/sec                  
S0-C0           1          138023076      branch-misses             #    8.91% of all branches        
S0-C1           1           52460.04 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               8381      context-switches          #    0.160 K/sec                  
S0-C1           1                188      cpu-migrations            #    0.004 K/sec                  
S0-C1           1             112472      page-faults               #    0.002 M/sec                  
S0-C1           1         3743552280      cycles                    #    0.071 GHz                    
S0-C1           1          124027228      instructions              #    0.03  insn per cycle         
S0-C1           1         1578086607      branches                  #   30.082 M/sec                  
S0-C1           1          135812112      branch-misses             #    8.61% of all branches        
S0-C2           1           52460.04 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               5972      context-switches          #    0.114 K/sec                  
S0-C2           1                161      cpu-migrations            #    0.003 K/sec                  
S0-C2           1             124545      page-faults               #    0.002 M/sec                  
S0-C2           1         2588741351      cycles                    #    0.049 GHz                    
S0-C2           1         3590343072      instructions              #    1.39  insn per cycle         
S0-C2           1         1537969221      branches                  #   29.317 M/sec                  
S0-C2           1          134622970      branch-misses             #    8.75% of all branches        
S0-C3           1           52460.04 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               4011      context-switches          #    0.076 K/sec                  
S0-C3           1                184      cpu-migrations            #    0.004 K/sec                  
S0-C3           1             126989      page-faults               #    0.002 M/sec                  
S0-C3           1         2757604169      cycles                    #    0.053 GHz                    
S0-C3           1         3721497680      instructions              #    1.35  insn per cycle         
S0-C3           1         1589102871      branches                  #   30.292 M/sec                  
S0-C3           1          135544948      branch-misses             #    8.53% of all branches        

      52.460576655 seconds time elapsed

================================================================================
Running run_logistic_path test
perf stat -o ../output/run_logistic_path.log --per-core -a taskset -c 0-3 ./run_logistic_path.sh -n 4

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.



==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.




/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Computing regularization path ...
Computing regularization path ...
Computing regularization path ...
Computing regularization path ...
This took 33.387s
This took 33.485s
This took 33.654s
This took 33.844s
/root/i-benchmarks/scikit/bin
# started on Thu Mar  4 23:14:58 2021


 Performance counter stats for 'system wide':

S0-C0           1           42718.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              16175      context-switches          #    0.379 K/sec                  
S0-C0           1                157      cpu-migrations            #    0.004 K/sec                  
S0-C0           1              25985      page-faults               #    0.608 K/sec                  
S0-C0           1         3699572344      cycles                    #    0.087 GHz                    
S0-C0           1           64024008      instructions              #    0.02  insn per cycle         
S0-C0           1         2652906481      branches                  #   62.101 M/sec                  
S0-C0           1          494307345      branch-misses             #   18.63% of all branches        
S0-C1           1           42718.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               5310      context-switches          #    0.124 K/sec                  
S0-C1           1                152      cpu-migrations            #    0.004 K/sec                  
S0-C1           1              26430      page-faults               #    0.619 K/sec                  
S0-C1           1         3268358329      cycles                    #    0.077 GHz                    
S0-C1           1          291318448      instructions              #    0.09  insn per cycle         
S0-C1           1         2676557935      branches                  #   62.655 M/sec                  
S0-C1           1          447710918      branch-misses             #   16.73% of all branches        
S0-C2           1           42718.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6185      context-switches          #    0.145 K/sec                  
S0-C2           1                112      cpu-migrations            #    0.003 K/sec                  
S0-C2           1              27459      page-faults               #    0.643 K/sec                  
S0-C2           1         3261597466      cycles                    #    0.076 GHz                    
S0-C2           1          284817938      instructions              #    0.09  insn per cycle         
S0-C2           1         2674470673      branches                  #   62.606 M/sec                  
S0-C2           1          496600567      branch-misses             #   18.57% of all branches        
S0-C3           1           42718.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               3556      context-switches          #    0.083 K/sec                  
S0-C3           1                111      cpu-migrations            #    0.003 K/sec                  
S0-C3           1              27810      page-faults               #    0.651 K/sec                  
S0-C3           1         3823050409      cycles                    #    0.089 GHz                    
S0-C3           1          512606794      instructions              #    0.13  insn per cycle         
S0-C3           1         2696379719      branches                  #   63.119 M/sec                  
S0-C3           1          500465610      branch-misses             #   18.56% of all branches        

      42.719338045 seconds time elapsed

================================================================================
Running run_plot_svm_nonlinear test
perf stat -o ../output/run_plot_svm_nonlinear.log --per-core -a taskset -c 0-3 ./run_plot_svm_nonlinear.sh -n 4

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.



==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/root/i-benchmarks/scikit/bin
# started on Thu Mar  4 23:15:41 2021


 Performance counter stats for 'system wide':

S0-C0           1           16197.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               5028      context-switches          #    0.310 K/sec                  
S0-C0           1                106      cpu-migrations            #    0.007 K/sec                  
S0-C0           1              30446      page-faults               #    0.002 M/sec                  
S0-C0           1         3599706931      cycles                    #    0.222 GHz                    
S0-C0           1          391707749      instructions              #    0.11  insn per cycle         
S0-C0           1          940236094      branches                  #   58.050 M/sec                  
S0-C0           1           90065473      branch-misses             #    9.58% of all branches        
S0-C1           1           16197.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               1827      context-switches          #    0.113 K/sec                  
S0-C1           1                 91      cpu-migrations            #    0.006 K/sec                  
S0-C1           1              30928      page-faults               #    0.002 M/sec                  
S0-C1           1         3505870309      cycles                    #    0.216 GHz                    
S0-C1           1          439722452      instructions              #    0.13  insn per cycle         
S0-C1           1          947014612      branches                  #   58.468 M/sec                  
S0-C1           1           90534858      branch-misses             #    9.56% of all branches        
S0-C2           1           16197.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               3192      context-switches          #    0.197 K/sec                  
S0-C2           1                 94      cpu-migrations            #    0.006 K/sec                  
S0-C2           1              30765      page-faults               #    0.002 M/sec                  
S0-C2           1         3707385315      cycles                    #    0.229 GHz                    
S0-C2           1          470542124      instructions              #    0.13  insn per cycle         
S0-C2           1          951430597      branches                  #   58.741 M/sec                  
S0-C2           1           90375138      branch-misses             #    9.50% of all branches        
S0-C3           1           16197.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               1392      context-switches          #    0.086 K/sec                  
S0-C3           1                 96      cpu-migrations            #    0.006 K/sec                  
S0-C3           1              32238      page-faults               #    0.002 M/sec                  
S0-C3           1         3515317376      cycles                    #    0.217 GHz                    
S0-C3           1          459949113      instructions              #    0.13  insn per cycle         
S0-C3           1          949889439      branches                  #   58.646 M/sec                  
S0-C3           1           90094247      branch-misses             #    9.48% of all branches        

      16.197472996 seconds time elapsed

================================================================================
Running run_plot_theilsen test
perf stat -o ../output/run_plot_theilsen.log --per-core -a taskset -c 0-3 ./run_plot_theilsen.sh -n 4
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
/usr/lib/python3/dist-packages/sklearn/externals/joblib.py:1: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp

====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.

/root/i-benchmarks/scikit/bin
# started on Thu Mar  4 23:15:57 2021


 Performance counter stats for 'system wide':

S0-C0           1           37812.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              10216      context-switches          #    0.270 K/sec                  
S0-C0           1                116      cpu-migrations            #    0.003 K/sec                  
S0-C0           1              44481      page-faults               #    0.001 M/sec                  
S0-C0           1          634420871      cycles                    #    0.017 GHz                    
S0-C0           1         1131563982      instructions              #    1.78  insn per cycle         
S0-C0           1         1145236236      branches                  #   30.287 M/sec                  
S0-C0           1          338653354      branch-misses             #   29.57% of all branches        
S0-C1           1           37812.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               4039      context-switches          #    0.107 K/sec                  
S0-C1           1                141      cpu-migrations            #    0.004 K/sec                  
S0-C1           1              46079      page-faults               #    0.001 M/sec                  
S0-C1           1          541040321      cycles                    #    0.014 GHz                    
S0-C1           1         1378741570      instructions              #    2.55  insn per cycle         
S0-C1           1         1177882607      branches                  #   31.150 M/sec                  
S0-C1           1          341573182      branch-misses             #   29.00% of all branches        
S0-C2           1           37812.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6717      context-switches          #    0.178 K/sec                  
S0-C2           1                 97      cpu-migrations            #    0.003 K/sec                  
S0-C2           1              46601      page-faults               #    0.001 M/sec                  
S0-C2           1          572681410      cycles                    #    0.015 GHz                    
S0-C2           1         1397730933      instructions              #    2.44  insn per cycle         
S0-C2           1         1179883075      branches                  #   31.203 M/sec                  
S0-C2           1          345966801      branch-misses             #   29.32% of all branches        
S0-C3           1           37812.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               2052      context-switches          #    0.054 K/sec                  
S0-C3           1                 89      cpu-migrations            #    0.002 K/sec                  
S0-C3           1              50935      page-faults               #    0.001 M/sec                  
S0-C3           1         1867263730      cycles                    #    0.049 GHz                    
S0-C3           1         1771489381      instructions              #    0.95  insn per cycle         
S0-C3           1         1228620437      branches                  #   32.492 M/sec                  
S0-C3           1          352023097      branch-misses             #   28.65% of all branches        

      37.813297128 seconds time elapsed

================================================================================
================================================================================
perf stat -o 099_go.log --per-core -a taskset -c 0-3 ./spec95_099_go.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:16:35 2021


 Performance counter stats for 'system wide':

S0-C0           1           52233.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              12868      context-switches          #    0.246 K/sec                  
S0-C0           1                 52      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                257      page-faults               #    0.005 K/sec                  
S0-C0           1         1725652946      cycles                    #    0.033 GHz                    
S0-C0           1          638215266      instructions              #    0.37  insn per cycle         
S0-C0           1         2563923987      branches                  #   49.086 M/sec                  
S0-C0           1         1052670637      branch-misses             #   41.06% of all branches        
S0-C1           1           52233.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               7997      context-switches          #    0.153 K/sec                  
S0-C1           1                 42      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                668      page-faults               #    0.013 K/sec                  
S0-C1           1          569704339      cycles                    #    0.011 GHz                    
S0-C1           1         1396007014      instructions              #    2.45  insn per cycle         
S0-C1           1         2637475352      branches                  #   50.494 M/sec                  
S0-C1           1         1082709256      branch-misses             #   41.05% of all branches        
S0-C2           1           52233.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               2621      context-switches          #    0.050 K/sec                  
S0-C2           1                 45      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                646      page-faults               #    0.012 K/sec                  
S0-C2           1         2965504983      cycles                    #    0.057 GHz                    
S0-C2           1         1345544807      instructions              #    0.45  insn per cycle         
S0-C2           1         2630845548      branches                  #   50.367 M/sec                  
S0-C2           1         1080602272      branch-misses             #   41.07% of all branches        
S0-C3           1           52233.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               2208      context-switches          #    0.042 K/sec                  
S0-C3           1                 50      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                548      page-faults               #    0.010 K/sec                  
S0-C3           1          394792192      cycles                    #    0.008 GHz                    
S0-C3           1         2145207747      instructions              #    5.43  insn per cycle         
S0-C3           1         2710025496      branches                  #   51.883 M/sec                  
S0-C3           1         1112352311      branch-misses             #   41.05% of all branches        

      52.234131804 seconds time elapsed

================================================================================
perf stat -o 101_tomcatv.log --per-core -a taskset -c 0-3 ./spec95_101_tomcatv.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:17:27 2021


 Performance counter stats for 'system wide':

S0-C0           1           78580.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              25605      context-switches          #    0.326 K/sec                  
S0-C0           1                110      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               3780      page-faults               #    0.048 K/sec                  
S0-C0           1          788950138      cycles                    #    0.010 GHz                    
S0-C0           1         3479036891      instructions              #    4.41  insn per cycle         
S0-C0           1          882524736      branches                  #   11.231 M/sec                  
S0-C0           1           38024039      branch-misses             #    4.31% of all branches        
S0-C1           1           78580.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              11262      context-switches          #    0.143 K/sec                  
S0-C1           1                 79      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               4507      page-faults               #    0.057 K/sec                  
S0-C1           1         2226795512      cycles                    #    0.028 GHz                    
S0-C1           1         3284661387      instructions              #    1.48  insn per cycle         
S0-C1           1          857951714      branches                  #   10.918 M/sec                  
S0-C1           1           33148446      branch-misses             #    3.86% of all branches        
S0-C2           1           78580.65 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               5692      context-switches          #    0.072 K/sec                  
S0-C2           1                 63      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               4025      page-faults               #    0.051 K/sec                  
S0-C2           1         2171771937      cycles                    #    0.028 GHz                    
S0-C2           1         3241481364      instructions              #    1.49  insn per cycle         
S0-C2           1          851141472      branches                  #   10.831 M/sec                  
S0-C2           1           31809743      branch-misses             #    3.74% of all branches        
S0-C3           1           78580.65 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               4303      context-switches          #    0.055 K/sec                  
S0-C3           1                 65      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               4167      page-faults               #    0.053 K/sec                  
S0-C3           1         2927335700      cycles                    #    0.037 GHz                    
S0-C3           1         3286618815      instructions              #    1.12  insn per cycle         
S0-C3           1          854959063      branches                  #   10.880 M/sec                  
S0-C3           1           32022159      branch-misses             #    3.75% of all branches        

      78.581072807 seconds time elapsed

================================================================================
perf stat -o 102_swim.log --per-core -a taskset -c 0-3 ./spec95_102_swim.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:18:46 2021


 Performance counter stats for 'system wide':

S0-C0           1           68264.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              34156      context-switches          #    0.500 K/sec                  
S0-C0           1                100      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               3769      page-faults               #    0.055 K/sec                  
S0-C0           1         2808104807      cycles                    #    0.041 GHz                    
S0-C0           1         2121056833      instructions              #    0.76  insn per cycle         
S0-C0           1          228284490      branches                  #    3.344 M/sec                  
S0-C0           1           13579392      branch-misses             #    5.95% of all branches        
S0-C1           1           68264.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               4045      context-switches          #    0.059 K/sec                  
S0-C1           1                 27      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               3948      page-faults               #    0.058 K/sec                  
S0-C1           1          593558072      cycles                    #    0.009 GHz                    
S0-C1           1         1828154925      instructions              #    3.08  insn per cycle         
S0-C1           1          188388025      branches                  #    2.760 M/sec                  
S0-C1           1            4585338      branch-misses             #    2.43% of all branches        
S0-C2           1           68264.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               4509      context-switches          #    0.066 K/sec                  
S0-C2           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C2           1               3924      page-faults               #    0.057 K/sec                  
S0-C2           1          331513456      cycles                    #    0.005 GHz                    
S0-C2           1         1837041559      instructions              #    5.54  insn per cycle         
S0-C2           1          189960395      branches                  #    2.783 M/sec                  
S0-C2           1            4933379      branch-misses             #    2.60% of all branches        
S0-C3           1           68264.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               4511      context-switches          #    0.066 K/sec                  
S0-C3           1                 91      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               3963      page-faults               #    0.058 K/sec                  
S0-C3           1          370336260      cycles                    #    0.005 GHz                    
S0-C3           1         1794300836      instructions              #    4.85  insn per cycle         
S0-C3           1          187045422      branches                  #    2.740 M/sec                  
S0-C3           1            4544849      branch-misses             #    2.43% of all branches        

      68.264806157 seconds time elapsed

================================================================================
perf stat -o 103_su2cor.log --per-core -a taskset -c 0-3 ./spec95_103_su2cor.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:19:54 2021


 Performance counter stats for 'system wide':

S0-C0           1          116192.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              38185      context-switches          #    0.329 K/sec                  
S0-C0           1                108      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               6116      page-faults               #    0.053 K/sec                  
S0-C0           1           23995813      cycles                    #    0.000 GHz                    
S0-C0           1          219269921      instructions              #    9.14  insn per cycle         
S0-C0           1         1233436806      branches                  #   10.615 M/sec                  
S0-C0           1          116740447      branch-misses             #    9.46% of all branches        
S0-C1           1          116192.59 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               6302      context-switches          #    0.054 K/sec                  
S0-C1           1                 46      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               6322      page-faults               #    0.054 K/sec                  
S0-C1           1         2416684646      cycles                    #    0.021 GHz                    
S0-C1           1         4266539598      instructions              #    1.77  insn per cycle         
S0-C1           1         1201201007      branches                  #   10.338 M/sec                  
S0-C1           1          108986093      branch-misses             #    9.07% of all branches        
S0-C2           1          116192.59 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               7711      context-switches          #    0.066 K/sec                  
S0-C2           1                 65      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               6238      page-faults               #    0.054 K/sec                  
S0-C2           1         2601537950      cycles                    #    0.022 GHz                    
S0-C2           1           42368244      instructions              #    0.02  insn per cycle         
S0-C2           1         1209419285      branches                  #   10.409 M/sec                  
S0-C2           1          110026972      branch-misses             #    9.10% of all branches        
S0-C3           1          116192.59 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               6029      context-switches          #    0.052 K/sec                  
S0-C3           1                 62      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               6194      page-faults               #    0.053 K/sec                  
S0-C3           1         2467926217      cycles                    #    0.021 GHz                    
S0-C3           1         4271286548      instructions              #    1.73  insn per cycle         
S0-C3           1         1201422589      branches                  #   10.340 M/sec                  
S0-C3           1          108647035      branch-misses             #    9.04% of all branches        

     116.193001368 seconds time elapsed

================================================================================
perf stat -o 104_hydro2d.log --per-core -a taskset -c 0-3 ./spec95_104_hydro2d.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:21:51 2021


 Performance counter stats for 'system wide':

S0-C0           1           94199.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              27877      context-switches          #    0.296 K/sec                  
S0-C0           1                 92      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               2425      page-faults               #    0.026 K/sec                  
S0-C0           1         1224924497      cycles                    #    0.013 GHz                    
S0-C0           1         1332615991      instructions              #    1.09  insn per cycle         
S0-C0           1         2614697118      branches                  #   27.757 M/sec                  
S0-C0           1           26442522      branch-misses             #    1.01% of all branches        
S0-C1           1           94199.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               6062      context-switches          #    0.064 K/sec                  
S0-C1           1                 50      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               2461      page-faults               #    0.026 K/sec                  
S0-C1           1            2642864      cycles                    #    0.000 GHz                    
S0-C1           1         1457311961      instructions              #  551.41  insn per cycle         
S0-C1           1         2616053401      branches                  #   27.771 M/sec                  
S0-C1           1           21221582      branch-misses             #    0.81% of all branches        
S0-C2           1           94199.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               6913      context-switches          #    0.073 K/sec                  
S0-C2           1                 72      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               2444      page-faults               #    0.026 K/sec                  
S0-C2           1         4264207066      cycles                    #    0.045 GHz                    
S0-C2           1         1448295532      instructions              #    0.34  insn per cycle         
S0-C2           1         2614736344      branches                  #   27.757 M/sec                  
S0-C2           1           21057687      branch-misses             #    0.81% of all branches        
S0-C3           1           94199.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               4849      context-switches          #    0.051 K/sec                  
S0-C3           1                 60      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               2501      page-faults               #    0.027 K/sec                  
S0-C3           1          895025203      cycles                    #    0.010 GHz                    
S0-C3           1         1763280430      instructions              #    1.97  insn per cycle         
S0-C3           1         2641185195      branches                  #   28.038 M/sec                  
S0-C3           1           21495360      branch-misses             #    0.81% of all branches        

      94.200023126 seconds time elapsed

================================================================================
perf stat -o 107_mgrid.log --per-core -a taskset -c 0-3 ./spec95_107_mgrid.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:23:25 2021


 Performance counter stats for 'system wide':

S0-C0           1           90818.76 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              36584      context-switches          #    0.403 K/sec                  
S0-C0           1                 54      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               1946      page-faults               #    0.021 K/sec                  
S0-C0           1         2032010994      cycles                    #    0.022 GHz                    
S0-C0           1          494318972      instructions              #    0.24  insn per cycle         
S0-C0           1          755724948      branches                  #    8.321 M/sec                  
S0-C0           1           45366100      branch-misses             #    6.00% of all branches        
S0-C1           1           90818.87 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               6359      context-switches          #    0.070 K/sec                  
S0-C1           1                 39      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               2126      page-faults               #    0.023 K/sec                  
S0-C1           1         3888562081      cycles                    #    0.043 GHz                    
S0-C1           1          228717479      instructions              #    0.06  insn per cycle         
S0-C1           1          718912052      branches                  #    7.916 M/sec                  
S0-C1           1           36809724      branch-misses             #    5.12% of all branches        
S0-C2           1           90818.87 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              10864      context-switches          #    0.120 K/sec                  
S0-C2           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C2           1               2218      page-faults               #    0.024 K/sec                  
S0-C2           1         4243816055      cycles                    #    0.047 GHz                    
S0-C2           1          291258975      instructions              #    0.07  insn per cycle         
S0-C2           1          725421160      branches                  #    7.988 M/sec                  
S0-C2           1           38371238      branch-misses             #    5.29% of all branches        
S0-C3           1           90818.87 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               2743      context-switches          #    0.030 K/sec                  
S0-C3           1                 28      cpu-migrations            #    0.000 K/sec                  
S0-C3           1               2309      page-faults               #    0.025 K/sec                  
S0-C3           1         3865412003      cycles                    #    0.043 GHz                    
S0-C3           1          174195082      instructions              #    0.05  insn per cycle         
S0-C3           1          712495754      branches                  #    7.845 M/sec                  
S0-C3           1           35323914      branch-misses             #    4.96% of all branches        

      90.819252550 seconds time elapsed

================================================================================
perf stat -o 110_applu.log --per-core -a taskset -c 0-3 ./spec95_110_applu.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:24:56 2021


 Performance counter stats for 'system wide':

S0-C0           1           79936.77 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              21113      context-switches          #    0.264 K/sec                  
S0-C0           1                 65      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               7627      page-faults               #    0.095 K/sec                  
S0-C0           1          799317433      cycles                    #    0.010 GHz                    
S0-C0           1          556691482      instructions              #    0.70  insn per cycle         
S0-C0           1          367543710      branches                  #    4.598 M/sec                  
S0-C0           1           23419256      branch-misses             #    6.37% of all branches        
S0-C1           1           79936.77 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               5538      context-switches          #    0.069 K/sec                  
S0-C1           1                 38      cpu-migrations            #    0.000 K/sec                  
S0-C1           1               7693      page-faults               #    0.096 K/sec                  
S0-C1           1          714360731      cycles                    #    0.009 GHz                    
S0-C1           1          449223559      instructions              #    0.63  insn per cycle         
S0-C1           1          350944730      branches                  #    4.390 M/sec                  
S0-C1           1           19671288      branch-misses             #    5.61% of all branches        
S0-C2           1           79936.77 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               8186      context-switches          #    0.102 K/sec                  
S0-C2           1                 57      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               7642      page-faults               #    0.096 K/sec                  
S0-C2           1          795168336      cycles                    #    0.010 GHz                    
S0-C2           1          535058463      instructions              #    0.67  insn per cycle         
S0-C2           1          358076766      branches                  #    4.480 M/sec                  
S0-C2           1           20920704      branch-misses             #    5.84% of all branches        
S0-C3           1           79936.77 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               5188      context-switches          #    0.065 K/sec                  
S0-C3           1                 63      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               7692      page-faults               #    0.096 K/sec                  
S0-C3           1          702274458      cycles                    #    0.009 GHz                    
S0-C3           1          448723954      instructions              #    0.64  insn per cycle         
S0-C3           1          350498136      branches                  #    4.385 M/sec                  
S0-C3           1           19692598      branch-misses             #    5.62% of all branches        

      79.937130706 seconds time elapsed

================================================================================
perf stat -o 125_turb3d.log --per-core -a taskset -c 0-3 ./spec95_125_turb3d.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:26:16 2021


 Performance counter stats for 'system wide':

S0-C0           1           95274.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              25224      context-switches          #    0.265 K/sec                  
S0-C0           1                 80      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               6741      page-faults               #    0.071 K/sec                  
S0-C0           1         3463164402      cycles                    #    0.036 GHz                    
S0-C0           1         1992479954      instructions              #    0.58  insn per cycle         
S0-C0           1         3590458630      branches                  #   37.686 M/sec                  
S0-C0           1          291496145      branch-misses             #    8.12% of all branches        
S0-C1           1           95274.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               6763      context-switches          #    0.071 K/sec                  
S0-C1           1                 61      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               6471      page-faults               #    0.068 K/sec                  
S0-C1           1         1772684042      cycles                    #    0.019 GHz                    
S0-C1           1         1865231791      instructions              #    1.05  insn per cycle         
S0-C1           1         3570223086      branches                  #   37.473 M/sec                  
S0-C1           1          286029986      branch-misses             #    8.01% of all branches        
S0-C2           1           95274.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              10267      context-switches          #    0.108 K/sec                  
S0-C2           1                 55      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               6628      page-faults               #    0.070 K/sec                  
S0-C2           1         2307780648      cycles                    #    0.024 GHz                    
S0-C2           1         1932171551      instructions              #    0.84  insn per cycle         
S0-C2           1         3575104792      branches                  #   37.524 M/sec                  
S0-C2           1          290921298      branch-misses             #    8.14% of all branches        
S0-C3           1           95274.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               5208      context-switches          #    0.055 K/sec                  
S0-C3           1                 27      cpu-migrations            #    0.000 K/sec                  
S0-C3           1               6690      page-faults               #    0.070 K/sec                  
S0-C3           1         2206356916      cycles                    #    0.023 GHz                    
S0-C3           1         1878927089      instructions              #    0.85  insn per cycle         
S0-C3           1         3571109041      branches                  #   37.482 M/sec                  
S0-C3           1          289652466      branch-misses             #    8.11% of all branches        

      95.274495592 seconds time elapsed

================================================================================
perf stat -o 126_gcc.log --per-core -a taskset -c 0-3 ./spec95_126_gcc.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:27:51 2021


 Performance counter stats for 'system wide':

S0-C0           1            6646.53 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               2163      context-switches          #    0.325 K/sec                  
S0-C0           1                 33      cpu-migrations            #    0.005 K/sec                  
S0-C0           1               4634      page-faults               #    0.697 K/sec                  
S0-C0           1         4273921043      cycles                    #    0.643 GHz                    
S0-C0           1         3354117870      instructions              #    0.78  insn per cycle         
S0-C0           1          459513780      branches                  #   69.136 M/sec                  
S0-C0           1          118031454      branch-misses             #   25.69% of all branches        
S0-C1           1            6646.53 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                974      context-switches          #    0.147 K/sec                  
S0-C1           1                 27      cpu-migrations            #    0.004 K/sec                  
S0-C1           1               4380      page-faults               #    0.659 K/sec                  
S0-C1           1         4009060963      cycles                    #    0.603 GHz                    
S0-C1           1         3357085253      instructions              #    0.84  insn per cycle         
S0-C1           1          459593661      branches                  #   69.148 M/sec                  
S0-C1           1          117538101      branch-misses             #   25.57% of all branches        
S0-C2           1            6646.53 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                782      context-switches          #    0.118 K/sec                  
S0-C2           1                 18      cpu-migrations            #    0.003 K/sec                  
S0-C2           1               4722      page-faults               #    0.710 K/sec                  
S0-C2           1         4119021662      cycles                    #    0.620 GHz                    
S0-C2           1         3344760261      instructions              #    0.81  insn per cycle         
S0-C2           1          458260993      branches                  #   68.947 M/sec                  
S0-C2           1          117705212      branch-misses             #   25.69% of all branches        
S0-C3           1            6646.53 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                613      context-switches          #    0.092 K/sec                  
S0-C3           1                 28      cpu-migrations            #    0.004 K/sec                  
S0-C3           1               4242      page-faults               #    0.638 K/sec                  
S0-C3           1         3995285175      cycles                    #    0.601 GHz                    
S0-C3           1         3349203088      instructions              #    0.84  insn per cycle         
S0-C3           1          458606080      branches                  #   68.999 M/sec                  
S0-C3           1          117360312      branch-misses             #   25.59% of all branches        

       6.646852854 seconds time elapsed

================================================================================
perf stat -o 129_compress.log --per-core -a taskset -c 0-3 ./spec95_129_compress.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:27:58 2021


 Performance counter stats for 'system wide':

S0-C0           1          175398.97 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              61569      context-switches          #    0.351 K/sec                  
S0-C0           1                184      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               9165      page-faults               #    0.052 K/sec                  
S0-C0           1          351195426      cycles                    #    0.002 GHz                    
S0-C0           1         1785307200      instructions              #    5.08  insn per cycle         
S0-C0           1         3736822922      branches                  #   21.305 M/sec                  
S0-C0           1          631740291      branch-misses             #   16.91% of all branches        
S0-C1           1          175398.97 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              25217      context-switches          #    0.144 K/sec                  
S0-C1           1                 96      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               9201      page-faults               #    0.052 K/sec                  
S0-C1           1         2759460469      cycles                    #    0.016 GHz                    
S0-C1           1         1405829352      instructions              #    0.51  insn per cycle         
S0-C1           1         3685205634      branches                  #   21.010 M/sec                  
S0-C1           1          620577631      branch-misses             #   16.84% of all branches        
S0-C2           1          175398.97 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              11839      context-switches          #    0.067 K/sec                  
S0-C2           1                 96      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               9261      page-faults               #    0.053 K/sec                  
S0-C2           1         2155025408      cycles                    #    0.012 GHz                    
S0-C2           1         1364940606      instructions              #    0.63  insn per cycle         
S0-C2           1         3677317733      branches                  #   20.965 M/sec                  
S0-C2           1          617763516      branch-misses             #   16.80% of all branches        
S0-C3           1          175398.97 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               9007      context-switches          #    0.051 K/sec                  
S0-C3           1                 88      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               9253      page-faults               #    0.053 K/sec                  
S0-C3           1         1925431681      cycles                    #    0.011 GHz                    
S0-C3           1         1280996207      instructions              #    0.67  insn per cycle         
S0-C3           1         3668898125      branches                  #   20.917 M/sec                  
S0-C3           1          616650259      branch-misses             #   16.81% of all branches        

     175.399399441 seconds time elapsed

================================================================================
perf stat -o 130_li.log --per-core -a taskset -c 0-3 ./spec95_130_li.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:30:53 2021


 Performance counter stats for 'system wide':

S0-C0           1           78575.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              19511      context-switches          #    0.248 K/sec                  
S0-C0           1                 65      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                294      page-faults               #    0.004 K/sec                  
S0-C0           1         3327566218      cycles                    #    0.042 GHz                    
S0-C0           1         1128607100      instructions              #    0.34  insn per cycle         
S0-C0           1         1839793649      branches                  #   23.414 M/sec                  
S0-C0           1         1045735000      branch-misses             #   56.84% of all branches        
S0-C1           1           78575.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               6038      context-switches          #    0.077 K/sec                  
S0-C1           1                 63      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                251      page-faults               #    0.003 K/sec                  
S0-C1           1         1978045103      cycles                    #    0.025 GHz                    
S0-C1           1         1022581456      instructions              #    0.52  insn per cycle         
S0-C1           1         1825318303      branches                  #   23.230 M/sec                  
S0-C1           1         1041553022      branch-misses             #   57.06% of all branches        
S0-C2           1           78575.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               5405      context-switches          #    0.069 K/sec                  
S0-C2           1                 37      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                592      page-faults               #    0.008 K/sec                  
S0-C2           1         1897045022      cycles                    #    0.024 GHz                    
S0-C2           1          997188581      instructions              #    0.53  insn per cycle         
S0-C2           1         1822329767      branches                  #   23.192 M/sec                  
S0-C2           1         1040476963      branch-misses             #   57.10% of all branches        
S0-C3           1           78575.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               7709      context-switches          #    0.098 K/sec                  
S0-C3           1                 40      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                478      page-faults               #    0.006 K/sec                  
S0-C3           1         1905848724      cycles                    #    0.024 GHz                    
S0-C3           1         1025000984      instructions              #    0.54  insn per cycle         
S0-C3           1         1825665355      branches                  #   23.234 M/sec                  
S0-C3           1         1042505289      branch-misses             #   57.10% of all branches        

      78.576096010 seconds time elapsed

================================================================================
perf stat -o 132_ijpeg.log --per-core -a taskset -c 0-3 ./spec95_132_ijpeg.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:32:12 2021


 Performance counter stats for 'system wide':

S0-C0           1           22227.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               5890      context-switches          #    0.265 K/sec                  
S0-C0           1                 27      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               2795      page-faults               #    0.126 K/sec                  
S0-C0           1         2200670136      cycles                    #    0.099 GHz                    
S0-C0           1         3769199583      instructions              #    1.71  insn per cycle         
S0-C0           1         1072859210      branches                  #   48.268 M/sec                  
S0-C0           1          189440470      branch-misses             #   17.66% of all branches        
S0-C1           1           22227.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               1211      context-switches          #    0.054 K/sec                  
S0-C1           1                 14      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               2744      page-faults               #    0.123 K/sec                  
S0-C1           1         2945797680      cycles                    #    0.133 GHz                    
S0-C1           1          260601059      instructions              #    0.09  insn per cycle         
S0-C1           1         1117715226      branches                  #   50.286 M/sec                  
S0-C1           1          202258250      branch-misses             #   18.10% of all branches        
S0-C2           1           22227.40 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               2153      context-switches          #    0.097 K/sec                  
S0-C2           1                 22      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               2555      page-faults               #    0.115 K/sec                  
S0-C2           1         3086953356      cycles                    #    0.139 GHz                    
S0-C2           1          299582358      instructions              #    0.10  insn per cycle         
S0-C2           1         1123262372      branches                  #   50.535 M/sec                  
S0-C2           1          202956127      branch-misses             #   18.07% of all branches        
S0-C3           1           22227.40 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               2597      context-switches          #    0.117 K/sec                  
S0-C3           1                 29      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               2629      page-faults               #    0.118 K/sec                  
S0-C3           1         3680135667      cycles                    #    0.166 GHz                    
S0-C3           1         1882077335      instructions              #    0.51  insn per cycle         
S0-C3           1          970052230      branches                  #   43.642 M/sec                  
S0-C3           1          165810498      branch-misses             #   17.09% of all branches        

      22.227802020 seconds time elapsed

================================================================================
perf stat -o 134_perl.log --per-core -a taskset -c 0-3 ./spec95_134_perl.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:32:34 2021


 Performance counter stats for 'system wide':

S0-C0           1           30560.01 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              10511      context-switches          #    0.344 K/sec                  
S0-C0           1                 35      cpu-migrations            #    0.001 K/sec                  
S0-C0           1               9133      page-faults               #    0.299 K/sec                  
S0-C0           1         1032674323      cycles                    #    0.034 GHz                    
S0-C0           1          888985361      instructions              #    0.86  insn per cycle         
S0-C0           1         2737393437      branches                  #   89.574 M/sec                  
S0-C0           1          479985757      branch-misses             #   17.53% of all branches        
S0-C1           1           30560.00 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               3165      context-switches          #    0.104 K/sec                  
S0-C1           1                 20      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               9371      page-faults               #    0.307 K/sec                  
S0-C1           1          835622076      cycles                    #    0.027 GHz                    
S0-C1           1          829574142      instructions              #    0.99  insn per cycle         
S0-C1           1         2729680924      branches                  #   89.322 M/sec                  
S0-C1           1          491887467      branch-misses             #   18.02% of all branches        
S0-C2           1           30560.00 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                582      context-switches          #    0.019 K/sec                  
S0-C2           1                 26      cpu-migrations            #    0.001 K/sec                  
S0-C2           1               9253      page-faults               #    0.303 K/sec                  
S0-C2           1          356889930      cycles                    #    0.012 GHz                    
S0-C2           1          809761203      instructions              #    2.27  insn per cycle         
S0-C2           1         2727034794      branches                  #   89.235 M/sec                  
S0-C2           1          491121840      branch-misses             #   18.01% of all branches        
S0-C3           1           30560.01 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               1240      context-switches          #    0.041 K/sec                  
S0-C3           1                 22      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               9303      page-faults               #    0.304 K/sec                  
S0-C3           1          884443518      cycles                    #    0.029 GHz                    
S0-C3           1          812382722      instructions              #    0.92  insn per cycle         
S0-C3           1         2727348998      branches                  #   89.246 M/sec                  
S0-C3           1          477131457      branch-misses             #   17.49% of all branches        

      30.560358599 seconds time elapsed

================================================================================
perf stat -o 141_apsi.log --per-core -a taskset -c 0-3 ./spec95_141_apsi.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:33:05 2021


 Performance counter stats for 'system wide':

S0-C0           1           67820.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              19924      context-switches          #    0.294 K/sec                  
S0-C0           1                 83      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                990      page-faults               #    0.015 K/sec                  
S0-C0           1         2184862206      cycles                    #    0.032 GHz                    
S0-C0           1         2238863735      instructions              #    1.02  insn per cycle         
S0-C0           1          889558926      branches                  #   13.116 M/sec                  
S0-C0           1           44545808      branch-misses             #    5.01% of all branches        
S0-C1           1           67820.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               4929      context-switches          #    0.073 K/sec                  
S0-C1           1                 65      cpu-migrations            #    0.001 K/sec                  
S0-C1           1               1058      page-faults               #    0.016 K/sec                  
S0-C1           1          495934507      cycles                    #    0.007 GHz                    
S0-C1           1         2101445335      instructions              #    4.24  insn per cycle         
S0-C1           1          871507102      branches                  #   12.850 M/sec                  
S0-C1           1           40156275      branch-misses             #    4.61% of all branches        
S0-C2           1           67820.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               3849      context-switches          #    0.057 K/sec                  
S0-C2           1                 78      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                977      page-faults               #    0.014 K/sec                  
S0-C2           1         4236423578      cycles                    #    0.062 GHz                    
S0-C2           1         2085432449      instructions              #    0.49  insn per cycle         
S0-C2           1          869318861      branches                  #   12.818 M/sec                  
S0-C2           1           39911168      branch-misses             #    4.59% of all branches        
S0-C3           1           67820.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               5382      context-switches          #    0.079 K/sec                  
S0-C3           1                 81      cpu-migrations            #    0.001 K/sec                  
S0-C3           1               1146      page-faults               #    0.017 K/sec                  
S0-C3           1         1156417379      cycles                    #    0.017 GHz                    
S0-C3           1         2115072686      instructions              #    1.83  insn per cycle         
S0-C3           1          872718042      branches                  #   12.868 M/sec                  
S0-C3           1           40608114      branch-misses             #    4.65% of all branches        

      67.820673659 seconds time elapsed

================================================================================
perf stat -o 145_fpppp.log --per-core -a taskset -c 0-3 ./spec95_145_fpppp.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:34:13 2021


 Performance counter stats for 'system wide':

S0-C0           1          138192.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              56573      context-switches          #    0.409 K/sec                  
S0-C0           1                121      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                421      page-faults               #    0.003 K/sec                  
S0-C0           1         1769690993      cycles                    #    0.013 GHz                    
S0-C0           1         2830708943      instructions              #    1.60  insn per cycle         
S0-C0           1         1307698218      branches                  #    9.463 M/sec                  
S0-C0           1          134808894      branch-misses             #   10.31% of all branches        
S0-C1           1          138192.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              11082      context-switches          #    0.080 K/sec                  
S0-C1           1                 71      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                408      page-faults               #    0.003 K/sec                  
S0-C1           1         1307260555      cycles                    #    0.009 GHz                    
S0-C1           1         3899359297      instructions              #    2.98  insn per cycle         
S0-C1           1         1274062380      branches                  #    9.219 M/sec                  
S0-C1           1          123961121      branch-misses             #    9.73% of all branches        
S0-C2           1          138192.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               5926      context-switches          #    0.043 K/sec                  
S0-C2           1                 97      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                964      page-faults               #    0.007 K/sec                  
S0-C2           1         2168499381      cycles                    #    0.016 GHz                    
S0-C2           1          504569835      instructions              #    0.23  insn per cycle         
S0-C2           1         1280469621      branches                  #    9.266 M/sec                  
S0-C2           1          124087494      branch-misses             #    9.69% of all branches        
S0-C3           1          138192.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              10734      context-switches          #    0.078 K/sec                  
S0-C3           1                 50      cpu-migrations            #    0.000 K/sec                  
S0-C3           1               1381      page-faults               #    0.010 K/sec                  
S0-C3           1         1466208631      cycles                    #    0.011 GHz                    
S0-C3           1         3877439353      instructions              #    2.64  insn per cycle         
S0-C3           1         1272141422      branches                  #    9.206 M/sec                  
S0-C3           1          124160443      branch-misses             #    9.76% of all branches        

     138.193310714 seconds time elapsed

================================================================================
perf stat -o 146_wave5.log --per-core -a taskset -c 0-3 ./spec95_146_wave5.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:36:31 2021


 Performance counter stats for 'system wide':

S0-C0           1           67559.06 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              15613      context-switches          #    0.231 K/sec                  
S0-C0           1                 82      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              10449      page-faults               #    0.155 K/sec                  
S0-C0           1         4164413442      cycles                    #    0.062 GHz                    
S0-C0           1         2141890893      instructions              #    0.51  insn per cycle         
S0-C0           1         1297955219      branches                  #   19.212 M/sec                  
S0-C0           1           19556977      branch-misses             #    1.51% of all branches        
S0-C1           1           67559.07 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               3705      context-switches          #    0.055 K/sec                  
S0-C1           1                 37      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              10660      page-faults               #    0.158 K/sec                  
S0-C1           1           17990264      cycles                    #    0.000 GHz                    
S0-C1           1         2668491605      instructions              #  148.33  insn per cycle         
S0-C1           1         1332533138      branches                  #   19.724 M/sec                  
S0-C1           1           16954641      branch-misses             #    1.27% of all branches        
S0-C2           1           67559.06 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1               5977      context-switches          #    0.088 K/sec                  
S0-C2           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              10560      page-faults               #    0.156 K/sec                  
S0-C2           1         1325007702      cycles                    #    0.020 GHz                    
S0-C2           1         3059687581      instructions              #    2.31  insn per cycle         
S0-C2           1         1368614170      branches                  #   20.258 M/sec                  
S0-C2           1           18526136      branch-misses             #    1.35% of all branches        
S0-C3           1           67559.06 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               7554      context-switches          #    0.112 K/sec                  
S0-C3           1                 62      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              10694      page-faults               #    0.158 K/sec                  
S0-C3           1          647028866      cycles                    #    0.010 GHz                    
S0-C3           1         2601225400      instructions              #    4.02  insn per cycle         
S0-C3           1         1330244170      branches                  #   19.690 M/sec                  
S0-C3           1           18482928      branch-misses             #    1.39% of all branches        

      67.560771246 seconds time elapsed

================================================================================
perf stat -o 147_vortex.log --per-core -a taskset -c 0-3 ./spec95_147_vortex.sh -n 4
/root/i-benchmarks/spec_95/bin
# started on Thu Mar  4 23:37:39 2021


 Performance counter stats for 'system wide':

S0-C0           1           96149.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              28558      context-switches          #    0.297 K/sec                  
S0-C0           1                122      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              11617      page-faults               #    0.121 K/sec                  
S0-C0           1         2167633008      cycles                    #    0.023 GHz                    
S0-C0           1         2494292922      instructions              #    1.15  insn per cycle         
S0-C0           1         1456068515      branches                  #   15.144 M/sec                  
S0-C0           1          390240752      branch-misses             #   26.80% of all branches        
S0-C1           1           96149.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1               7869      context-switches          #    0.082 K/sec                  
S0-C1           1                132      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              11936      page-faults               #    0.124 K/sec                  
S0-C1           1         2114431246      cycles                    #    0.022 GHz                    
S0-C1           1         3494560339      instructions              #    1.65  insn per cycle         
S0-C1           1         1548261230      branches                  #   16.103 M/sec                  
S0-C1           1          393579239      branch-misses             #   25.42% of all branches        
S0-C2           1           96149.51 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              10854      context-switches          #    0.113 K/sec                  
S0-C2           1                 65      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              12076      page-faults               #    0.126 K/sec                  
S0-C2           1          714755415      cycles                    #    0.007 GHz                    
S0-C2           1         3568021290      instructions              #    4.99  insn per cycle         
S0-C2           1         1556297682      branches                  #   16.186 M/sec                  
S0-C2           1          396149182      branch-misses             #   25.45% of all branches        
S0-C3           1           96149.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1               3687      context-switches          #    0.038 K/sec                  
S0-C3           1                139      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              12202      page-faults               #    0.127 K/sec                  
S0-C3           1         4287672693      cycles                    #    0.045 GHz                    
S0-C3           1          418962280      instructions              #    0.10  insn per cycle         
S0-C3           1         1667893424      branches                  #   17.347 M/sec                  
S0-C3           1          399986160      branch-misses             #   23.98% of all branches        

      96.152383628 seconds time elapsed

================================================================================
perf stat -o aes_benchmark.log --per-core -a taskset -c 0-3 ./aes_benchmark 4
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
# started on Thu Mar  4 23:39:15 2021


 Performance counter stats for 'system wide':

S0-C0           1            6554.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1               1944      context-switches          #    0.297 K/sec                  
S0-C0           1                 25      cpu-migrations            #    0.004 K/sec                  
S0-C0           1                390      page-faults               #    0.060 K/sec                  
S0-C0           1         4199181481      cycles                    #    0.641 GHz                    
S0-C0           1         3450547006      instructions              #    0.82  insn per cycle         
S0-C0           1          179777839      branches                  #   27.428 M/sec                  
S0-C0           1            3355472      branch-misses             #    1.87% of all branches        
S0-C1           1            6554.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                645      context-switches          #    0.098 K/sec                  
S0-C1           1                 39      cpu-migrations            #    0.006 K/sec                  
S0-C1           1                388      page-faults               #    0.059 K/sec                  
S0-C1           1         4093512901      cycles                    #    0.625 GHz                    
S0-C1           1         3438046235      instructions              #    0.84  insn per cycle         
S0-C1           1          178182479      branches                  #   27.185 M/sec                  
S0-C1           1            2969769      branch-misses             #    1.67% of all branches        
S0-C2           1            6554.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                818      context-switches          #    0.125 K/sec                  
S0-C2           1                 30      cpu-migrations            #    0.005 K/sec                  
S0-C2           1                481      page-faults               #    0.073 K/sec                  
S0-C2           1         4102540405      cycles                    #    0.626 GHz                    
S0-C2           1         3441572366      instructions              #    0.84  insn per cycle         
S0-C2           1          178599483      branches                  #   27.249 M/sec                  
S0-C2           1            3078070      branch-misses             #    1.72% of all branches        
S0-C3           1            6554.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                508      context-switches          #    0.078 K/sec                  
S0-C3           1                 30      cpu-migrations            #    0.005 K/sec                  
S0-C3           1                393      page-faults               #    0.060 K/sec                  
S0-C3           1         4093745125      cycles                    #    0.625 GHz                    
S0-C3           1         3437548662      instructions              #    0.84  insn per cycle         
S0-C3           1          178075613      branches                  #   27.169 M/sec                  
S0-C3           1            2980179      branch-misses             #    1.67% of all branches        

       6.554925873 seconds time elapsed

================================================================================
This benchmark has been compiled to use 16 threads. You have to repcompile it if you want to use different number of threads. See ../install/setup.sh for details.
cp: cannot stat 'coremark_benchmark.log': No such file or directory
================================================================================
================================================================================
Printing results
File: 103_su2cor.txt
instructions: 8799464311
=(219269921+4266539598+42368244+4271286548)
frequencies: 0.016
=(0.000+0.021+0.022+0.021)/4
ipcs:3.17
=1*(9.14+1.77+0.02+1.73)/4

File: 102_swim.txt
instructions: 7580554153
=(2121056833+1828154925+1837041559+1794300836)
frequencies: 0.015
=(0.041+0.009+0.005+0.005)/4
ipcs:3.56
=1*(0.76+3.08+5.54+4.85)/4

File: run_plot_theilsen.txt
instructions: 5679525866
=(1131563982+1378741570+1397730933+1771489381)
frequencies: 0.024
=(0.017+0.014+0.015+0.049)/4
ipcs:1.93
=1*(1.78+2.55+2.44+0.95)/4

File: 110_applu.txt
instructions: 1989697458
=(556691482+449223559+535058463+448723954)
frequencies: 0.009
=(0.010+0.009+0.010+0.009)/4
ipcs:0.66
=1*(0.70+0.63+0.67+0.64)/4

File: 129_compress.txt
instructions: 5837073365
=(1785307200+1405829352+1364940606+1280996207)
frequencies: 0.010
=(0.002+0.016+0.012+0.011)/4
ipcs:1.72
=1*(5.08+0.51+0.63+0.67)/4

File: aes_benchmark.txt
instructions: 13767714269
=(3450547006+3438046235+3441572366+3437548662)
frequencies: 0.629
=(0.641+0.625+0.626+0.625)/4
ipcs:0.83
=1*(0.82+0.84+0.84+0.84)/4

File: 132_ijpeg.txt
instructions: 6211460335
=(3769199583+260601059+299582358+1882077335)
frequencies: 0.134
=(0.099+0.133+0.139+0.166)/4
ipcs:0.60
=1*(1.71+0.09+0.10+0.51)/4

File: 130_li.txt
instructions: 4173378121
=(1128607100+1022581456+997188581+1025000984)
frequencies: 0.029
=(0.042+0.025+0.024+0.024)/4
ipcs:0.48
=1*(0.34+0.52+0.53+0.54)/4

File: 107_mgrid.txt
instructions: 1188490508
=(494318972+228717479+291258975+174195082)
frequencies: 0.039
=(0.022+0.043+0.047+0.043)/4
ipcs:0.10
=1*(0.24+0.06+0.07+0.05)/4

File: 104_hydro2d.txt
instructions: 6001503914
=(1332615991+1457311961+1448295532+1763280430)
frequencies: 0.017
=(0.013+0.000+0.045+0.010)/4
ipcs:138.70
=1*(1.09+551.41+0.34+1.97)/4

File: run_plot_svm_nonlinear.txt
instructions: 1761921438
=(391707749+439722452+470542124+459949113)
frequencies: 0.221
=(0.222+0.216+0.229+0.217)/4
ipcs:0.12
=1*(0.11+0.13+0.13+0.13)/4

File: 147_vortex.txt
instructions: 9975836831
=(2494292922+3494560339+3568021290+418962280)
frequencies: 0.024
=(0.023+0.022+0.007+0.045)/4
ipcs:1.97
=1*(1.15+1.65+4.99+0.10)/4

File: run_multioutput_face_completion.txt
instructions: 10601152536
=(3165284556+124027228+3590343072+3721497680)
frequencies: 0.056
=(0.050+0.071+0.049+0.053)/4
ipcs:0.99
=1*(1.21+0.03+1.39+1.35)/4

File: 141_apsi.txt
instructions: 8540814205
=(2238863735+2101445335+2085432449+2115072686)
frequencies: 0.030
=(0.032+0.007+0.062+0.017)/4
ipcs:1.90
=1*(1.02+4.24+0.49+1.83)/4

File: sqlite_4_threads.txt
instructions: 2871197593
=(724159189+703639174+715495788+727903442)
frequencies: 0.257
=(0.271+0.246+0.249+0.260)/4
ipcs:0.33
=1*(0.32+0.34+0.34+0.33)/4

File: word2vec_perf_output_1614899382295411139.txt
instructions: 7071222294
=(2435954192+2222228326+17300661+2395739115)
frequencies: 0.024
=(0.004+0.028+0.033+0.031)/4
ipcs:1.93
=1*(5.99+0.86+0.01+0.84)/4

File: 134_perl.txt
instructions: 3340703428
=(888985361+829574142+809761203+812382722)
frequencies: 0.025
=(0.034+0.027+0.012+0.029)/4
ipcs:1.26
=1*(0.86+0.99+2.27+0.92)/4

File: 099_go.txt
instructions: 5524974834
=(638215266+1396007014+1345544807+2145207747)
frequencies: 0.027
=(0.033+0.011+0.057+0.008)/4
ipcs:2.17
=1*(0.37+2.45+0.45+5.43)/4

File: 145_fpppp.txt
instructions: 11112077428
=(2830708943+3899359297+504569835+3877439353)
frequencies: 0.012
=(0.013+0.009+0.016+0.011)/4
ipcs:1.86
=1*(1.60+2.98+0.23+2.64)/4

File: go_word2vec_4_threads.txt
instructions: 12353662100
=(3605179244+3365078368+1549956476+3833448012)
frequencies: 0.079
=(0.083+0.065+0.082+0.085)/4
ipcs:1.07
=1*(1.16+1.39+0.51+1.21)/4

File: 125_turb3d.txt
instructions: 7668810385
=(1992479954+1865231791+1932171551+1878927089)
frequencies: 0.025
=(0.036+0.019+0.024+0.023)/4
ipcs:0.83
=1*(0.58+1.05+0.84+0.85)/4

File: 101_tomcatv.txt
instructions: 13291798457
=(3479036891+3284661387+3241481364+3286618815)
frequencies: 0.026
=(0.010+0.028+0.028+0.037)/4
ipcs:2.12
=1*(4.41+1.48+1.49+1.12)/4

File: 146_wave5.txt
instructions: 10471295479
=(2141890893+2668491605+3059687581+2601225400)
frequencies: 0.023
=(0.062+0.000+0.020+0.010)/4
ipcs:38.79
=1*(0.51+148.33+2.31+4.02)/4

File: run_forest_importances_faces.txt
instructions: 11138210187
=(2778528757+2767359547+2801406595+2790915288)
frequencies: 0.137
=(0.027+0.176+0.171+0.172)/4
ipcs:1.58
=1*(4.32+0.65+0.68+0.67)/4

File: word2vec_perf_output_no_branch_1614899382301361291.txt
instructions: 8154863291
=(2776465935+1420588597+859995056+3097813703)
frequencies: 0.024
=(0.002+0.026+0.039+0.029)/4
ipcs:3.88
=1*(13.68+0.54+0.22+1.07)/4

File: 126_gcc.txt
instructions: 13405166472
=(3354117870+3357085253+3344760261+3349203088)
frequencies: 0.617
=(0.643+0.603+0.620+0.601)/4
ipcs:0.82
=1*(0.78+0.84+0.81+0.84)/4

================================================================================
Finished running benchmarks
================================================================================

