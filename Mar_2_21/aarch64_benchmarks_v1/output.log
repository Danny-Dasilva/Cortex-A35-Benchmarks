Architecture:        aarch64
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A35
Stepping:            r0p1
CPU max MHz:         1300.0000
CPU min MHz:         598.0000
BogoMIPS:            26.00
Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
================================================================================
/home/mendel/sd_card/i-benchmarks/word2vec/bin
perf stat -o ../data/word2vec_perf_output_1614746811767744456.txt --per-core -a taskset -c 0-3 ./word2vec -train ../data/text8_1.7mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_1.7mb
100K200KVocab size: 5847
Words in train file: 252418
Alpha: 0.050000  Progress: 0.28%  Words/thread/sec: 3.50k  Alpha: 0.049862  Progress: 0.58%  Words/thread/sec: 5.88k  Alpha: 0.049862  Progress: 0.88%  Words/thread/sec: 8.93k  Alpha: 0.049558  Progress: 1.19%  Words/thread/sec: 11.95k  Alpha: 0.049407  Progress: 1.45%  Words/thread/sec: 8.11k  Alpha: 0.049275  Progress: 1.72%  Words/thread/sec: 8.68k  Alpha: 0.049140  Progress: 1.98%  Words/thread/sec: 10.00k  Alpha: 0.049008  Progress: 2.30%  Words/thread/sec: 10.56k  Alpha: 0.048852  Progress: 2.56%  Words/thread/sec: 8.64k  Alpha: 0.048718  Progress: 2.84%  Words/thread/sec: 9.53k  Alpha: 0.048581  Progress: 3.16%  Words/thread/sec: 10.60k  Alpha: 0.048421  Progress: 3.43%  Words/thread/sec: 10.86k  Alpha: 0.048284  Progress: 3.70%  Words/thread/sec: 9.34k  Alpha: 0.048148  Progress: 3.97%  Words/thread/sec: 9.55k  Alpha: 0.048015  Progress: 4.29%  Words/thread/sec: 10.32k  Alpha: 0.047855  Progress: 4.60%  Words/thread/sec: 11.02k  Alpha: 0.047701  Progress: 4.90%  Words/thread/sec: 9.51k  Alpha: 0.047548  Progress: 5.17%  Words/thread/sec: 10.03k  Alpha: 0.047413  Progress: 5.49%  Words/thread/sec: 10.28k  Alpha: 0.047253  Progress: 5.81%  Words/thread/sec: 10.85k  Alpha: 0.047096  Progress: 6.99%  Words/thread/sec: 10.09k  Alpha: 0.046504  Progress: 7.30%  Words/thread/sec: 10.23k  Alpha: 0.046350  Progress: 7.60%  Words/thread/sec: 10.63k  Alpha: 0.046199  Progress: 7.90%  Words/thread/sec: 11.04k  Alpha: 0.046049  Progress: 8.17%  Words/thread/sec: 10.33k  Alpha: 0.045915  Progress: 8.44%  Words/thread/sec: 10.37k  Alpha: 0.045782  Progress: 8.70%  Words/thread/sec: 10.69k  Alpha: 0.045649  Progress: 9.02%  Words/thread/sec: 10.84k  Alpha: 0.045492  Progress: 9.28%  Words/thread/sec: 10.42k  Alpha: 0.045359  Progress: 9.55%  Words/thread/sec: 10.46k  Alpha: 0.045226  Progress: 9.82%  Words/thread/sec: 10.76k  Alpha: 0.045089  Progress: 10.09%  Words/thread/sec: 10.84k  Alpha: 0.044953  Progress: 10.37%  Words/thread/sec: 10.48k  Alpha: 0.044816  Progress: 10.64%  Words/thread/sec: 10.32k  Alpha: 0.044682  Progress: 10.95%  Words/thread/sec: 10.61k  Alpha: 0.044682  Progress: 11.27%  Words/thread/sec: 10.92k  Alpha: 0.044367  Progress: 11.57%  Words/thread/sec: 10.43k  Alpha: 0.044213  Progress: 11.85%  Words/thread/sec: 10.49k  Alpha: 0.044076  Progress: 12.16%  Words/thread/sec: 10.58k  Alpha: 0.043918  Progress: 12.48%  Words/thread/sec: 10.85k  Alpha: 0.043759  Progress: 13.71%  Words/thread/sec: 10.49k  Alpha: 0.043143  Progress: 14.02%  Words/thread/sec: 10.55k  Alpha: 0.042992  Progress: 14.33%  Words/thread/sec: 10.79k  Alpha: 0.042837  Progress: 14.63%  Words/thread/sec: 11.00k  Alpha: 0.042686  Progress: 14.90%  Words/thread/sec: 10.59k  Alpha: 0.042552  Progress: 15.16%  Words/thread/sec: 10.62k  Alpha: 0.042418  Progress: 15.43%  Words/thread/sec: 10.80k  Alpha: 0.042286  Progress: 15.74%  Words/thread/sec: 10.88k  Alpha: 0.042130  Progress: 16.01%  Words/thread/sec: 10.63k  Alpha: 0.041996  Progress: 16.28%  Words/thread/sec: 10.67k  Alpha: 0.041858  Progress: 16.55%  Words/thread/sec: 10.83k  Alpha: 0.041726  Progress: 16.82%  Words/thread/sec: 10.88k  Alpha: 0.041589  Progress: 17.10%  Words/thread/sec: 10.66k  Alpha: 0.041451  Progress: 17.36%  Words/thread/sec: 10.56k  Alpha: 0.041318  Progress: 17.68%  Words/thread/sec: 10.74k  Alpha: 0.041162  Progress: 18.00%  Words/thread/sec: 10.93k  Alpha: 0.041001  Progress: 18.31%  Words/thread/sec: 10.63k  Alpha: 0.040846  Progress: 18.57%  Words/thread/sec: 10.65k  Alpha: 0.040713  Progress: 18.84%  Words/thread/sec: 10.80k  Alpha: 0.040579  Progress: 19.16%  Words/thread/sec: 10.85k  Alpha: 0.040422  Progress: 20.44%  Words/thread/sec: 10.65k  Alpha: 0.039780  Progress: 20.74%  Words/thread/sec: 10.68k  Alpha: 0.039630  Progress: 21.05%  Words/thread/sec: 10.84k  Alpha: 0.039475  Progress: 21.35%  Words/thread/sec: 10.97k  Alpha: 0.039325  Progress: 21.62%  Words/thread/sec: 10.71k  Alpha: 0.039191  Progress: 21.89%  Words/thread/sec: 10.73k  Alpha: 0.039056  Progress: 22.20%  Words/thread/sec: 10.77k  Alpha: 0.038902  Progress: 22.51%  Words/thread/sec: 10.89k  Alpha: 0.038743  Progress: 22.83%  Words/thread/sec: 10.69k  Alpha: 0.038583  Progress: 23.11%  Words/thread/sec: 10.81k  Alpha: 0.038446  Progress: 23.38%  Words/thread/sec: 10.83k  Alpha: 0.038310  Progress: 23.65%  Words/thread/sec: 10.92k  Alpha: 0.038177  Progress: 23.92%  Words/thread/sec: 10.70k  Alpha: 0.038041  Progress: 24.23%  Words/thread/sec: 10.74k  Alpha: 0.037884  Progress: 24.50%  Words/thread/sec: 10.85k  Alpha: 0.037749  Progress: 24.77%  Words/thread/sec: 10.93k  Alpha: 0.037613  Progress: 25.04%  Words/thread/sec: 10.64k  Alpha: 0.037478  Progress: 25.35%  Words/thread/sec: 10.77k  Alpha: 0.037324  Progress: 25.67%  Words/thread/sec: 10.79k  Alpha: 0.037165  Progress: 25.98%  Words/thread/sec: 10.89k  Alpha: 0.037008  Progress: 27.17%  Words/thread/sec: 10.73k  Alpha: 0.036413  Progress: 27.47%  Words/thread/sec: 10.77k  Alpha: 0.036263  Progress: 27.78%  Words/thread/sec: 10.86k  Alpha: 0.036108  Progress: 28.08%  Words/thread/sec: 10.95k  Alpha: 0.035958  Progress: 28.35%  Words/thread/sec: 10.77k  Alpha: 0.035825  Progress: 28.62%  Words/thread/sec: 10.80k  Alpha: 0.035690  Progress: 28.89%  Words/thread/sec: 10.84k  Alpha: 0.035556  Progress: 29.20%  Words/thread/sec: 10.91k  Alpha: 0.035401  Progress: 29.46%  Words/thread/sec: 10.79k  Alpha: 0.035269  Progress: 29.74%  Words/thread/sec: 10.82k  Alpha: 0.035131  Progress: 30.00%  Words/thread/sec: 10.86k  Alpha: 0.034998  Progress: 30.27%  Words/thread/sec: 10.91k  Alpha: 0.034864  Progress: 30.55%  Words/thread/sec: 10.80k  Alpha: 0.034725  Progress: 30.86%  Words/thread/sec: 10.76k  Alpha: 0.034570  Progress: 31.12%  Words/thread/sec: 10.83k  Alpha: 0.034438  Progress: 31.44%  Words/thread/sec: 10.91k  Alpha: 0.034278  Progress: 31.75%  Words/thread/sec: 10.77k  Alpha: 0.034123  Progress: 32.03%  Words/thread/sec: 10.80k  Alpha: 0.033987  Progress: 32.34%  Words/thread/sec: 10.81k  Alpha: 0.033829  Progress: 32.66%  Words/thread/sec: 10.88k  Alpha: 0.033672  Progress: 33.89%  Words/thread/sec: 10.77k  Alpha: 0.033054  Progress: 34.19%  Words/thread/sec: 10.81k  Alpha: 0.032903  Progress: 34.50%  Words/thread/sec: 10.88k  Alpha: 0.032749  Progress: 34.81%  Words/thread/sec: 10.94k  Alpha: 0.032597  Progress: 35.07%  Words/thread/sec: 10.81k  Alpha: 0.032463  Progress: 35.34%  Words/thread/sec: 10.83k  Alpha: 0.032330  Progress: 35.61%  Words/thread/sec: 10.86k  Alpha: 0.032195  Progress: 35.92%  Words/thread/sec: 10.92k  Alpha: 0.032040  Progress: 36.19%  Words/thread/sec: 10.82k  Alpha: 0.031907  Progress: 36.46%  Words/thread/sec: 10.85k  Alpha: 0.031771  Progress: 36.72%  Words/thread/sec: 10.87k  Alpha: 0.031638  Progress: 37.00%  Words/thread/sec: 10.92k  Alpha: 0.031502  Progress: 37.27%  Words/thread/sec: 10.82k  Alpha: 0.031363  Progress: 37.54%  Words/thread/sec: 10.79k  Alpha: 0.031231  Progress: 37.85%  Words/thread/sec: 10.88k  Alpha: 0.031074  Progress: 38.12%  Words/thread/sec: 10.93k  Alpha: 0.030941  Progress: 38.43%  Words/thread/sec: 10.79k  Alpha: 0.030786  Progress: 38.69%  Words/thread/sec: 10.81k  Alpha: 0.030653  Progress: 38.96%  Words/thread/sec: 10.89k  Alpha: 0.030518  Progress: 39.23%  Words/thread/sec: 10.94k  Alpha: 0.030386  Progress: 40.02%  Words/thread/sec: 10.87k  Alpha: 0.029990  Progress: 40.62%  Words/thread/sec: 10.81k  Alpha: 0.029688  Progress: 40.93%  Words/thread/sec: 10.85k  Alpha: 0.029537  Progress: 41.23%  Words/thread/sec: 10.90k  Alpha: 0.029383  Progress: 41.54%  Words/thread/sec: 10.90k  Alpha: 0.029232  Progress: 41.81%  Words/thread/sec: 10.84k  Alpha: 0.029097  Progress: 42.07%  Words/thread/sec: 10.87k  Alpha: 0.028964  Progress: 42.38%  Words/thread/sec: 10.87k  Alpha: 0.028809  Progress: 42.65%  Words/thread/sec: 10.89k  Alpha: 0.028675  Progress: 42.92%  Words/thread/sec: 10.85k  Alpha: 0.028542  Progress: 43.19%  Words/thread/sec: 10.89k  Alpha: 0.028404  Progress: 43.46%  Words/thread/sec: 10.88k  Alpha: 0.028269  Progress: 43.73%  Words/thread/sec: 10.87k  Alpha: 0.028137  Progress: 44.00%  Words/thread/sec: 10.86k  Alpha: 0.027998  Progress: 44.31%  Words/thread/sec: 10.85k  Alpha: 0.027843  Progress: 44.58%  Words/thread/sec: 10.89k  Alpha: 0.027709  Progress: 44.91%  Words/thread/sec: 10.81k  Alpha: 0.027547  Progress: 45.21%  Words/thread/sec: 10.84k  Alpha: 0.027393  Progress: 45.48%  Words/thread/sec: 10.88k  Alpha: 0.027258  Progress: 45.80%  Words/thread/sec: 10.88k  Alpha: 0.027101  Progress: 46.11%  Words/thread/sec: 10.78k  Alpha: 0.026943  Progress: 47.34%  Words/thread/sec: 10.84k  Alpha: 0.026330  Progress: 47.64%  Words/thread/sec: 10.88k  Alpha: 0.026180  Progress: 47.95%  Words/thread/sec: 10.92k  Alpha: 0.026025  Progress: 48.25%  Words/thread/sec: 10.83k  Alpha: 0.025874  Progress: 48.52%  Words/thread/sec: 10.87k  Alpha: 0.025739  Progress: 48.79%  Words/thread/sec: 10.90k  Alpha: 0.025606  Progress: 49.10%  Words/thread/sec: 10.89k  Alpha: 0.025449  Progress: 49.37%  Words/thread/sec: 10.83k  Alpha: 0.025317  Progress: 49.63%  Words/thread/sec: 10.87k  Alpha: 0.025184  Progress: 49.90%  Words/thread/sec: 10.90k  Alpha: 0.025049  Progress: 50.18%  Words/thread/sec: 10.89k  Alpha: 0.024912  Progress: 50.44%  Words/thread/sec: 10.83k  Alpha: 0.024779  Progress: 50.72%  Words/thread/sec: 10.88k  Alpha: 0.024641  Progress: 51.03%  Words/thread/sec: 10.87k  Alpha: 0.024486  Progress: 51.29%  Words/thread/sec: 10.90k  Alpha: 0.024353  Progress: 51.56%  Words/thread/sec: 10.84k  Alpha: 0.024221  Progress: 51.87%  Words/thread/sec: 10.85k  Alpha: 0.024065  Progress: 52.14%  Words/thread/sec: 10.87k  Alpha: 0.023931  Progress: 52.46%  Words/thread/sec: 10.87k  Alpha: 0.023772  Progress: 52.73%  Words/thread/sec: 10.86k  Alpha: 0.023637  Progress: 53.73%  Words/thread/sec: 10.85k  Alpha: 0.023134  Progress: 54.06%  Words/thread/sec: 10.85k  Alpha: 0.022971  Progress: 54.36%  Words/thread/sec: 10.89k  Alpha: 0.022822  Progress: 54.66%  Words/thread/sec: 10.93k  Alpha: 0.022668  Progress: 54.97%  Words/thread/sec: 10.84k  Alpha: 0.022516  Progress: 55.23%  Words/thread/sec: 10.88k  Alpha: 0.022383  Progress: 55.50%  Words/thread/sec: 10.90k  Alpha: 0.022251  Progress: 55.81%  Words/thread/sec: 10.90k  Alpha: 0.022095  Progress: 56.08%  Words/thread/sec: 10.84k  Alpha: 0.021961  Progress: 56.35%  Words/thread/sec: 10.86k  Alpha: 0.021825  Progress: 56.67%  Words/thread/sec: 10.90k  Alpha: 0.021666  Progress: 56.94%  Words/thread/sec: 10.91k  Alpha: 0.021531  Progress: 57.21%  Words/thread/sec: 10.86k  Alpha: 0.021397  Progress: 57.48%  Words/thread/sec: 10.85k  Alpha: 0.021262  Progress: 57.79%  Words/thread/sec: 10.89k  Alpha: 0.021106  Progress: 58.05%  Words/thread/sec: 10.91k  Alpha: 0.020973  Progress: 58.38%  Words/thread/sec: 10.83k  Alpha: 0.020812  Progress: 58.64%  Words/thread/sec: 10.85k  Alpha: 0.020678  Progress: 58.95%  Words/thread/sec: 10.88k  Alpha: 0.020524  Progress: 59.26%  Words/thread/sec: 10.90k  Alpha: 0.020368  Progress: 59.84%  Words/thread/sec: 10.86k  Alpha: 0.020080  Progress: 60.77%  Words/thread/sec: 10.86k  Alpha: 0.019614  Progress: 61.07%  Words/thread/sec: 10.90k  Alpha: 0.019464  Progress: 61.38%  Words/thread/sec: 10.93k  Alpha: 0.019310  Progress: 61.68%  Words/thread/sec: 10.85k  Alpha: 0.019158  Progress: 61.95%  Words/thread/sec: 10.88k  Alpha: 0.019024  Progress: 62.22%  Words/thread/sec: 10.91k  Alpha: 0.018890  Progress: 62.53%  Words/thread/sec: 10.90k  Alpha: 0.018735  Progress: 62.80%  Words/thread/sec: 10.86k  Alpha: 0.018602  Progress: 63.07%  Words/thread/sec: 10.87k  Alpha: 0.018464  Progress: 63.39%  Words/thread/sec: 10.90k  Alpha: 0.018303  Progress: 63.66%  Words/thread/sec: 10.91k  Alpha: 0.018169  Progress: 63.93%  Words/thread/sec: 10.86k  Alpha: 0.018036  Progress: 64.20%  Words/thread/sec: 10.86k  Alpha: 0.017900  Progress: 64.51%  Words/thread/sec: 10.89k  Alpha: 0.017746  Progress: 64.78%  Words/thread/sec: 10.91k  Alpha: 0.017612  Progress: 65.10%  Words/thread/sec: 10.84k  Alpha: 0.017451  Progress: 65.36%  Words/thread/sec: 10.86k  Alpha: 0.017318  Progress: 65.67%  Words/thread/sec: 10.89k  Alpha: 0.017164  Progress: 65.94%  Words/thread/sec: 10.93k  Alpha: 0.017032  Progress: 66.51%  Words/thread/sec: 10.86k  Alpha: 0.016744  Progress: 67.49%  Words/thread/sec: 10.87k  Alpha: 0.016253  Progress: 67.79%  Words/thread/sec: 10.90k  Alpha: 0.016103  Progress: 68.10%  Words/thread/sec: 10.93k  Alpha: 0.015948  Progress: 68.40%  Words/thread/sec: 10.86k  Alpha: 0.015798  Progress: 68.67%  Words/thread/sec: 10.88k  Alpha: 0.015663  Progress: 68.94%  Words/thread/sec: 10.91k  Alpha: 0.015529  Progress: 69.25%  Words/thread/sec: 10.90k  Alpha: 0.015375  Progress: 69.52%  Words/thread/sec: 10.86k  Alpha: 0.015241  Progress: 69.79%  Words/thread/sec: 10.88k  Alpha: 0.015104  Progress: 70.12%  Words/thread/sec: 10.91k  Alpha: 0.014942  Progress: 70.38%  Words/thread/sec: 10.91k  Alpha: 0.014808  Progress: 70.65%  Words/thread/sec: 10.87k  Alpha: 0.014674  Progress: 70.92%  Words/thread/sec: 10.87k  Alpha: 0.014538  Progress: 71.23%  Words/thread/sec: 10.90k  Alpha: 0.014384  Progress: 71.50%  Words/thread/sec: 10.92k  Alpha: 0.014250  Progress: 71.76%  Words/thread/sec: 10.87k  Alpha: 0.014118  Progress: 72.04%  Words/thread/sec: 10.86k  Alpha: 0.013982  Progress: 72.34%  Words/thread/sec: 10.89k  Alpha: 0.013829  Progress: 72.66%  Words/thread/sec: 10.90k  Alpha: 0.013671  Progress: 72.92%  Words/thread/sec: 10.88k  Alpha: 0.013538  Progress: 73.88%  Words/thread/sec: 10.86k  Alpha: 0.013059  Progress: 74.21%  Words/thread/sec: 10.88k  Alpha: 0.012895  Progress: 74.51%  Words/thread/sec: 10.90k  Alpha: 0.012744  Progress: 74.82%  Words/thread/sec: 10.93k  Alpha: 0.012591  Progress: 75.09%  Words/thread/sec: 10.85k  Alpha: 0.012455  Progress: 75.39%  Words/thread/sec: 10.89k  Alpha: 0.012305  Progress: 75.66%  Words/thread/sec: 10.91k  Alpha: 0.012172  Progress: 75.96%  Words/thread/sec: 10.91k  Alpha: 0.012018  Progress: 76.23%  Words/thread/sec: 10.86k  Alpha: 0.011885  Progress: 76.50%  Words/thread/sec: 10.90k  Alpha: 0.011751  Progress: 76.77%  Words/thread/sec: 10.92k  Alpha: 0.011613  Progress: 77.05%  Words/thread/sec: 10.91k  Alpha: 0.011477  Progress: 77.33%  Words/thread/sec: 10.86k  Alpha: 0.011337  Progress: 77.59%  Words/thread/sec: 10.90k  Alpha: 0.011204  Progress: 77.90%  Words/thread/sec: 10.89k  Alpha: 0.011049  Progress: 78.17%  Words/thread/sec: 10.91k  Alpha: 0.010915  Progress: 78.44%  Words/thread/sec: 10.87k  Alpha: 0.010782  Progress: 78.75%  Words/thread/sec: 10.88k  Alpha: 0.010625  Progress: 79.02%  Words/thread/sec: 10.90k  Alpha: 0.010491  Progress: 79.33%  Words/thread/sec: 10.90k  Alpha: 0.010333  Progress: 79.60%  Words/thread/sec: 10.88k  Alpha: 0.010200  Progress: 80.60%  Words/thread/sec: 10.87k  Alpha: 0.009698  Progress: 80.87%  Words/thread/sec: 10.90k  Alpha: 0.009563  Progress: 81.23%  Words/thread/sec: 10.91k  Alpha: 0.009385  Progress: 81.53%  Words/thread/sec: 10.93k  Alpha: 0.009233  Progress: 81.80%  Words/thread/sec: 10.89k  Alpha: 0.009098  Progress: 82.10%  Words/thread/sec: 10.89k  Alpha: 0.008948  Progress: 82.37%  Words/thread/sec: 10.92k  Alpha: 0.008815  Progress: 82.68%  Words/thread/sec: 10.91k  Alpha: 0.008661  Progress: 82.95%  Words/thread/sec: 10.89k  Alpha: 0.008526  Progress: 83.22%  Words/thread/sec: 10.90k  Alpha: 0.008391  Progress: 83.49%  Words/thread/sec: 10.92k  Alpha: 0.008255  Progress: 83.76%  Words/thread/sec: 10.91k  Alpha: 0.008118  Progress: 84.04%  Words/thread/sec: 10.90k  Alpha: 0.007980  Progress: 84.31%  Words/thread/sec: 10.90k  Alpha: 0.007847  Progress: 84.62%  Words/thread/sec: 10.90k  Alpha: 0.007691  Progress: 84.88%  Words/thread/sec: 10.91k  Alpha: 0.007558  Progress: 85.20%  Words/thread/sec: 10.88k  Alpha: 0.007402  Progress: 85.52%  Words/thread/sec: 10.89k  Alpha: 0.007240  Progress: 85.79%  Words/thread/sec: 10.91k  Alpha: 0.007105  Progress: 86.11%  Words/thread/sec: 10.91k  Alpha: 0.006946  Progress: 86.94%  Words/thread/sec: 10.90k  Alpha: 0.006532  Progress: 87.43%  Words/thread/sec: 10.89k  Alpha: 0.006285  Progress: 87.95%  Words/thread/sec: 10.91k  Alpha: 0.006025  Progress: 88.26%  Words/thread/sec: 10.93k  Alpha: 0.005870  Progress: 88.53%  Words/thread/sec: 10.89k  Alpha: 0.005736  Progress: 88.83%  Words/thread/sec: 10.90k  Alpha: 0.005584  Progress: 89.10%  Words/thread/sec: 10.92k  Alpha: 0.005450  Progress: 89.41%  Words/thread/sec: 10.91k  Alpha: 0.005294  Progress: 89.68%  Words/thread/sec: 10.90k  Alpha: 0.005161  Progress: 89.94%  Words/thread/sec: 10.90k  Alpha: 0.005029  Progress: 90.22%  Words/thread/sec: 10.92k  Alpha: 0.004892  Progress: 90.49%  Words/thread/sec: 10.91k  Alpha: 0.004755  Progress: 90.77%  Words/thread/sec: 10.90k  Alpha: 0.004617  Progress: 91.03%  Words/thread/sec: 10.90k  Alpha: 0.004484  Progress: 91.34%  Words/thread/sec: 10.90k  Alpha: 0.004328  Progress: 91.61%  Words/thread/sec: 10.92k  Alpha: 0.004195  Progress: 91.92%  Words/thread/sec: 10.89k  Alpha: 0.004040  Progress: 92.18%  Words/thread/sec: 10.91k  Alpha: 0.003908  Progress: 92.46%  Words/thread/sec: 10.91k  Alpha: 0.003772  Progress: 92.77%  Words/thread/sec: 10.90k  Alpha: 0.003613  Progress: 93.04%  Words/thread/sec: 10.88k  Alpha: 0.003481  Progress: 94.05%  Words/thread/sec: 10.88k  Alpha: 0.002976  Progress: 94.32%  Words/thread/sec: 10.91k  Alpha: 0.002840  Progress: 94.68%  Words/thread/sec: 10.91k  Alpha: 0.002662  Progress: 94.98%  Words/thread/sec: 10.93k  Alpha: 0.002508  Progress: 95.26%  Words/thread/sec: 10.90k  Alpha: 0.002372  Progress: 95.56%  Words/thread/sec: 10.90k  Alpha: 0.002220  Progress: 95.83%  Words/thread/sec: 10.92k  Alpha: 0.002086  Progress: 96.14%  Words/thread/sec: 10.91k  Alpha: 0.001930  Progress: 96.46%  Words/thread/sec: 10.89k  Alpha: 0.001770  Progress: 96.72%  Words/thread/sec: 10.91k  Alpha: 0.001638  Progress: 97.00%  Words/thread/sec: 10.93k  Alpha: 0.001500  Progress: 97.27%  Words/thread/sec: 10.92k  Alpha: 0.001363  Progress: 97.54%  Words/thread/sec: 10.89k  Alpha: 0.001228  Progress: 97.81%  Words/thread/sec: 10.91k  Alpha: 0.001095  Progress: 98.12%  Words/thread/sec: 10.91k  Alpha: 0.000939  Progress: 98.39%  Words/thread/sec: 10.92k  Alpha: 0.000806  Progress: 98.69%  Words/thread/sec: 10.87k  Alpha: 0.000653  Progress: 99.02%  Words/thread/sec: 10.90k  Alpha: 0.000492  Progress: 99.29%  Words/thread/sec: 10.92k  Alpha: 0.000357  Progress: 99.61%  Words/thread/sec: 10.91k  Alpha: 0.000197  Progress: 100.39%  Words/thread/sec: 10.92k  # started on Wed Mar  3 04:46:51 2021


 Performance counter stats for 'system wide':

S0-C0           1          91,805.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             25,890      context-switches          #    0.282 K/sec                  
S0-C0           1                291      cpu-migrations            #    0.003 K/sec                  
S0-C0           1                  7      page-faults               #    0.000 K/sec                  
S0-C0           1      2,970,129,972      cycles                    #    0.032 GHz                    
S0-C0           1      2,288,029,028      instructions              #    0.77  insn per cycle         
S0-C0           1      4,173,605,852      branches                  #   45.461 M/sec                  
S0-C0           1         67,214,593      branch-misses             #    1.61% of all branches        
S0-C1           1          91,805.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,283      context-switches          #    0.058 K/sec                  
S0-C1           1                254      cpu-migrations            #    0.003 K/sec                  
S0-C1           1            130,133      page-faults               #    0.001 M/sec                  
S0-C1           1      2,099,950,516      cycles                    #    0.023 GHz                    
S0-C1           1      4,013,656,803      instructions              #    1.91  insn per cycle         
S0-C1           1      4,267,570,432      branches                  #   46.485 M/sec                  
S0-C1           1         66,643,989      branch-misses             #    1.56% of all branches        
S0-C2           1          91,805.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             10,009      context-switches          #    0.109 K/sec                  
S0-C2           1                255      cpu-migrations            #    0.003 K/sec                  
S0-C2           1                  7      page-faults               #    0.000 K/sec                  
S0-C2           1      2,044,476,131      cycles                    #    0.022 GHz                    
S0-C2           1      2,087,394,541      instructions              #    1.02  insn per cycle         
S0-C2           1      4,145,944,563      branches                  #   45.160 M/sec                  
S0-C2           1         61,835,865      branch-misses             #    1.49% of all branches        
S0-C3           1          91,805.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,288      context-switches          #    0.058 K/sec                  
S0-C3           1                270      cpu-migrations            #    0.003 K/sec                  
S0-C3           1                  7      page-faults               #    0.000 K/sec                  
S0-C3           1      1,838,049,235      cycles                    #    0.020 GHz                    
S0-C3           1      2,040,301,608      instructions              #    1.11  insn per cycle         
S0-C3           1      4,140,660,733      branches                  #   45.102 M/sec                  
S0-C3           1         60,544,940      branch-misses             #    1.46% of all branches        

      91.807144197 seconds time elapsed

perf stat -o ../data/word2vec_perf_output_no_branch_1614746811771708880.txt --per-core -a taskset -c 0-3 ./word2vec_no-guess-branch-probability -train ../data/text8_3.3mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_3.3mb
100K200K300K400K500KVocab size: 9546
Words in train file: 524166
Alpha: 0.050000  Progress: 0.15%  Words/thread/sec: 6.30k  Alpha: 0.049927  Progress: 0.28%  Words/thread/sec: 12.18k  Alpha: 0.049927  Progress: 0.42%  Words/thread/sec: 18.07k  Alpha: 0.049789  Progress: 0.56%  Words/thread/sec: 24.07k  Alpha: 0.049719  Progress: 0.71%  Words/thread/sec: 14.04k  Alpha: 0.049643  Progress: 0.86%  Words/thread/sec: 16.86k  Alpha: 0.049570  Progress: 1.00%  Words/thread/sec: 19.57k  Alpha: 0.049499  Progress: 1.15%  Words/thread/sec: 22.47k  Alpha: 0.049424  Progress: 1.28%  Words/thread/sec: 17.20k  Alpha: 0.049361  Progress: 1.42%  Words/thread/sec: 18.06k  Alpha: 0.049290  Progress: 1.57%  Words/thread/sec: 19.91k  Alpha: 0.049215  Progress: 1.72%  Words/thread/sec: 21.73k  Alpha: 0.049142  Progress: 1.87%  Words/thread/sec: 18.27k  Alpha: 0.049067  Progress: 2.02%  Words/thread/sec: 18.90k  Alpha: 0.048992  Progress: 2.16%  Words/thread/sec: 20.23k  Alpha: 0.048921  Progress: 2.31%  Words/thread/sec: 21.59k  Alpha: 0.048847  Progress: 2.45%  Words/thread/sec: 18.85k  Alpha: 0.048777  Progress: 2.59%  Words/thread/sec: 19.29k  Alpha: 0.048705  Progress: 2.74%  Words/thread/sec: 20.36k  Alpha: 0.048632  Progress: 2.88%  Words/thread/sec: 21.42k  Alpha: 0.048560  Progress: 3.03%  Words/thread/sec: 19.22k  Alpha: 0.048486  Progress: 3.17%  Words/thread/sec: 19.56k  Alpha: 0.048416  Progress: 3.31%  Words/thread/sec: 20.43k  Alpha: 0.048345  Progress: 3.46%  Words/thread/sec: 21.29k  Alpha: 0.048269  Progress: 3.60%  Words/thread/sec: 19.31k  Alpha: 0.048199  Progress: 3.75%  Words/thread/sec: 19.58k  Alpha: 0.048199  Progress: 3.89%  Words/thread/sec: 20.30k  Alpha: 0.048057  Progress: 4.03%  Words/thread/sec: 21.02k  Alpha: 0.047983  Progress: 4.19%  Words/thread/sec: 19.37k  Alpha: 0.047907  Progress: 4.33%  Words/thread/sec: 19.62k  Alpha: 0.047835  Progress: 4.48%  Words/thread/sec: 20.29k  Alpha: 0.047760  Progress: 4.63%  Words/thread/sec: 20.89k  Alpha: 0.047687  Progress: 4.77%  Words/thread/sec: 19.57k  Alpha: 0.047615  Progress: 4.92%  Words/thread/sec: 19.79k  Alpha: 0.047542  Progress: 5.06%  Words/thread/sec: 20.35k  Alpha: 0.047470  Progress: 5.21%  Words/thread/sec: 20.89k  Alpha: 0.047394  Progress: 5.36%  Words/thread/sec: 20.07k  Alpha: 0.047321  Progress: 5.51%  Words/thread/sec: 19.91k  Alpha: 0.047246  Progress: 5.65%  Words/thread/sec: 20.44k  Alpha: 0.047173  Progress: 5.80%  Words/thread/sec: 20.87k  Alpha: 0.047101  Progress: 5.94%  Words/thread/sec: 20.36k  Alpha: 0.047032  Progress: 6.08%  Words/thread/sec: 19.87k  Alpha: 0.046960  Progress: 6.23%  Words/thread/sec: 20.32k  Alpha: 0.046887  Progress: 6.37%  Words/thread/sec: 20.70k  Alpha: 0.046816  Progress: 6.84%  Words/thread/sec: 20.43k  Alpha: 0.046578  Progress: 6.99%  Words/thread/sec: 20.29k  Alpha: 0.046504  Progress: 7.13%  Words/thread/sec: 20.64k  Alpha: 0.046434  Progress: 7.27%  Words/thread/sec: 20.85k  Alpha: 0.046365  Progress: 7.42%  Words/thread/sec: 20.44k  Alpha: 0.046290  Progress: 7.57%  Words/thread/sec: 20.34k  Alpha: 0.046215  Progress: 7.71%  Words/thread/sec: 20.66k  Alpha: 0.046145  Progress: 7.86%  Words/thread/sec: 20.86k  Alpha: 0.046072  Progress: 8.01%  Words/thread/sec: 20.43k  Alpha: 0.045997  Progress: 8.15%  Words/thread/sec: 20.29k  Alpha: 0.045927  Progress: 8.29%  Words/thread/sec: 20.58k  Alpha: 0.045854  Progress: 8.44%  Words/thread/sec: 20.79k  Alpha: 0.045780  Progress: 8.59%  Words/thread/sec: 20.38k  Alpha: 0.045706  Progress: 8.74%  Words/thread/sec: 20.27k  Alpha: 0.045631  Progress: 8.89%  Words/thread/sec: 20.57k  Alpha: 0.045557  Progress: 9.03%  Words/thread/sec: 20.77k  Alpha: 0.045486  Progress: 9.17%  Words/thread/sec: 20.40k  Alpha: 0.045414  Progress: 9.31%  Words/thread/sec: 20.31k  Alpha: 0.045343  Progress: 9.46%  Words/thread/sec: 20.55k  Alpha: 0.045271  Progress: 9.60%  Words/thread/sec: 20.76k  Alpha: 0.045198  Progress: 9.75%  Words/thread/sec: 20.41k  Alpha: 0.045126  Progress: 9.89%  Words/thread/sec: 20.31k  Alpha: 0.045055  Progress: 10.04%  Words/thread/sec: 20.55k  Alpha: 0.044979  Progress: 10.18%  Words/thread/sec: 20.74k  Alpha: 0.044909  Progress: 10.33%  Words/thread/sec: 20.36k  Alpha: 0.044837  Progress: 10.47%  Words/thread/sec: 20.26k  Alpha: 0.044764  Progress: 10.62%  Words/thread/sec: 20.49k  Alpha: 0.044690  Progress: 10.76%  Words/thread/sec: 20.66k  Alpha: 0.044621  Progress: 10.89%  Words/thread/sec: 20.46k  Alpha: 0.044557  Progress: 11.03%  Words/thread/sec: 20.23k  Alpha: 0.044483  Progress: 11.18%  Words/thread/sec: 20.44k  Alpha: 0.044410  Progress: 11.33%  Words/thread/sec: 20.64k  Alpha: 0.044337  Progress: 11.47%  Words/thread/sec: 20.49k  Alpha: 0.044265  Progress: 11.62%  Words/thread/sec: 20.27k  Alpha: 0.044192  Progress: 11.77%  Words/thread/sec: 20.46k  Alpha: 0.044116  Progress: 11.91%  Words/thread/sec: 20.66k  Alpha: 0.044044  Progress: 12.06%  Words/thread/sec: 20.67k  Alpha: 0.043971  Progress: 12.20%  Words/thread/sec: 20.27k  Alpha: 0.043898  Progress: 12.35%  Words/thread/sec: 20.44k  Alpha: 0.043826  Progress: 12.50%  Words/thread/sec: 20.63k  Alpha: 0.043752  Progress: 12.64%  Words/thread/sec: 20.78k  Alpha: 0.043682  Progress: 12.88%  Words/thread/sec: 20.38k  Alpha: 0.043561  Progress: 13.02%  Words/thread/sec: 20.54k  Alpha: 0.043491  Progress: 13.16%  Words/thread/sec: 20.72k  Alpha: 0.043419  Progress: 13.44%  Words/thread/sec: 20.64k  Alpha: 0.043278  Progress: 13.69%  Words/thread/sec: 20.47k  Alpha: 0.043154  Progress: 13.83%  Words/thread/sec: 20.61k  Alpha: 0.043084  Progress: 13.97%  Words/thread/sec: 20.64k  Alpha: 0.043016  Progress: 14.12%  Words/thread/sec: 20.79k  Alpha: 0.042942  Progress: 14.27%  Words/thread/sec: 20.45k  Alpha: 0.042866  Progress: 14.41%  Words/thread/sec: 20.58k  Alpha: 0.042796  Progress: 14.55%  Words/thread/sec: 20.63k  Alpha: 0.042723  Progress: 14.70%  Words/thread/sec: 20.76k  Alpha: 0.042648  Progress: 14.85%  Words/thread/sec: 20.42k  Alpha: 0.042577  Progress: 14.99%  Words/thread/sec: 20.55k  Alpha: 0.042504  Progress: 15.14%  Words/thread/sec: 20.59k  Alpha: 0.042429  Progress: 15.29%  Words/thread/sec: 20.72k  Alpha: 0.042355  Progress: 15.44%  Words/thread/sec: 20.44k  Alpha: 0.042280  Progress: 15.59%  Words/thread/sec: 20.56k  Alpha: 0.042206  Progress: 15.73%  Words/thread/sec: 20.61k  Alpha: 0.042135  Progress: 15.87%  Words/thread/sec: 20.73k  Alpha: 0.042064  Progress: 16.01%  Words/thread/sec: 20.45k  Alpha: 0.041993  Progress: 16.16%  Words/thread/sec: 20.56k  Alpha: 0.041921  Progress: 16.31%  Words/thread/sec: 20.61k  Alpha: 0.041847  Progress: 16.45%  Words/thread/sec: 20.72k  Alpha: 0.041775  Progress: 16.59%  Words/thread/sec: 20.43k  Alpha: 0.041704  Progress: 16.74%  Words/thread/sec: 20.53k  Alpha: 0.041629  Progress: 16.89%  Words/thread/sec: 20.57k  Alpha: 0.041557  Progress: 17.03%  Words/thread/sec: 20.69k  Alpha: 0.041486  Progress: 17.17%  Words/thread/sec: 20.40k  Alpha: 0.041413  Progress: 17.32%  Words/thread/sec: 20.50k  Alpha: 0.041339  Progress: 17.45%  Words/thread/sec: 20.59k  Alpha: 0.041275  Progress: 17.59%  Words/thread/sec: 20.70k  Alpha: 0.041206  Progress: 17.74%  Words/thread/sec: 20.40k  Alpha: 0.041131  Progress: 17.88%  Words/thread/sec: 20.49k  Alpha: 0.041059  Progress: 18.03%  Words/thread/sec: 20.60k  Alpha: 0.040987  Progress: 18.17%  Words/thread/sec: 20.71k  Alpha: 0.040913  Progress: 18.32%  Words/thread/sec: 20.40k  Alpha: 0.040841  Progress: 18.47%  Words/thread/sec: 20.54k  Alpha: 0.040767  Progress: 18.62%  Words/thread/sec: 20.65k  Alpha: 0.040692  Progress: 18.76%  Words/thread/sec: 20.71k  Alpha: 0.040620  Progress: 18.90%  Words/thread/sec: 20.46k  Alpha: 0.040551  Progress: 19.04%  Words/thread/sec: 20.53k  Alpha: 0.040478  Progress: 19.19%  Words/thread/sec: 20.61k  Alpha: 0.040405  Progress: 19.34%  Words/thread/sec: 20.67k  Alpha: 0.040331  Progress: 19.58%  Words/thread/sec: 20.46k  Alpha: 0.040211  Progress: 19.72%  Words/thread/sec: 20.53k  Alpha: 0.040141  Progress: 19.86%  Words/thread/sec: 20.58k  Alpha: 0.040069  Progress: 20.00%  Words/thread/sec: 20.66k  Alpha: 0.040000  Progress: 20.39%  Words/thread/sec: 20.46k  Alpha: 0.039804  Progress: 20.54%  Words/thread/sec: 20.59k  Alpha: 0.039730  Progress: 20.68%  Words/thread/sec: 20.68k  Alpha: 0.039659  Progress: 20.82%  Words/thread/sec: 20.64k  Alpha: 0.039591  Progress: 20.97%  Words/thread/sec: 20.47k  Alpha: 0.039515  Progress: 21.12%  Words/thread/sec: 20.59k  Alpha: 0.039440  Progress: 21.26%  Words/thread/sec: 20.69k  Alpha: 0.039369  Progress: 21.41%  Words/thread/sec: 20.66k  Alpha: 0.039297  Progress: 21.55%  Words/thread/sec: 20.48k  Alpha: 0.039227  Progress: 21.69%  Words/thread/sec: 20.59k  Alpha: 0.039153  Progress: 21.84%  Words/thread/sec: 20.68k  Alpha: 0.039080  Progress: 21.99%  Words/thread/sec: 20.65k  Alpha: 0.039005  Progress: 22.14%  Words/thread/sec: 20.46k  Alpha: 0.038931  Progress: 22.28%  Words/thread/sec: 20.56k  Alpha: 0.038859  Progress: 22.43%  Words/thread/sec: 20.66k  Alpha: 0.038785  Progress: 22.57%  Words/thread/sec: 20.62k  Alpha: 0.038715  Progress: 22.71%  Words/thread/sec: 20.44k  Alpha: 0.038643  Progress: 22.86%  Words/thread/sec: 20.53k  Alpha: 0.038571  Progress: 23.00%  Words/thread/sec: 20.63k  Alpha: 0.038499  Progress: 23.15%  Words/thread/sec: 20.59k  Alpha: 0.038426  Progress: 23.29%  Words/thread/sec: 20.41k  Alpha: 0.038355  Progress: 23.43%  Words/thread/sec: 20.50k  Alpha: 0.038283  Progress: 23.58%  Words/thread/sec: 20.60k  Alpha: 0.038208  Progress: 23.73%  Words/thread/sec: 20.57k  Alpha: 0.038137  Progress: 23.85%  Words/thread/sec: 20.42k  Alpha: 0.038073  Progress: 24.00%  Words/thread/sec: 20.50k  Alpha: 0.038001  Progress: 24.15%  Words/thread/sec: 20.56k  Alpha: 0.037926  Progress: 24.29%  Words/thread/sec: 20.53k  Alpha: 0.037857  Progress: 24.43%  Words/thread/sec: 20.40k  Alpha: 0.037785  Progress: 24.58%  Words/thread/sec: 20.48k  Alpha: 0.037711  Progress: 24.72%  Words/thread/sec: 20.52k  Alpha: 0.037638  Progress: 24.87%  Words/thread/sec: 20.49k  Alpha: 0.037565  Progress: 25.02%  Words/thread/sec: 20.43k  Alpha: 0.037492  Progress: 25.16%  Words/thread/sec: 20.41k  Alpha: 0.037420  Progress: 25.31%  Words/thread/sec: 20.45k  Alpha: 0.037344  Progress: 25.46%  Words/thread/sec: 20.42k  Alpha: 0.037272  Progress: 25.59%  Words/thread/sec: 20.44k  Alpha: 0.037203  Progress: 25.74%  Words/thread/sec: 20.35k  Alpha: 0.037130  Progress: 25.89%  Words/thread/sec: 20.40k  Alpha: 0.037057  Progress: 26.13%  Words/thread/sec: 20.46k  Alpha: 0.036936  Progress: 26.27%  Words/thread/sec: 20.30k  Alpha: 0.036863  Progress: 26.41%  Words/thread/sec: 20.36k  Alpha: 0.036795  Progress: 26.55%  Words/thread/sec: 20.45k  Alpha: 0.036725  Progress: 26.69%  Words/thread/sec: 20.43k  Alpha: 0.036654  Progress: 27.09%  Words/thread/sec: 20.41k  Alpha: 0.036457  Progress: 27.23%  Words/thread/sec: 20.42k  Alpha: 0.036383  Progress: 27.38%  Words/thread/sec: 20.46k  Alpha: 0.036312  Progress: 27.51%  Words/thread/sec: 20.37k  Alpha: 0.036244  Progress: 27.66%  Words/thread/sec: 20.39k  Alpha: 0.036169  Progress: 27.81%  Words/thread/sec: 20.40k  Alpha: 0.036093  Progress: 27.96%  Words/thread/sec: 20.44k  Alpha: 0.036022  Progress: 28.10%  Words/thread/sec: 20.36k  Alpha: 0.035949  Progress: 28.25%  Words/thread/sec: 20.38k  Alpha: 0.035875  Progress: 28.39%  Words/thread/sec: 20.39k  Alpha: 0.035804  Progress: 28.54%  Words/thread/sec: 20.42k  Alpha: 0.035731  Progress: 28.69%  Words/thread/sec: 20.35k  Alpha: 0.035655  Progress: 28.83%  Words/thread/sec: 20.37k  Alpha: 0.035583  Progress: 28.98%  Words/thread/sec: 20.38k  Alpha: 0.035509  Progress: 29.13%  Words/thread/sec: 20.41k  Alpha: 0.035434  Progress: 29.27%  Words/thread/sec: 20.34k  Alpha: 0.035363  Progress: 29.42%  Words/thread/sec: 20.35k  Alpha: 0.035291  Progress: 29.56%  Words/thread/sec: 20.36k  Alpha: 0.035220  Progress: 29.70%  Words/thread/sec: 20.39k  Alpha: 0.035148  Progress: 29.85%  Words/thread/sec: 20.31k  Alpha: 0.035074  Progress: 29.99%  Words/thread/sec: 20.31k  Alpha: 0.035003  Progress: 30.14%  Words/thread/sec: 20.32k  Alpha: 0.034932  Progress: 30.29%  Words/thread/sec: 20.34k  Alpha: 0.034857  Progress: 30.43%  Words/thread/sec: 20.25k  Alpha: 0.034786  Progress: 30.56%  Words/thread/sec: 20.31k  Alpha: 0.034722  Progress: 30.70%  Words/thread/sec: 20.25k  Alpha: 0.034650  Progress: 30.85%  Words/thread/sec: 20.28k  Alpha: 0.034576  Progress: 30.99%  Words/thread/sec: 20.20k  Alpha: 0.034506  Progress: 31.13%  Words/thread/sec: 20.28k  Alpha: 0.034434  Progress: 31.28%  Words/thread/sec: 20.24k  Alpha: 0.034359  Progress: 31.43%  Words/thread/sec: 20.26k  Alpha: 0.034287  Progress: 31.57%  Words/thread/sec: 20.24k  Alpha: 0.034214  Progress: 31.72%  Words/thread/sec: 20.29k  Alpha: 0.034141  Progress: 31.86%  Words/thread/sec: 20.23k  Alpha: 0.034068  Progress: 32.01%  Words/thread/sec: 20.25k  Alpha: 0.033993  Progress: 32.15%  Words/thread/sec: 20.29k  Alpha: 0.033924  Progress: 32.30%  Words/thread/sec: 20.28k  Alpha: 0.033852  Progress: 32.53%  Words/thread/sec: 20.27k  Alpha: 0.033733  Progress: 32.68%  Words/thread/sec: 20.30k  Alpha: 0.033660  Progress: 32.81%  Words/thread/sec: 20.29k  Alpha: 0.033596  Progress: 32.95%  Words/thread/sec: 20.23k  Alpha: 0.033527  Progress: 33.09%  Words/thread/sec: 20.25k  Alpha: 0.033454  Progress: 33.23%  Words/thread/sec: 20.26k  Alpha: 0.033383  Progress: 33.38%  Words/thread/sec: 20.27k  Alpha: 0.033312  Progress: 33.67%  Words/thread/sec: 20.30k  Alpha: 0.033166  Progress: 33.94%  Words/thread/sec: 20.27k  Alpha: 0.033031  Progress: 34.08%  Words/thread/sec: 20.27k  Alpha: 0.032960  Progress: 34.23%  Words/thread/sec: 20.25k  Alpha: 0.032884  Progress: 34.37%  Words/thread/sec: 20.23k  Alpha: 0.032816  Progress: 34.52%  Words/thread/sec: 20.22k  Alpha: 0.032741  Progress: 34.66%  Words/thread/sec: 20.22k  Alpha: 0.032671  Progress: 34.81%  Words/thread/sec: 20.20k  Alpha: 0.032597  Progress: 34.95%  Words/thread/sec: 20.20k  Alpha: 0.032524  Progress: 35.09%  Words/thread/sec: 20.19k  Alpha: 0.032454  Progress: 35.24%  Words/thread/sec: 20.20k  Alpha: 0.032380  Progress: 35.38%  Words/thread/sec: 20.19k  Alpha: 0.032309  Progress: 35.53%  Words/thread/sec: 20.19k  Alpha: 0.032234  Progress: 35.68%  Words/thread/sec: 20.19k  Alpha: 0.032159  Progress: 35.83%  Words/thread/sec: 20.20k  Alpha: 0.032085  Progress: 35.97%  Words/thread/sec: 20.18k  Alpha: 0.032013  Progress: 36.12%  Words/thread/sec: 20.16k  Alpha: 0.031942  Progress: 36.26%  Words/thread/sec: 20.15k  Alpha: 0.031871  Progress: 36.40%  Words/thread/sec: 20.15k  Alpha: 0.031799  Progress: 36.54%  Words/thread/sec: 20.13k  Alpha: 0.031728  Progress: 36.69%  Words/thread/sec: 20.11k  Alpha: 0.031654  Progress: 36.83%  Words/thread/sec: 20.11k  Alpha: 0.031583  Progress: 36.98%  Words/thread/sec: 20.11k  Alpha: 0.031508  Progress: 37.11%  Words/thread/sec: 20.15k  Alpha: 0.031444  Progress: 37.25%  Words/thread/sec: 20.10k  Alpha: 0.031373  Progress: 37.40%  Words/thread/sec: 20.09k  Alpha: 0.031301  Progress: 37.55%  Words/thread/sec: 20.10k  Alpha: 0.031227  Progress: 37.69%  Words/thread/sec: 20.15k  Alpha: 0.031154  Progress: 37.83%  Words/thread/sec: 20.08k  Alpha: 0.031085  Progress: 37.98%  Words/thread/sec: 20.07k  Alpha: 0.031011  Progress: 38.12%  Words/thread/sec: 20.09k  Alpha: 0.030938  Progress: 38.27%  Words/thread/sec: 20.14k  Alpha: 0.030866  Progress: 38.41%  Words/thread/sec: 20.04k  Alpha: 0.030793  Progress: 38.56%  Words/thread/sec: 20.03k  Alpha: 0.030721  Progress: 38.70%  Words/thread/sec: 20.10k  Alpha: 0.030651  Progress: 38.85%  Words/thread/sec: 20.10k  Alpha: 0.030575  Progress: 39.09%  Words/thread/sec: 20.07k  Alpha: 0.030456  Progress: 39.23%  Words/thread/sec: 20.07k  Alpha: 0.030383  Progress: 39.38%  Words/thread/sec: 20.06k  Alpha: 0.030311  Progress: 39.52%  Words/thread/sec: 20.06k  Alpha: 0.030242  Progress: 39.66%  Words/thread/sec: 20.06k  Alpha: 0.030168  Progress: 39.81%  Words/thread/sec: 20.06k  Alpha: 0.030094  Progress: 39.95%  Words/thread/sec: 20.06k  Alpha: 0.030024  Progress: 40.17%  Words/thread/sec: 20.09k  Alpha: 0.029914  Progress: 40.31%  Words/thread/sec: 20.09k  Alpha: 0.029843  Progress: 40.51%  Words/thread/sec: 20.01k  Alpha: 0.029743  Progress: 40.66%  Words/thread/sec: 20.08k  Alpha: 0.029669  Progress: 40.90%  Words/thread/sec: 20.13k  Alpha: 0.029549  Progress: 41.04%  Words/thread/sec: 19.99k  Alpha: 0.029481  Progress: 41.34%  Words/thread/sec: 20.11k  Alpha: 0.029481  Progress: 41.34%  Words/thread/sec: 20.11k  Alpha: 0.029330  Progress: 41.48%  Words/thread/sec: 20.10k  Alpha: 0.029260  Progress: 41.63%  Words/thread/sec: 19.96k  Alpha: 0.029186  Progress: 41.77%  Words/thread/sec: 20.00k  Alpha: 0.029116  Progress: 41.91%  Words/thread/sec: 20.06k  Alpha: 0.029045  Progress: 42.06%  Words/thread/sec: 20.06k  Alpha: 0.028972  Progress: 42.20%  Words/thread/sec: 19.96k  Alpha: 0.028898  Progress: 42.35%  Words/thread/sec: 19.99k  Alpha: 0.028824  Progress: 42.50%  Words/thread/sec: 20.06k  Alpha: 0.028750  Progress: 42.65%  Words/thread/sec: 20.06k  Alpha: 0.028676  Progress: 42.79%  Words/thread/sec: 19.95k  Alpha: 0.028605  Progress: 42.93%  Words/thread/sec: 19.98k  Alpha: 0.028534  Progress: 43.08%  Words/thread/sec: 20.05k  Alpha: 0.028462  Progress: 43.22%  Words/thread/sec: 20.03k  Alpha: 0.028391  Progress: 43.36%  Words/thread/sec: 19.91k  Alpha: 0.028318  Progress: 43.51%  Words/thread/sec: 19.95k  Alpha: 0.028247  Progress: 43.66%  Words/thread/sec: 20.01k  Alpha: 0.028171  Progress: 43.81%  Words/thread/sec: 20.00k  Alpha: 0.028096  Progress: 43.95%  Words/thread/sec: 19.90k  Alpha: 0.028024  Progress: 44.10%  Words/thread/sec: 19.94k  Alpha: 0.027952  Progress: 44.24%  Words/thread/sec: 20.00k  Alpha: 0.027880  Progress: 44.39%  Words/thread/sec: 20.00k  Alpha: 0.027805  Progress: 44.54%  Words/thread/sec: 19.91k  Alpha: 0.027732  Progress: 44.67%  Words/thread/sec: 19.96k  Alpha: 0.027663  Progress: 44.82%  Words/thread/sec: 20.00k  Alpha: 0.027589  Progress: 44.97%  Words/thread/sec: 19.98k  Alpha: 0.027516  Progress: 45.11%  Words/thread/sec: 19.92k  Alpha: 0.027447  Progress: 45.25%  Words/thread/sec: 19.93k  Alpha: 0.027373  Progress: 45.40%  Words/thread/sec: 19.96k  Alpha: 0.027301  Progress: 45.55%  Words/thread/sec: 19.95k  Alpha: 0.027225  Progress: 45.79%  Words/thread/sec: 19.89k  Alpha: 0.027106  Progress: 45.93%  Words/thread/sec: 19.92k  Alpha: 0.027034  Progress: 46.07%  Words/thread/sec: 19.93k  Alpha: 0.026965  Progress: 46.21%  Words/thread/sec: 19.97k  Alpha: 0.026893  Progress: 46.36%  Words/thread/sec: 19.88k  Alpha: 0.026818  Progress: 46.51%  Words/thread/sec: 19.92k  Alpha: 0.026744  Progress: 46.66%  Words/thread/sec: 19.93k  Alpha: 0.026670  Progress: 46.80%  Words/thread/sec: 19.96k  Alpha: 0.026600  Progress: 47.09%  Words/thread/sec: 19.93k  Alpha: 0.026457  Progress: 47.24%  Words/thread/sec: 19.90k  Alpha: 0.026381  Progress: 47.39%  Words/thread/sec: 19.93k  Alpha: 0.026307  Progress: 47.63%  Words/thread/sec: 19.95k  Alpha: 0.026186  Progress: 47.78%  Words/thread/sec: 19.86k  Alpha: 0.026112  Progress: 47.93%  Words/thread/sec: 19.89k  Alpha: 0.026037  Progress: 48.06%  Words/thread/sec: 19.94k  Alpha: 0.025968  Progress: 48.21%  Words/thread/sec: 19.93k  Alpha: 0.025897  Progress: 48.35%  Words/thread/sec: 19.86k  Alpha: 0.025826  Progress: 48.49%  Words/thread/sec: 19.88k  Alpha: 0.025755  Progress: 48.63%  Words/thread/sec: 19.93k  Alpha: 0.025683  Progress: 48.78%  Words/thread/sec: 19.93k  Alpha: 0.025611  Progress: 48.92%  Words/thread/sec: 19.84k  Alpha: 0.025538  Progress: 49.07%  Words/thread/sec: 19.87k  Alpha: 0.025463  Progress: 49.22%  Words/thread/sec: 19.92k  Alpha: 0.025389  Progress: 49.37%  Words/thread/sec: 19.91k  Alpha: 0.025315  Progress: 49.51%  Words/thread/sec: 19.82k  Alpha: 0.025244  Progress: 49.66%  Words/thread/sec: 19.84k  Alpha: 0.025172  Progress: 49.80%  Words/thread/sec: 19.89k  Alpha: 0.025101  Progress: 49.94%  Words/thread/sec: 19.88k  Alpha: 0.025028  Progress: 50.10%  Words/thread/sec: 19.81k  Alpha: 0.024952  Progress: 50.24%  Words/thread/sec: 19.84k  Alpha: 0.024881  Progress: 50.38%  Words/thread/sec: 19.89k  Alpha: 0.024808  Progress: 50.53%  Words/thread/sec: 19.88k  Alpha: 0.024733  Progress: 50.68%  Words/thread/sec: 19.81k  Alpha: 0.024660  Progress: 50.83%  Words/thread/sec: 19.83k  Alpha: 0.024587  Progress: 50.97%  Words/thread/sec: 19.88k  Alpha: 0.024516  Progress: 51.12%  Words/thread/sec: 19.86k  Alpha: 0.024441  Progress: 51.27%  Words/thread/sec: 19.83k  Alpha: 0.024366  Progress: 51.42%  Words/thread/sec: 19.81k  Alpha: 0.024291  Progress: 51.56%  Words/thread/sec: 19.86k  Alpha: 0.024222  Progress: 51.70%  Words/thread/sec: 19.84k  Alpha: 0.024150  Progress: 51.83%  Words/thread/sec: 19.84k  Alpha: 0.024084  Progress: 51.98%  Words/thread/sec: 19.79k  Alpha: 0.024012  Progress: 52.12%  Words/thread/sec: 19.84k  Alpha: 0.023939  Progress: 52.35%  Words/thread/sec: 19.86k  Alpha: 0.023827  Progress: 52.49%  Words/thread/sec: 19.77k  Alpha: 0.023754  Progress: 52.64%  Words/thread/sec: 19.81k  Alpha: 0.023681  Progress: 52.78%  Words/thread/sec: 19.86k  Alpha: 0.023612  Progress: 52.92%  Words/thread/sec: 19.84k  Alpha: 0.023540  Progress: 53.07%  Words/thread/sec: 19.74k  Alpha: 0.023467  Progress: 53.21%  Words/thread/sec: 19.79k  Alpha: 0.023393  Progress: 53.36%  Words/thread/sec: 19.83k  Alpha: 0.023318  Progress: 53.50%  Words/thread/sec: 19.82k  Alpha: 0.023249  Progress: 53.79%  Words/thread/sec: 19.77k  Alpha: 0.023105  Progress: 53.94%  Words/thread/sec: 19.82k  Alpha: 0.023030  Progress: 54.09%  Words/thread/sec: 19.81k  Alpha: 0.022956  Progress: 54.23%  Words/thread/sec: 19.79k  Alpha: 0.022886  Progress: 54.48%  Words/thread/sec: 19.80k  Alpha: 0.022762  Progress: 54.63%  Words/thread/sec: 19.80k  Alpha: 0.022686  Progress: 54.76%  Words/thread/sec: 19.80k  Alpha: 0.022618  Progress: 54.91%  Words/thread/sec: 19.82k  Alpha: 0.022547  Progress: 55.05%  Words/thread/sec: 19.78k  Alpha: 0.022475  Progress: 55.19%  Words/thread/sec: 19.77k  Alpha: 0.022405  Progress: 55.34%  Words/thread/sec: 19.77k  Alpha: 0.022332  Progress: 55.48%  Words/thread/sec: 19.79k  Alpha: 0.022260  Progress: 55.62%  Words/thread/sec: 19.75k  Alpha: 0.022188  Progress: 55.77%  Words/thread/sec: 19.75k  Alpha: 0.022113  Progress: 55.92%  Words/thread/sec: 19.76k  Alpha: 0.022038  Progress: 56.07%  Words/thread/sec: 19.78k  Alpha: 0.021963  Progress: 56.22%  Words/thread/sec: 19.75k  Alpha: 0.021892  Progress: 56.36%  Words/thread/sec: 19.75k  Alpha: 0.021820  Progress: 56.50%  Words/thread/sec: 19.76k  Alpha: 0.021749  Progress: 56.65%  Words/thread/sec: 19.78k  Alpha: 0.021677  Progress: 56.77%  Words/thread/sec: 19.78k  Alpha: 0.021613  Progress: 56.92%  Words/thread/sec: 19.73k  Alpha: 0.021542  Progress: 57.06%  Words/thread/sec: 19.74k  Alpha: 0.021469  Progress: 57.21%  Words/thread/sec: 19.75k  Alpha: 0.021393  Progress: 57.36%  Words/thread/sec: 19.75k  Alpha: 0.021322  Progress: 57.50%  Words/thread/sec: 19.71k  Alpha: 0.021250  Progress: 57.64%  Words/thread/sec: 19.72k  Alpha: 0.021179  Progress: 57.79%  Words/thread/sec: 19.74k  Alpha: 0.021104  Progress: 57.94%  Words/thread/sec: 19.78k  Alpha: 0.021031  Progress: 58.09%  Words/thread/sec: 19.71k  Alpha: 0.020957  Progress: 58.22%  Words/thread/sec: 19.72k  Alpha: 0.020888  Progress: 58.36%  Words/thread/sec: 19.75k  Alpha: 0.020818  Progress: 58.51%  Words/thread/sec: 19.78k  Alpha: 0.020746  Progress: 58.75%  Words/thread/sec: 19.73k  Alpha: 0.020627  Progress: 58.89%  Words/thread/sec: 19.74k  Alpha: 0.020554  Progress: 59.04%  Words/thread/sec: 19.75k  Alpha: 0.020478  Progress: 59.18%  Words/thread/sec: 19.71k  Alpha: 0.020410  Progress: 59.33%  Words/thread/sec: 19.70k  Alpha: 0.020336  Progress: 59.47%  Words/thread/sec: 19.72k  Alpha: 0.020265  Progress: 59.62%  Words/thread/sec: 19.72k  Alpha: 0.020192  Progress: 59.77%  Words/thread/sec: 19.70k  Alpha: 0.020117  Progress: 59.91%  Words/thread/sec: 19.70k  Alpha: 0.020044  Progress: 60.06%  Words/thread/sec: 19.72k  Alpha: 0.019970  Progress: 60.20%  Words/thread/sec: 19.72k  Alpha: 0.019900  Progress: 60.42%  Words/thread/sec: 19.72k  Alpha: 0.019789  Progress: 60.64%  Words/thread/sec: 19.72k  Alpha: 0.019681  Progress: 60.78%  Words/thread/sec: 19.72k  Alpha: 0.019608  Progress: 60.93%  Words/thread/sec: 19.69k  Alpha: 0.019537  Progress: 61.07%  Words/thread/sec: 19.73k  Alpha: 0.019464  Progress: 61.32%  Words/thread/sec: 19.68k  Alpha: 0.019338  Progress: 61.46%  Words/thread/sec: 19.67k  Alpha: 0.019270  Progress: 61.60%  Words/thread/sec: 19.70k  Alpha: 0.019199  Progress: 61.74%  Words/thread/sec: 19.74k  Alpha: 0.019128  Progress: 61.89%  Words/thread/sec: 19.67k  Alpha: 0.019057  Progress: 62.03%  Words/thread/sec: 19.66k  Alpha: 0.018984  Progress: 62.18%  Words/thread/sec: 19.70k  Alpha: 0.018911  Progress: 62.32%  Words/thread/sec: 19.74k  Alpha: 0.018839  Progress: 62.47%  Words/thread/sec: 19.67k  Alpha: 0.018764  Progress: 62.62%  Words/thread/sec: 19.66k  Alpha: 0.018689  Progress: 62.77%  Words/thread/sec: 19.70k  Alpha: 0.018615  Progress: 62.91%  Words/thread/sec: 19.73k  Alpha: 0.018544  Progress: 63.06%  Words/thread/sec: 19.65k  Alpha: 0.018472  Progress: 63.20%  Words/thread/sec: 19.64k  Alpha: 0.018401  Progress: 63.34%  Words/thread/sec: 19.67k  Alpha: 0.018329  Progress: 63.49%  Words/thread/sec: 19.71k  Alpha: 0.018253  Progress: 63.64%  Words/thread/sec: 19.64k  Alpha: 0.018182  Progress: 63.78%  Words/thread/sec: 19.64k  Alpha: 0.018109  Progress: 63.93%  Words/thread/sec: 19.67k  Alpha: 0.018034  Progress: 64.08%  Words/thread/sec: 19.71k  Alpha: 0.017960  Progress: 64.22%  Words/thread/sec: 19.64k  Alpha: 0.017888  Progress: 64.38%  Words/thread/sec: 19.65k  Alpha: 0.017812  Progress: 64.52%  Words/thread/sec: 19.68k  Alpha: 0.017741  Progress: 64.67%  Words/thread/sec: 19.71k  Alpha: 0.017666  Progress: 64.82%  Words/thread/sec: 19.64k  Alpha: 0.017592  Progress: 64.95%  Words/thread/sec: 19.67k  Alpha: 0.017526  Progress: 65.09%  Words/thread/sec: 19.66k  Alpha: 0.017457  Progress: 65.23%  Words/thread/sec: 19.69k  Alpha: 0.017384  Progress: 65.45%  Words/thread/sec: 19.63k  Alpha: 0.017277  Progress: 65.59%  Words/thread/sec: 19.63k  Alpha: 0.017203  Progress: 65.75%  Words/thread/sec: 19.66k  Alpha: 0.017127  Progress: 65.88%  Words/thread/sec: 19.67k  Alpha: 0.017059  Progress: 66.03%  Words/thread/sec: 19.63k  Alpha: 0.016986  Progress: 66.17%  Words/thread/sec: 19.63k  Alpha: 0.016914  Progress: 66.32%  Words/thread/sec: 19.65k  Alpha: 0.016841  Progress: 66.47%  Words/thread/sec: 19.67k  Alpha: 0.016767  Progress: 66.61%  Words/thread/sec: 19.63k  Alpha: 0.016693  Progress: 66.76%  Words/thread/sec: 19.62k  Alpha: 0.016619  Progress: 66.90%  Words/thread/sec: 19.64k  Alpha: 0.016549  Progress: 67.12%  Words/thread/sec: 19.67k  Alpha: 0.016438  Progress: 67.34%  Words/thread/sec: 19.60k  Alpha: 0.016330  Progress: 67.49%  Words/thread/sec: 19.63k  Alpha: 0.016256  Progress: 67.63%  Words/thread/sec: 19.64k  Alpha: 0.016183  Progress: 67.78%  Words/thread/sec: 19.65k  Alpha: 0.016112  Progress: 68.03%  Words/thread/sec: 19.62k  Alpha: 0.015986  Progress: 68.17%  Words/thread/sec: 19.63k  Alpha: 0.015914  Progress: 68.31%  Words/thread/sec: 19.64k  Alpha: 0.015843  Progress: 68.45%  Words/thread/sec: 19.67k  Alpha: 0.015775  Progress: 68.59%  Words/thread/sec: 19.61k  Alpha: 0.015705  Progress: 68.74%  Words/thread/sec: 19.61k  Alpha: 0.015632  Progress: 68.88%  Words/thread/sec: 19.62k  Alpha: 0.015559  Progress: 69.03%  Words/thread/sec: 19.66k  Alpha: 0.015486  Progress: 69.18%  Words/thread/sec: 19.59k  Alpha: 0.015410  Progress: 69.32%  Words/thread/sec: 19.60k  Alpha: 0.015339  Progress: 69.47%  Words/thread/sec: 19.61k  Alpha: 0.015265  Progress: 69.62%  Words/thread/sec: 19.64k  Alpha: 0.015190  Progress: 69.76%  Words/thread/sec: 19.59k  Alpha: 0.015119  Progress: 69.89%  Words/thread/sec: 19.62k  Alpha: 0.015055  Progress: 70.03%  Words/thread/sec: 19.60k  Alpha: 0.014983  Progress: 70.17%  Words/thread/sec: 19.64k  Alpha: 0.014913  Progress: 70.32%  Words/thread/sec: 19.58k  Alpha: 0.014841  Progress: 70.46%  Words/thread/sec: 19.62k  Alpha: 0.014769  Progress: 70.61%  Words/thread/sec: 19.59k  Alpha: 0.014693  Progress: 70.76%  Words/thread/sec: 19.63k  Alpha: 0.014620  Progress: 70.91%  Words/thread/sec: 19.59k  Alpha: 0.014546  Progress: 71.05%  Words/thread/sec: 19.61k  Alpha: 0.014474  Progress: 71.19%  Words/thread/sec: 19.58k  Alpha: 0.014403  Progress: 71.34%  Words/thread/sec: 19.61k  Alpha: 0.014329  Progress: 71.48%  Words/thread/sec: 19.60k  Alpha: 0.014260  Progress: 71.63%  Words/thread/sec: 19.59k  Alpha: 0.014185  Progress: 71.86%  Words/thread/sec: 19.60k  Alpha: 0.014070  Progress: 72.01%  Words/thread/sec: 19.63k  Alpha: 0.013997  Progress: 72.15%  Words/thread/sec: 19.58k  Alpha: 0.013925  Progress: 72.29%  Words/thread/sec: 19.58k  Alpha: 0.013856  Progress: 72.43%  Words/thread/sec: 19.59k  Alpha: 0.013783  Progress: 72.59%  Words/thread/sec: 19.63k  Alpha: 0.013707  Progress: 72.73%  Words/thread/sec: 19.57k  Alpha: 0.013634  Progress: 72.88%  Words/thread/sec: 19.57k  Alpha: 0.013559  Progress: 73.03%  Words/thread/sec: 19.58k  Alpha: 0.013487  Progress: 73.17%  Words/thread/sec: 19.62k  Alpha: 0.013415  Progress: 73.32%  Words/thread/sec: 19.55k  Alpha: 0.013342  Progress: 73.44%  Words/thread/sec: 19.58k  Alpha: 0.013278  Progress: 73.59%  Words/thread/sec: 19.57k  Alpha: 0.013203  Progress: 73.73%  Words/thread/sec: 19.60k  Alpha: 0.013134  Progress: 74.03%  Words/thread/sec: 19.58k  Alpha: 0.012987  Progress: 74.17%  Words/thread/sec: 19.57k  Alpha: 0.012913  Progress: 74.32%  Words/thread/sec: 19.61k  Alpha: 0.012841  Progress: 74.46%  Words/thread/sec: 19.59k  Alpha: 0.012771  Progress: 74.60%  Words/thread/sec: 19.58k  Alpha: 0.012700  Progress: 74.85%  Words/thread/sec: 19.59k  Alpha: 0.012575  Progress: 74.99%  Words/thread/sec: 19.56k  Alpha: 0.012504  Progress: 75.13%  Words/thread/sec: 19.57k  Alpha: 0.012435  Progress: 75.28%  Words/thread/sec: 19.58k  Alpha: 0.012362  Progress: 75.42%  Words/thread/sec: 19.57k  Alpha: 0.012291  Progress: 75.56%  Words/thread/sec: 19.55k  Alpha: 0.012218  Progress: 75.71%  Words/thread/sec: 19.57k  Alpha: 0.012145  Progress: 75.85%  Words/thread/sec: 19.58k  Alpha: 0.012074  Progress: 76.00%  Words/thread/sec: 19.57k  Alpha: 0.011999  Progress: 76.15%  Words/thread/sec: 19.55k  Alpha: 0.011925  Progress: 76.30%  Words/thread/sec: 19.57k  Alpha: 0.011850  Progress: 76.45%  Words/thread/sec: 19.58k  Alpha: 0.011774  Progress: 76.60%  Words/thread/sec: 19.57k  Alpha: 0.011702  Progress: 76.74%  Words/thread/sec: 19.54k  Alpha: 0.011631  Progress: 76.88%  Words/thread/sec: 19.56k  Alpha: 0.011559  Progress: 77.03%  Words/thread/sec: 19.57k  Alpha: 0.011487  Progress: 77.17%  Words/thread/sec: 19.55k  Alpha: 0.011417  Progress: 77.32%  Words/thread/sec: 19.53k  Alpha: 0.011341  Progress: 77.46%  Words/thread/sec: 19.55k  Alpha: 0.011268  Progress: 77.61%  Words/thread/sec: 19.58k  Alpha: 0.011193  Progress: 77.76%  Words/thread/sec: 19.55k  Alpha: 0.011121  Progress: 77.90%  Words/thread/sec: 19.53k  Alpha: 0.011052  Progress: 78.04%  Words/thread/sec: 19.56k  Alpha: 0.010978  Progress: 78.19%  Words/thread/sec: 19.58k  Alpha: 0.010907  Progress: 78.34%  Words/thread/sec: 19.55k  Alpha: 0.010832  Progress: 78.57%  Words/thread/sec: 19.55k  Alpha: 0.010713  Progress: 78.72%  Words/thread/sec: 19.56k  Alpha: 0.010642  Progress: 78.85%  Words/thread/sec: 19.54k  Alpha: 0.010573  Progress: 79.00%  Words/thread/sec: 19.56k  Alpha: 0.010500  Progress: 79.15%  Words/thread/sec: 19.53k  Alpha: 0.010425  Progress: 79.30%  Words/thread/sec: 19.55k  Alpha: 0.010352  Progress: 79.45%  Words/thread/sec: 19.53k  Alpha: 0.010277  Progress: 79.59%  Words/thread/sec: 19.55k  Alpha: 0.010204  Progress: 79.74%  Words/thread/sec: 19.53k  Alpha: 0.010131  Progress: 79.88%  Words/thread/sec: 19.55k  Alpha: 0.010060  Progress: 80.03%  Words/thread/sec: 19.54k  Alpha: 0.009984  Progress: 80.18%  Words/thread/sec: 19.55k  Alpha: 0.009911  Progress: 80.31%  Words/thread/sec: 19.53k  Alpha: 0.009847  Progress: 80.45%  Words/thread/sec: 19.56k  Alpha: 0.009777  Progress: 80.67%  Words/thread/sec: 19.54k  Alpha: 0.009667  Progress: 80.89%  Words/thread/sec: 19.52k  Alpha: 0.009556  Progress: 81.03%  Words/thread/sec: 19.55k  Alpha: 0.009486  Progress: 81.17%  Words/thread/sec: 19.52k  Alpha: 0.009415  Progress: 81.31%  Words/thread/sec: 19.54k  Alpha: 0.009343  Progress: 81.59%  Words/thread/sec: 19.54k  Alpha: 0.009206  Progress: 81.73%  Words/thread/sec: 19.52k  Alpha: 0.009136  Progress: 81.87%  Words/thread/sec: 19.54k  Alpha: 0.009063  Progress: 82.01%  Words/thread/sec: 19.55k  Alpha: 0.008995  Progress: 82.15%  Words/thread/sec: 19.54k  Alpha: 0.008925  Progress: 82.30%  Words/thread/sec: 19.51k  Alpha: 0.008852  Progress: 82.44%  Words/thread/sec: 19.53k  Alpha: 0.008781  Progress: 82.58%  Words/thread/sec: 19.54k  Alpha: 0.008708  Progress: 82.73%  Words/thread/sec: 19.53k  Alpha: 0.008633  Progress: 82.86%  Words/thread/sec: 19.51k  Alpha: 0.008569  Progress: 83.01%  Words/thread/sec: 19.53k  Alpha: 0.008495  Progress: 83.16%  Words/thread/sec: 19.52k  Alpha: 0.008420  Progress: 83.30%  Words/thread/sec: 19.52k  Alpha: 0.008349  Progress: 83.45%  Words/thread/sec: 19.50k  Alpha: 0.008276  Progress: 83.59%  Words/thread/sec: 19.52k  Alpha: 0.008205  Progress: 83.73%  Words/thread/sec: 19.52k  Alpha: 0.008134  Progress: 83.87%  Words/thread/sec: 19.51k  Alpha: 0.008063  Progress: 84.02%  Words/thread/sec: 19.52k  Alpha: 0.007990  Progress: 84.17%  Words/thread/sec: 19.52k  Alpha: 0.007914  Progress: 84.32%  Words/thread/sec: 19.52k  Alpha: 0.007840  Progress: 84.46%  Words/thread/sec: 19.51k  Alpha: 0.007768  Progress: 84.60%  Words/thread/sec: 19.54k  Alpha: 0.007699  Progress: 84.75%  Words/thread/sec: 19.51k  Alpha: 0.007625  Progress: 84.89%  Words/thread/sec: 19.51k  Alpha: 0.007553  Progress: 85.14%  Words/thread/sec: 19.52k  Alpha: 0.007432  Progress: 85.28%  Words/thread/sec: 19.49k  Alpha: 0.007359  Progress: 85.42%  Words/thread/sec: 19.51k  Alpha: 0.007290  Progress: 85.56%  Words/thread/sec: 19.52k  Alpha: 0.007221  Progress: 85.70%  Words/thread/sec: 19.51k  Alpha: 0.007149  Progress: 85.85%  Words/thread/sec: 19.49k  Alpha: 0.007073  Progress: 86.00%  Words/thread/sec: 19.51k  Alpha: 0.006999  Progress: 86.15%  Words/thread/sec: 19.52k  Alpha: 0.006926  Progress: 86.30%  Words/thread/sec: 19.52k  Alpha: 0.006852  Progress: 86.44%  Words/thread/sec: 19.49k  Alpha: 0.006780  Progress: 86.59%  Words/thread/sec: 19.50k  Alpha: 0.006704  Progress: 86.73%  Words/thread/sec: 19.52k  Alpha: 0.006633  Progress: 86.88%  Words/thread/sec: 19.50k  Alpha: 0.006560  Progress: 87.02%  Words/thread/sec: 19.47k  Alpha: 0.006490  Progress: 87.24%  Words/thread/sec: 19.50k  Alpha: 0.006380  Progress: 87.39%  Words/thread/sec: 19.52k  Alpha: 0.006306  Progress: 87.61%  Words/thread/sec: 19.48k  Alpha: 0.006196  Progress: 87.75%  Words/thread/sec: 19.49k  Alpha: 0.006125  Progress: 87.89%  Words/thread/sec: 19.50k  Alpha: 0.006053  Progress: 88.04%  Words/thread/sec: 19.52k  Alpha: 0.005982  Progress: 88.19%  Words/thread/sec: 19.48k  Alpha: 0.005906  Progress: 88.43%  Words/thread/sec: 19.51k  Alpha: 0.005784  Progress: 88.58%  Words/thread/sec: 19.51k  Alpha: 0.005712  Progress: 88.71%  Words/thread/sec: 19.48k  Alpha: 0.005645  Progress: 88.85%  Words/thread/sec: 19.49k  Alpha: 0.005574  Progress: 89.00%  Words/thread/sec: 19.49k  Alpha: 0.005502  Progress: 89.14%  Words/thread/sec: 19.49k  Alpha: 0.005429  Progress: 89.29%  Words/thread/sec: 19.47k  Alpha: 0.005356  Progress: 89.44%  Words/thread/sec: 19.48k  Alpha: 0.005281  Progress: 89.59%  Words/thread/sec: 19.49k  Alpha: 0.005205  Progress: 89.74%  Words/thread/sec: 19.49k  Alpha: 0.005131  Progress: 89.89%  Words/thread/sec: 19.48k  Alpha: 0.005056  Progress: 90.03%  Words/thread/sec: 19.49k  Alpha: 0.004984  Progress: 90.18%  Words/thread/sec: 19.49k  Alpha: 0.004910  Progress: 90.32%  Words/thread/sec: 19.50k  Alpha: 0.004838  Progress: 90.47%  Words/thread/sec: 19.47k  Alpha: 0.004767  Progress: 90.61%  Words/thread/sec: 19.48k  Alpha: 0.004697  Progress: 90.76%  Words/thread/sec: 19.50k  Alpha: 0.004620  Progress: 90.91%  Words/thread/sec: 19.48k  Alpha: 0.004545  Progress: 91.06%  Words/thread/sec: 19.46k  Alpha: 0.004471  Progress: 91.19%  Words/thread/sec: 19.48k  Alpha: 0.004404  Progress: 91.34%  Words/thread/sec: 19.50k  Alpha: 0.004331  Progress: 91.55%  Words/thread/sec: 19.49k  Alpha: 0.004224  Progress: 91.69%  Words/thread/sec: 19.47k  Alpha: 0.004154  Progress: 91.84%  Words/thread/sec: 19.48k  Alpha: 0.004079  Progress: 91.98%  Words/thread/sec: 19.48k  Alpha: 0.004010  Progress: 92.12%  Words/thread/sec: 19.49k  Alpha: 0.003938  Progress: 92.26%  Words/thread/sec: 19.47k  Alpha: 0.003869  Progress: 92.41%  Words/thread/sec: 19.48k  Alpha: 0.003797  Progress: 92.56%  Words/thread/sec: 19.48k  Alpha: 0.003722  Progress: 92.71%  Words/thread/sec: 19.48k  Alpha: 0.003646  Progress: 92.85%  Words/thread/sec: 19.46k  Alpha: 0.003574  Progress: 93.00%  Words/thread/sec: 19.47k  Alpha: 0.003500  Progress: 93.15%  Words/thread/sec: 19.47k  Alpha: 0.003425  Progress: 93.30%  Words/thread/sec: 19.47k  Alpha: 0.003352  Progress: 93.44%  Words/thread/sec: 19.46k  Alpha: 0.003280  Progress: 93.59%  Words/thread/sec: 19.47k  Alpha: 0.003206  Progress: 93.74%  Words/thread/sec: 19.47k  Alpha: 0.003132  Progress: 93.88%  Words/thread/sec: 19.47k  Alpha: 0.003062  Progress: 94.10%  Words/thread/sec: 19.47k  Alpha: 0.002952  Progress: 94.31%  Words/thread/sec: 19.46k  Alpha: 0.002844  Progress: 94.46%  Words/thread/sec: 19.49k  Alpha: 0.002770  Progress: 94.60%  Words/thread/sec: 19.45k  Alpha: 0.002699  Progress: 94.74%  Words/thread/sec: 19.48k  Alpha: 0.002628  Progress: 94.89%  Words/thread/sec: 19.45k  Alpha: 0.002556  Progress: 95.04%  Words/thread/sec: 19.47k  Alpha: 0.002481  Progress: 95.28%  Words/thread/sec: 19.46k  Alpha: 0.002360  Progress: 95.42%  Words/thread/sec: 19.44k  Alpha: 0.002289  Progress: 95.56%  Words/thread/sec: 19.46k  Alpha: 0.002218  Progress: 95.70%  Words/thread/sec: 19.48k  Alpha: 0.002150  Progress: 95.85%  Words/thread/sec: 19.46k  Alpha: 0.002077  Progress: 96.00%  Words/thread/sec: 19.44k  Alpha: 0.002001  Progress: 96.15%  Words/thread/sec: 19.46k  Alpha: 0.001926  Progress: 96.29%  Words/thread/sec: 19.49k  Alpha: 0.001853  Progress: 96.44%  Words/thread/sec: 19.46k  Alpha: 0.001779  Progress: 96.59%  Words/thread/sec: 19.43k  Alpha: 0.001706  Progress: 96.73%  Words/thread/sec: 19.45k  Alpha: 0.001635  Progress: 96.88%  Words/thread/sec: 19.48k  Alpha: 0.001560  Progress: 97.02%  Words/thread/sec: 19.45k  Alpha: 0.001489  Progress: 97.18%  Words/thread/sec: 19.44k  Alpha: 0.001412  Progress: 97.32%  Words/thread/sec: 19.44k  Alpha: 0.001342  Progress: 97.46%  Words/thread/sec: 19.47k  Alpha: 0.001271  Progress: 97.61%  Words/thread/sec: 19.44k  Alpha: 0.001196  Progress: 97.74%  Words/thread/sec: 19.45k  Alpha: 0.001129  Progress: 97.89%  Words/thread/sec: 19.43k  Alpha: 0.001056  Progress: 98.03%  Words/thread/sec: 19.45k  Alpha: 0.000983  Progress: 98.25%  Words/thread/sec: 19.45k  Alpha: 0.000874  Progress: 98.40%  Words/thread/sec: 19.44k  Alpha: 0.000800  Progress: 98.54%  Words/thread/sec: 19.46k  Alpha: 0.000729  Progress: 98.69%  Words/thread/sec: 19.45k  Alpha: 0.000657  Progress: 98.83%  Words/thread/sec: 19.44k  Alpha: 0.000585  Progress: 98.97%  Words/thread/sec: 19.47k  Alpha: 0.000516  Progress: 99.12%  Words/thread/sec: 19.45k  Alpha: 0.000439  Progress: 99.27%  Words/thread/sec: 19.44k  Alpha: 0.000366  Progress: 99.41%  Words/thread/sec: 19.47k  Alpha: 0.000293  Progress: 99.56%  Words/thread/sec: 19.46k  Alpha: 0.000220  Progress: 99.71%  Words/thread/sec: 19.45k  Alpha: 0.000147  Progress: 99.85%  Words/thread/sec: 19.47k  Alpha: 0.000075  Progress: 100.06%  Words/thread/sec: 19.47k  Alpha: 0.000005  Progress: 100.21%  Words/thread/sec: 19.48k  Alpha: 0.000005  Progress: 100.43%  Words/thread/sec: 19.49k  # started on Wed Mar  3 04:48:23 2021


 Performance counter stats for 'system wide':

S0-C0           1         107,177.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             10,274      context-switches          #    0.096 K/sec                  
S0-C0           1                509      cpu-migrations            #    0.005 K/sec                  
S0-C0           1            132,027      page-faults               #    0.001 M/sec                  
S0-C0           1      2,882,118,272      cycles                    #    0.027 GHz                    
S0-C0           1        562,001,512      instructions              #    0.19  insn per cycle         
S0-C0           1      1,572,739,845      branches                  #   14.674 M/sec                  
S0-C0           1         88,344,574      branch-misses             #    5.62% of all branches        
S0-C1           1         107,177.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              6,064      context-switches          #    0.057 K/sec                  
S0-C1           1                490      cpu-migrations            #    0.005 K/sec                  
S0-C1           1                  7      page-faults               #    0.000 K/sec                  
S0-C1           1      2,985,495,732      cycles                    #    0.028 GHz                    
S0-C1           1      3,032,556,168      instructions              #    1.02  insn per cycle         
S0-C1           1      1,277,922,059      branches                  #   11.923 M/sec                  
S0-C1           1         78,488,430      branch-misses             #    6.14% of all branches        
S0-C2           1         107,177.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             11,325      context-switches          #    0.106 K/sec                  
S0-C2           1                510      cpu-migrations            #    0.005 K/sec                  
S0-C2           1                 14      page-faults               #    0.000 K/sec                  
S0-C2           1      2,907,016,477      cycles                    #    0.027 GHz                    
S0-C2           1      1,424,151,753      instructions              #    0.49  insn per cycle         
S0-C2           1      1,238,513,671      branches                  #   11.556 M/sec                  
S0-C2           1         76,974,100      branch-misses             #    6.22% of all branches        
S0-C3           1         107,177.93 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,072      context-switches          #    0.066 K/sec                  
S0-C3           1                501      cpu-migrations            #    0.005 K/sec                  
S0-C3           1                  7      page-faults               #    0.000 K/sec                  
S0-C3           1      1,521,030,031      cycles                    #    0.014 GHz                    
S0-C3           1      2,457,732,518      instructions              #    1.62  insn per cycle         
S0-C3           1      1,261,657,531      branches                  #   11.772 M/sec                  
S0-C3           1         77,896,065      branch-misses             #    6.17% of all branches        

     107.179255338 seconds time elapsed

================================================================================
perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/grep_perf_output_1614747010907710888.txt --per-core -a taskset -c 0-3 ./mpi_grep_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 04:50:10 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.02 msec cpu-clock                 #    0.973 CPUs utilized          
S0-C0           1                 31      context-switches          #    0.003 M/sec                  
S0-C0           1                  1      cpu-migrations            #    0.083 K/sec                  
S0-C0           1                  0      page-faults               #    0.000 K/sec                  
S0-C0           1          2,291,366      cycles                    #    0.191 GHz                    
S0-C0           1            392,226      instructions              #    0.17  insn per cycle         
S0-C0           1             52,159      branches                  #    4.340 M/sec                  
S0-C0           1             11,085      branch-misses             #   21.25% of all branches        
S0-C1           1              12.02 msec cpu-clock                 #    0.973 CPUs utilized          
S0-C1           1                 10      context-switches          #    0.832 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.083 K/sec                  
S0-C1           1                249      page-faults               #    0.021 M/sec                  
S0-C1           1         14,456,542      cycles                    #    1.203 GHz                    
S0-C1           1          4,422,846      instructions              #    0.31  insn per cycle         
S0-C1           1            534,056      branches                  #   44.438 M/sec                  
S0-C1           1             93,954      branch-misses             #   17.59% of all branches        
S0-C2           1              12.02 msec cpu-clock                 #    0.973 CPUs utilized          
S0-C2           1                 16      context-switches          #    0.001 M/sec                  
S0-C2           1                  4      cpu-migrations            #    0.333 K/sec                  
S0-C2           1                108      page-faults               #    0.009 M/sec                  
S0-C2           1          4,520,676      cycles                    #    0.376 GHz                    
S0-C2           1          1,075,580      instructions              #    0.24  insn per cycle         
S0-C2           1            132,646      branches                  #   11.035 M/sec                  
S0-C2           1             26,388      branch-misses             #   19.89% of all branches        
S0-C3           1              12.02 msec cpu-clock                 #    0.973 CPUs utilized          
S0-C3           1                 10      context-switches          #    0.832 K/sec                  
S0-C3           1                  1      cpu-migrations            #    0.083 K/sec                  
S0-C3           1                113      page-faults               #    0.009 M/sec                  
S0-C3           1          2,643,048      cycles                    #    0.220 GHz                    
S0-C3           1            764,596      instructions              #    0.29  insn per cycle         
S0-C3           1             93,870      branches                  #    7.810 M/sec                  
S0-C3           1             14,303      branch-misses             #   15.24% of all branches        

       0.012356964 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/lda_perf_output_1614747011003206023.txt --per-core -a taskset -c 0-3 ./mpi_lda_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 04:50:11 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.49 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C0           1                 11      context-switches          #    0.881 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.080 K/sec                  
S0-C0           1                  0      page-faults               #    0.000 K/sec                  
S0-C0           1          1,215,855      cycles                    #    0.097 GHz                    
S0-C0           1            199,810      instructions              #    0.16  insn per cycle         
S0-C0           1             26,622      branches                  #    2.132 M/sec                  
S0-C0           1              6,367      branch-misses             #   23.92% of all branches        
S0-C1           1              12.49 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C1           1                  6      context-switches          #    0.480 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.080 K/sec                  
S0-C1           1                 95      page-faults               #    0.008 M/sec                  
S0-C1           1          2,049,954      cycles                    #    0.164 GHz                    
S0-C1           1            599,927      instructions              #    0.29  insn per cycle         
S0-C1           1             73,519      branches                  #    5.887 M/sec                  
S0-C1           1             11,531      branch-misses             #   15.68% of all branches        
S0-C2           1              12.49 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C2           1                  5      context-switches          #    0.400 K/sec                  
S0-C2           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                246      page-faults               #    0.020 M/sec                  
S0-C2           1         12,183,489      cycles                    #    0.976 GHz                    
S0-C2           1          4,180,590      instructions              #    0.34  insn per cycle         
S0-C2           1            503,576      branches                  #   40.326 M/sec                  
S0-C2           1             85,196      branch-misses             #   16.92% of all branches        
S0-C3           1              12.49 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C3           1                 18      context-switches          #    0.001 M/sec                  
S0-C3           1                  2      cpu-migrations            #    0.160 K/sec                  
S0-C3           1                108      page-faults               #    0.009 M/sec                  
S0-C3           1          2,959,674      cycles                    #    0.237 GHz                    
S0-C3           1            869,758      instructions              #    0.29  insn per cycle         
S0-C3           1            110,369      branches                  #    8.838 M/sec                  
S0-C3           1             17,870      branch-misses             #   16.19% of all branches        

       0.012793121 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/NaiveBayes_perf_output_1614747011095299356.txt --per-core -a taskset -c 0-3 ./mpi_naive_bayes_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 04:50:11 2021


 Performance counter stats for 'system wide':

S0-C0           1              42.36 msec cpu-clock                 #    0.992 CPUs utilized          
S0-C0           1                 35      context-switches          #    0.826 K/sec                  
S0-C0           1                  7      cpu-migrations            #    0.165 K/sec                  
S0-C0           1                334      page-faults               #    0.008 M/sec                  
S0-C0           1         22,042,305      cycles                    #    0.520 GHz                    
S0-C0           1          6,821,184      instructions              #    0.31  insn per cycle         
S0-C0           1            851,000      branches                  #   20.090 M/sec                  
S0-C0           1            162,690      branch-misses             #   19.12% of all branches        
S0-C1           1              42.36 msec cpu-clock                 #    0.992 CPUs utilized          
S0-C1           1                 38      context-switches          #    0.897 K/sec                  
S0-C1           1                  2      cpu-migrations            #    0.047 K/sec                  
S0-C1           1                370      page-faults               #    0.009 M/sec                  
S0-C1           1          8,624,613      cycles                    #    0.204 GHz                    
S0-C1           1          2,870,311      instructions              #    0.33  insn per cycle         
S0-C1           1            345,567      branches                  #    8.158 M/sec                  
S0-C1           1             52,261      branch-misses             #   15.12% of all branches        
S0-C2           1              42.36 msec cpu-clock                 #    0.992 CPUs utilized          
S0-C2           1                 52      context-switches          #    0.001 M/sec                  
S0-C2           1                  4      cpu-migrations            #    0.094 K/sec                  
S0-C2           1                536      page-faults               #    0.013 M/sec                  
S0-C2           1         24,926,744      cycles                    #    0.588 GHz                    
S0-C2           1          8,352,768      instructions              #    0.34  insn per cycle         
S0-C2           1          1,010,126      branches                  #   23.848 M/sec                  
S0-C2           1            180,755      branch-misses             #   17.89% of all branches        
S0-C3           1              42.36 msec cpu-clock                 #    0.992 CPUs utilized          
S0-C3           1                 49      context-switches          #    0.001 M/sec                  
S0-C3           1                  6      cpu-migrations            #    0.142 K/sec                  
S0-C3           1                401      page-faults               #    0.009 M/sec                  
S0-C3           1         15,974,983      cycles                    #    0.377 GHz                    
S0-C3           1          5,201,781      instructions              #    0.33  insn per cycle         
S0-C3           1            651,516      branches                  #   15.380 M/sec                  
S0-C3           1            117,388      branch-misses             #   18.02% of all branches        

       0.042692019 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/wordcounts_perf_output_1614747011218529445.txt --per-core -a taskset -c 0-3 ./mpi_wordcount_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 04:50:11 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.54 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                 10      context-switches          #    0.798 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.080 K/sec                  
S0-C0           1                  0      page-faults               #    0.000 K/sec                  
S0-C0           1          1,149,242      cycles                    #    0.092 GHz                    
S0-C0           1            197,606      instructions              #    0.17  insn per cycle         
S0-C0           1             26,339      branches                  #    2.101 M/sec                  
S0-C0           1              6,270      branch-misses             #   23.81% of all branches        
S0-C1           1              12.54 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C1           1                  6      context-switches          #    0.479 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.080 K/sec                  
S0-C1           1                 96      page-faults               #    0.008 M/sec                  
S0-C1           1          2,137,714      cycles                    #    0.170 GHz                    
S0-C1           1            609,474      instructions              #    0.29  insn per cycle         
S0-C1           1             74,963      branches                  #    5.979 M/sec                  
S0-C1           1             11,840      branch-misses             #   15.79% of all branches        
S0-C2           1              12.54 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C2           1                  9      context-switches          #    0.718 K/sec                  
S0-C2           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                251      page-faults               #    0.020 M/sec                  
S0-C2           1         12,541,234      cycles                    #    1.000 GHz                    
S0-C2           1          4,278,514      instructions              #    0.34  insn per cycle         
S0-C2           1            517,899      branches                  #   41.308 M/sec                  
S0-C2           1             88,236      branch-misses             #   17.04% of all branches        
S0-C3           1              12.54 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                 12      context-switches          #    0.957 K/sec                  
S0-C3           1                  2      cpu-migrations            #    0.160 K/sec                  
S0-C3           1                109      page-faults               #    0.009 M/sec                  
S0-C3           1          2,392,419      cycles                    #    0.191 GHz                    
S0-C3           1            736,990      instructions              #    0.31  insn per cycle         
S0-C3           1             91,224      branches                  #    7.277 M/sec                  
S0-C3           1             14,293      branch-misses             #   15.67% of all branches        

       0.012854660 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/kmeans_perf_output_1614747011310899549.txt --per-core -a taskset -c 0-3 ./mpi_kmeans_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 04:50:11 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.12 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                 14      context-switches          #    0.001 M/sec                  
S0-C0           1                  1      cpu-migrations            #    0.083 K/sec                  
S0-C0           1                 60      page-faults               #    0.005 M/sec                  
S0-C0           1          3,568,926      cycles                    #    0.295 GHz                    
S0-C0           1            878,601      instructions              #    0.25  insn per cycle         
S0-C0           1            111,122      branches                  #    9.172 M/sec                  
S0-C0           1             18,552      branch-misses             #   16.70% of all branches        
S0-C1           1              12.12 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C1           1                 11      context-switches          #    0.908 K/sec                  
S0-C1           1                  3      cpu-migrations            #    0.248 K/sec                  
S0-C1           1                191      page-faults               #    0.016 M/sec                  
S0-C1           1         11,091,872      cycles                    #    0.915 GHz                    
S0-C1           1          3,687,405      instructions              #    0.33  insn per cycle         
S0-C1           1            441,330      branches                  #   36.426 M/sec                  
S0-C1           1             77,254      branch-misses             #   17.50% of all branches        
S0-C2           1              12.12 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C2           1                  6      context-switches          #    0.495 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.083 K/sec                  
S0-C2           1                102      page-faults               #    0.008 M/sec                  
S0-C2           1          2,146,059      cycles                    #    0.177 GHz                    
S0-C2           1            681,198      instructions              #    0.32  insn per cycle         
S0-C2           1             82,855      branches                  #    6.838 M/sec                  
S0-C2           1             12,453      branch-misses             #   15.03% of all branches        
S0-C3           1              12.12 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                 13      context-switches          #    0.001 M/sec                  
S0-C3           1                  2      cpu-migrations            #    0.165 K/sec                  
S0-C3           1                110      page-faults               #    0.009 M/sec                  
S0-C3           1          3,378,191      cycles                    #    0.279 GHz                    
S0-C3           1            874,568      instructions              #    0.26  insn per cycle         
S0-C3           1            109,177      branches                  #    9.011 M/sec                  
S0-C3           1             19,802      branch-misses             #   18.14% of all branches        

       0.012425348 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/md5_perf_output_1614747011403188038.txt --per-core -a taskset -c 0-3 ./mpi_md5_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 04:50:11 2021


 Performance counter stats for 'system wide':

S0-C0           1              11.87 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                 10      context-switches          #    0.843 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C0           1                 95      page-faults               #    0.008 M/sec                  
S0-C0           1          2,356,856      cycles                    #    0.199 GHz                    
S0-C0           1            626,094      instructions              #    0.27  insn per cycle         
S0-C0           1             77,014      branches                  #    6.490 M/sec                  
S0-C0           1             12,624      branch-misses             #   16.39% of all branches        
S0-C1           1              11.87 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C1           1                  8      context-switches          #    0.674 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C1           1                110      page-faults               #    0.009 M/sec                  
S0-C1           1          2,004,106      cycles                    #    0.169 GHz                    
S0-C1           1            664,695      instructions              #    0.33  insn per cycle         
S0-C1           1             81,288      branches                  #    6.849 M/sec                  
S0-C1           1             11,795      branch-misses             #   14.51% of all branches        
S0-C2           1              11.87 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C2           1                 10      context-switches          #    0.843 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C2           1                  0      page-faults               #    0.000 K/sec                  
S0-C2           1          1,498,702      cycles                    #    0.126 GHz                    
S0-C2           1            236,852      instructions              #    0.16  insn per cycle         
S0-C2           1             31,531      branches                  #    2.657 M/sec                  
S0-C2           1              7,999      branch-misses             #   25.37% of all branches        
S0-C3           1              11.87 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                  7      context-switches          #    0.590 K/sec                  
S0-C3           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                250      page-faults               #    0.021 M/sec                  
S0-C3           1         12,652,315      cycles                    #    1.066 GHz                    
S0-C3           1          4,294,876      instructions              #    0.34  insn per cycle         
S0-C3           1            518,581      branches                  #   43.701 M/sec                  
S0-C3           1             87,630      branch-misses             #   16.90% of all branches        

       0.012169346 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/sort_perf_output_1614747011495940685.txt --per-core -a taskset -c 0-3 ./mpi_sort_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 04:50:11 2021


 Performance counter stats for 'system wide':

S0-C0           1              11.86 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                  4      context-switches          #    0.337 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C0           1                109      page-faults               #    0.009 M/sec                  
S0-C0           1          2,769,663      cycles                    #    0.234 GHz                    
S0-C0           1            750,884      instructions              #    0.27  insn per cycle         
S0-C0           1             92,222      branches                  #    7.779 M/sec                  
S0-C0           1             15,109      branch-misses             #   16.38% of all branches        
S0-C1           1              11.85 msec cpu-clock                 #    0.974 CPUs utilized          
S0-C1           1                 11      context-switches          #    0.928 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C1           1                  0      page-faults               #    0.000 K/sec                  
S0-C1           1          1,596,068      cycles                    #    0.135 GHz                    
S0-C1           1            244,898      instructions              #    0.15  insn per cycle         
S0-C1           1             32,315      branches                  #    2.726 M/sec                  
S0-C1           1              8,697      branch-misses             #   26.91% of all branches        
S0-C2           1              11.85 msec cpu-clock                 #    0.974 CPUs utilized          
S0-C2           1                  9      context-switches          #    0.759 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C2           1                251      page-faults               #    0.021 M/sec                  
S0-C2           1         13,086,154      cycles                    #    1.104 GHz                    
S0-C2           1          4,278,619      instructions              #    0.33  insn per cycle         
S0-C2           1            517,932      branches                  #   43.693 M/sec                  
S0-C2           1             88,750      branch-misses             #   17.14% of all branches        
S0-C3           1              11.86 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                 14      context-switches          #    0.001 M/sec                  
S0-C3           1                  2      cpu-migrations            #    0.169 K/sec                  
S0-C3           1                 97      page-faults               #    0.008 M/sec                  
S0-C3           1          1,953,007      cycles                    #    0.165 GHz                    
S0-C3           1            608,256      instructions              #    0.31  insn per cycle         
S0-C3           1             75,324      branches                  #    6.353 M/sec                  
S0-C3           1             10,812      branch-misses             #   14.35% of all branches        

       0.012164962 seconds time elapsed

================================================================================
perf stat -o sqlite_4_threads.txt  --per-core -a taskset -c 0-3 ./sqlite_benchmark 4
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index......................    0.096s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.096s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.098s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.097s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.144s
 120 - 13000 unordered INSERTS with one index/PK...................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.147s
 120 - 13000 unordered INSERTS with one index/PK...................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.197s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.198s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.200s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.198s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.207s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.202s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.204s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.208s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.330s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.333s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.336s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.334s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.178s
 150 - CREATE INDEX five times.....................................    0.178s
 150 - CREATE INDEX five times.....................................    0.180s
 150 - CREATE INDEX five times.....................................    0.180s
 150 - CREATE INDEX five times.....................................    0.235s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.235s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.233s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.233s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.115s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.116s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.113s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.114s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.114s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.114s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.115s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.114s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.241s
 180 - 13000 INSERTS with three indexes............................    0.241s
 180 - 13000 INSERTS with three indexes............................    0.241s
 180 - 13000 INSERTS with three indexes............................    0.244s
 180 - 13000 INSERTS with three indexes............................    0.262s
 190 - DELETE and REFILL one table.................................    0.263s
 190 - DELETE and REFILL one table.................................    0.261s
 190 - DELETE and REFILL one table.................................    0.266s
 190 - DELETE and REFILL one table.................................    0.270s
 200 - VACUUM......................................................    0.266s
 200 - VACUUM......................................................    0.268s
 200 - VACUUM......................................................    0.272s
 200 - VACUUM......................................................    0.395s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.395s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.397s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.403s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.094s
 240 - 13000 UPDATES of individual rows............................    0.094s
 240 - 13000 UPDATES of individual rows............................    0.095s
 240 - 13000 UPDATES of individual rows............................    0.096s
 240 - 13000 UPDATES of individual rows............................    0.162s
 250 - One big UPDATE of the whole 13000-row table.................    0.163s
 250 - One big UPDATE of the whole 13000-row table.................    0.174s
 250 - One big UPDATE of the whole 13000-row table.................    0.166s
 250 - One big UPDATE of the whole 13000-row table.................    0.046s
 260 - Query added column after filling............................    0.046s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.048s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.047s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.250s
 280 - 13000 DELETEs of individual rows............................    0.250s
 280 - 13000 DELETEs of individual rows............................    0.262s
 280 - 13000 DELETEs of individual rows............................    0.263s
 280 - 13000 DELETEs of individual rows............................    0.236s
 290 - Refill two 13000-row tables using REPLACE...................    0.237s
 290 - Refill two 13000-row tables using REPLACE...................    0.238s
 290 - Refill two 13000-row tables using REPLACE...................    0.240s
 290 - Refill two 13000-row tables using REPLACE...................    0.695s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.696s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.704s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.701s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.296s
 310 - 2600 four-ways joins........................................    0.295s
 310 - 2600 four-ways joins........................................    0.301s
 310 - 2600 four-ways joins........................................    0.305s
 310 - 2600 four-ways joins........................................    0.498s
 320 - subquery in result set......................................    0.500s
 320 - subquery in result set......................................    0.495s
 320 - subquery in result set......................................    0.502s
 320 - subquery in result set......................................    1.090s
 400 - 26000 REPLACE ops on an IPK.................................    1.111s
 400 - 26000 REPLACE ops on an IPK.................................    1.092s
 400 - 26000 REPLACE ops on an IPK.................................    1.121s
 400 - 26000 REPLACE ops on an IPK.................................    0.353s
 410 - 26000 SELECTS on an IPK.....................................    0.349s
 410 - 26000 SELECTS on an IPK.....................................    0.350s
 410 - 26000 SELECTS on an IPK.....................................    0.361s
 410 - 26000 SELECTS on an IPK.....................................    0.223s
 500 - 26000 REPLACE on TEXT PK....................................    0.222s
 500 - 26000 REPLACE on TEXT PK....................................    0.222s
 500 - 26000 REPLACE on TEXT PK....................................    0.221s
 500 - 26000 REPLACE on TEXT PK....................................    0.353s
 510 - 26000 SELECTS on a TEXT PK..................................    0.353s
 510 - 26000 SELECTS on a TEXT PK..................................    0.354s
 510 - 26000 SELECTS on a TEXT PK..................................    0.354s
 510 - 26000 SELECTS on a TEXT PK..................................    0.363s
 520 - 26000 SELECT DISTINCT.......................................    0.364s
 520 - 26000 SELECT DISTINCT.......................................    0.364s
 520 - 26000 SELECT DISTINCT.......................................    0.362s
 520 - 26000 SELECT DISTINCT.......................................    0.246s
 980 - PRAGMA integrity_check......................................    0.247s
 980 - PRAGMA integrity_check......................................    0.260s
 980 - PRAGMA integrity_check......................................    0.251s
 980 - PRAGMA integrity_check......................................    0.492s
 990 - ANALYZE.....................................................    0.494s
 990 - ANALYZE.....................................................    0.498s
 990 - ANALYZE.....................................................    0.495s
 990 - ANALYZE.....................................................    0.081s
       TOTAL.......................................................    8.396s
   0.084s
       TOTAL.......................................................    8.420s
   0.088s
       TOTAL.......................................................    8.489s
   0.089s
       TOTAL.......................................................    8.483s
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
# started on Wed Mar  3 04:50:11 2021


 Performance counter stats for 'system wide':

S0-C0           1           8,530.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              2,075      context-switches          #    0.243 K/sec                  
S0-C0           1                 99      cpu-migrations            #    0.012 K/sec                  
S0-C0           1              1,827      page-faults               #    0.214 K/sec                  
S0-C0           1      1,385,841,734      cycles                    #    0.162 GHz                    
S0-C0           1        622,906,190      instructions              #    0.45  insn per cycle         
S0-C0           1        609,967,250      branches                  #   71.507 M/sec                  
S0-C0           1         87,307,489      branch-misses             #   14.31% of all branches        
S0-C1           1           8,530.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,141      context-switches          #    0.134 K/sec                  
S0-C1           1                 88      cpu-migrations            #    0.010 K/sec                  
S0-C1           1              1,856      page-faults               #    0.218 K/sec                  
S0-C1           1      1,387,875,530      cycles                    #    0.163 GHz                    
S0-C1           1        606,482,459      instructions              #    0.44  insn per cycle         
S0-C1           1        607,709,717      branches                  #   71.243 M/sec                  
S0-C1           1         85,780,124      branch-misses             #   14.12% of all branches        
S0-C2           1           8,530.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,382      context-switches          #    0.162 K/sec                  
S0-C2           1                116      cpu-migrations            #    0.014 K/sec                  
S0-C2           1              1,842      page-faults               #    0.216 K/sec                  
S0-C2           1      1,293,897,252      cycles                    #    0.152 GHz                    
S0-C2           1        603,315,242      instructions              #    0.47  insn per cycle         
S0-C2           1        607,219,633      branches                  #   71.185 M/sec                  
S0-C2           1         86,588,100      branch-misses             #   14.26% of all branches        
S0-C3           1           8,530.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                781      context-switches          #    0.092 K/sec                  
S0-C3           1                 94      cpu-migrations            #    0.011 K/sec                  
S0-C3           1              1,951      page-faults               #    0.229 K/sec                  
S0-C3           1      1,319,380,507      cycles                    #    0.155 GHz                    
S0-C3           1        616,274,515      instructions              #    0.47  insn per cycle         
S0-C3           1        608,839,858      branches                  #   71.375 M/sec                  
S0-C3           1         87,003,654      branch-misses             #   14.29% of all branches        

       8.530585458 seconds time elapsed

================================================================================
perf stat -o go_word2vec_4_threads.txt  --per-core -a taskset -c 0-3 ./go_word2vec.sh 4
/home/mendel/sd_card/i-benchmarks/golang/bin
Save trained vectors to example/word_vectors_sg.txt
# started on Wed Mar  3 04:50:20 2021


 Performance counter stats for 'system wide':

S0-C0           1          41,152.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,951      context-switches          #    0.193 K/sec                  
S0-C0           1                 92      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             11,614      page-faults               #    0.282 K/sec                  
S0-C0           1      2,357,492,454      cycles                    #    0.057 GHz                    
S0-C0           1      2,891,179,960      instructions              #    1.23  insn per cycle         
S0-C0           1      2,229,938,576      branches                  #   54.187 M/sec                  
S0-C0           1         64,625,484      branch-misses             #    2.90% of all branches        
S0-C1           1          41,152.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              9,779      context-switches          #    0.238 K/sec                  
S0-C1           1                 77      cpu-migrations            #    0.002 K/sec                  
S0-C1           1                273      page-faults               #    0.007 K/sec                  
S0-C1           1      1,005,270,730      cycles                    #    0.024 GHz                    
S0-C1           1      3,089,357,166      instructions              #    3.07  insn per cycle         
S0-C1           1      1,865,959,629      branches                  #   45.343 M/sec                  
S0-C1           1         33,480,373      branch-misses             #    1.79% of all branches        
S0-C2           1          41,152.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              7,368      context-switches          #    0.179 K/sec                  
S0-C2           1                 65      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             21,703      page-faults               #    0.527 K/sec                  
S0-C2           1      2,397,329,215      cycles                    #    0.058 GHz                    
S0-C2           1      2,810,629,539      instructions              #    1.17  insn per cycle         
S0-C2           1      2,218,793,262      branches                  #   53.917 M/sec                  
S0-C2           1         58,981,152      branch-misses             #    2.66% of all branches        
S0-C3           1          41,152.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,292      context-switches          #    0.177 K/sec                  
S0-C3           1                 56      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                495      page-faults               #    0.012 K/sec                  
S0-C3           1      1,211,089,223      cycles                    #    0.029 GHz                    
S0-C3           1      3,246,822,039      instructions              #    2.68  insn per cycle         
S0-C3           1      1,882,418,905      branches                  #   45.743 M/sec                  
S0-C3           1         34,212,713      branch-misses             #    1.82% of all branches        

      41.153086754 seconds time elapsed

================================================================================
================================================================================
Running run_forest_importances_faces test
perf stat -o ../output/run_forest_importances_faces.log --per-core -a taskset -c 0-3 ./run_forest_importances_faces.sh -n 4

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 13.219s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 13.527s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 13.490s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 13.469s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 04:51:01 2021


 Performance counter stats for 'system wide':

S0-C0           1          23,176.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              3,797      context-switches          #    0.164 K/sec                  
S0-C0           1                 63      cpu-migrations            #    0.003 K/sec                  
S0-C0           1             35,594      page-faults               #    0.002 M/sec                  
S0-C0           1        721,591,227      cycles                    #    0.031 GHz                    
S0-C0           1      2,332,368,371      instructions              #    3.23  insn per cycle         
S0-C0           1        726,866,525      branches                  #   31.362 M/sec                  
S0-C0           1        183,540,114      branch-misses             #   25.25% of all branches        
S0-C1           1          23,176.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,894      context-switches          #    0.082 K/sec                  
S0-C1           1                 64      cpu-migrations            #    0.003 K/sec                  
S0-C1           1             39,985      page-faults               #    0.002 M/sec                  
S0-C1           1      1,082,806,951      cycles                    #    0.047 GHz                    
S0-C1           1      2,364,503,771      instructions              #    2.18  insn per cycle         
S0-C1           1        733,781,372      branches                  #   31.660 M/sec                  
S0-C1           1        184,636,968      branch-misses             #   25.16% of all branches        
S0-C2           1          23,176.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,435      context-switches          #    0.062 K/sec                  
S0-C2           1                 67      cpu-migrations            #    0.003 K/sec                  
S0-C2           1             41,575      page-faults               #    0.002 M/sec                  
S0-C2           1      1,122,502,122      cycles                    #    0.048 GHz                    
S0-C2           1      2,374,710,130      instructions              #    2.12  insn per cycle         
S0-C2           1        734,619,167      branches                  #   31.696 M/sec                  
S0-C2           1        184,234,997      branch-misses             #   25.08% of all branches        
S0-C3           1          23,176.92 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,925      context-switches          #    0.083 K/sec                  
S0-C3           1                 56      cpu-migrations            #    0.002 K/sec                  
S0-C3           1             41,273      page-faults               #    0.002 M/sec                  
S0-C3           1      1,005,291,488      cycles                    #    0.043 GHz                    
S0-C3           1      2,440,567,713      instructions              #    2.43  insn per cycle         
S0-C3           1        743,247,146      branches                  #   32.068 M/sec                  
S0-C3           1        184,363,988      branch-misses             #   24.81% of all branches        

      23.177458410 seconds time elapsed

================================================================================
Running run_multioutput_face_completion test
perf stat -o ../output/run_multioutput_face_completion.log --per-core -a taskset -c 0-3 ./run_multioutput_face_completion.sh -n 4

==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.


/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 04:51:24 2021


 Performance counter stats for 'system wide':

S0-C0           1          62,798.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,752      context-switches          #    0.108 K/sec                  
S0-C0           1                142      cpu-migrations            #    0.002 K/sec                  
S0-C0           1            121,267      page-faults               #    0.002 M/sec                  
S0-C0           1      3,621,650,449      cycles                    #    0.058 GHz                    
S0-C0           1      3,717,437,686      instructions              #    1.03  insn per cycle         
S0-C0           1      1,545,029,777      branches                  #   24.603 M/sec                  
S0-C0           1        148,149,675      branch-misses             #    9.59% of all branches        
S0-C1           1          62,798.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,731      context-switches          #    0.123 K/sec                  
S0-C1           1                131      cpu-migrations            #    0.002 K/sec                  
S0-C1           1            118,702      page-faults               #    0.002 M/sec                  
S0-C1           1      3,298,114,458      cycles                    #    0.053 GHz                    
S0-C1           1      3,770,976,296      instructions              #    1.14  insn per cycle         
S0-C1           1      1,549,906,228      branches                  #   24.681 M/sec                  
S0-C1           1        148,846,492      branch-misses             #    9.60% of all branches        
S0-C2           1          62,798.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,853      context-switches          #    0.061 K/sec                  
S0-C2           1                137      cpu-migrations            #    0.002 K/sec                  
S0-C2           1            119,565      page-faults               #    0.002 M/sec                  
S0-C2           1      3,383,772,713      cycles                    #    0.054 GHz                    
S0-C2           1      3,724,327,615      instructions              #    1.10  insn per cycle         
S0-C2           1      1,545,652,971      branches                  #   24.613 M/sec                  
S0-C2           1        147,893,980      branch-misses             #    9.57% of all branches        
S0-C3           1          62,798.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,580      context-switches          #    0.073 K/sec                  
S0-C3           1                127      cpu-migrations            #    0.002 K/sec                  
S0-C3           1            120,668      page-faults               #    0.002 M/sec                  
S0-C3           1      3,268,625,215      cycles                    #    0.052 GHz                    
S0-C3           1      3,771,580,801      instructions              #    1.15  insn per cycle         
S0-C3           1      1,551,081,172      branches                  #   24.699 M/sec                  
S0-C3           1        148,774,119      branch-misses             #    9.59% of all branches        

      62.799661408 seconds time elapsed

================================================================================
Running run_logistic_path test
perf stat -o ../output/run_logistic_path.log --per-core -a taskset -c 0-3 ./run_logistic_path.sh -n 4

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 38.920s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 39.517s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 41.699s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 41.761s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 04:52:27 2021


 Performance counter stats for 'system wide':

S0-C0           1          49,782.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             18,747      context-switches          #    0.377 K/sec                  
S0-C0           1                 89      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             22,538      page-faults               #    0.453 K/sec                  
S0-C0           1        490,497,602      cycles                    #    0.010 GHz                    
S0-C0           1      4,165,812,672      instructions              #    8.49  insn per cycle         
S0-C0           1      2,625,817,332      branches                  #   52.746 M/sec                  
S0-C0           1        485,564,730      branch-misses             #   18.49% of all branches        
S0-C1           1          49,782.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,103      context-switches          #    0.082 K/sec                  
S0-C1           1                 84      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             18,808      page-faults               #    0.378 K/sec                  
S0-C1           1      3,284,466,630      cycles                    #    0.066 GHz                    
S0-C1           1      3,802,538,896      instructions              #    1.16  insn per cycle         
S0-C1           1      2,576,604,476      branches                  #   51.757 M/sec                  
S0-C1           1        482,403,600      branch-misses             #   18.72% of all branches        
S0-C2           1          49,782.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,590      context-switches          #    0.052 K/sec                  
S0-C2           1                 75      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             29,289      page-faults               #    0.588 K/sec                  
S0-C2           1      2,952,017,759      cycles                    #    0.059 GHz                    
S0-C2           1        318,155,695      instructions              #    0.11  insn per cycle         
S0-C2           1      2,675,698,089      branches                  #   53.748 M/sec                  
S0-C2           1        446,304,448      branch-misses             #   16.68% of all branches        
S0-C3           1          49,782.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,556      context-switches          #    0.112 K/sec                  
S0-C3           1                 73      cpu-migrations            #    0.001 K/sec                  
S0-C3           1             25,535      page-faults               #    0.513 K/sec                  
S0-C3           1      2,321,231,125      cycles                    #    0.047 GHz                    
S0-C3           1      4,235,099,794      instructions              #    1.82  insn per cycle         
S0-C3           1      2,630,779,128      branches                  #   52.846 M/sec                  
S0-C3           1        439,217,905      branch-misses             #   16.70% of all branches        

      49.783168240 seconds time elapsed

================================================================================
Running run_plot_svm_nonlinear test
perf stat -o ../output/run_plot_svm_nonlinear.log --per-core -a taskset -c 0-3 ./run_plot_svm_nonlinear.sh -n 4

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 04:53:17 2021


 Performance counter stats for 'system wide':

S0-C0           1          16,188.62 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,940      context-switches          #    0.120 K/sec                  
S0-C0           1                 58      cpu-migrations            #    0.004 K/sec                  
S0-C0           1             28,595      page-faults               #    0.002 M/sec                  
S0-C0           1      1,033,544,159      cycles                    #    0.064 GHz                    
S0-C0           1         31,806,215      instructions              #    0.03  insn per cycle         
S0-C0           1        894,311,874      branches                  #   55.243 M/sec                  
S0-C0           1         78,459,649      branch-misses             #    8.77% of all branches        
S0-C1           1          16,188.62 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,047      context-switches          #    0.126 K/sec                  
S0-C1           1                 64      cpu-migrations            #    0.004 K/sec                  
S0-C1           1             27,782      page-faults               #    0.002 M/sec                  
S0-C1           1      1,000,193,590      cycles                    #    0.062 GHz                    
S0-C1           1         53,763,776      instructions              #    0.05  insn per cycle         
S0-C1           1        897,130,530      branches                  #   55.417 M/sec                  
S0-C1           1         78,546,954      branch-misses             #    8.76% of all branches        
S0-C2           1          16,188.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,180      context-switches          #    0.073 K/sec                  
S0-C2           1                 62      cpu-migrations            #    0.004 K/sec                  
S0-C2           1             28,382      page-faults               #    0.002 M/sec                  
S0-C2           1      1,007,189,932      cycles                    #    0.062 GHz                    
S0-C2           1         36,432,550      instructions              #    0.04  insn per cycle         
S0-C2           1        895,560,473      branches                  #   55.320 M/sec                  
S0-C2           1         78,279,959      branch-misses             #    8.74% of all branches        
S0-C3           1          16,188.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,702      context-switches          #    0.105 K/sec                  
S0-C3           1                 63      cpu-migrations            #    0.004 K/sec                  
S0-C3           1             29,360      page-faults               #    0.002 M/sec                  
S0-C3           1      1,002,824,635      cycles                    #    0.062 GHz                    
S0-C3           1         11,826,294      instructions              #    0.01  insn per cycle         
S0-C3           1        892,417,680      branches                  #   55.126 M/sec                  
S0-C3           1         77,748,947      branch-misses             #    8.71% of all branches        

      16.189132445 seconds time elapsed

================================================================================
Running run_plot_theilsen test
perf stat -o ../output/run_plot_theilsen.log --per-core -a taskset -c 0-3 ./run_plot_theilsen.sh -n 4

====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 04:53:33 2021


 Performance counter stats for 'system wide':

S0-C0           1          38,659.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              4,019      context-switches          #    0.104 K/sec                  
S0-C0           1                 77      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             40,991      page-faults               #    0.001 M/sec                  
S0-C0           1      4,095,066,793      cycles                    #    0.106 GHz                    
S0-C0           1        920,167,879      instructions              #    0.22  insn per cycle         
S0-C0           1      1,117,555,971      branches                  #   28.908 M/sec                  
S0-C0           1        332,126,496      branch-misses             #   29.72% of all branches        
S0-C1           1          38,659.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,727      context-switches          #    0.122 K/sec                  
S0-C1           1                 91      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             46,221      page-faults               #    0.001 M/sec                  
S0-C1           1      4,163,100,533      cycles                    #    0.108 GHz                    
S0-C1           1      1,046,426,508      instructions              #    0.25  insn per cycle         
S0-C1           1      1,133,970,886      branches                  #   29.332 M/sec                  
S0-C1           1        331,963,914      branch-misses             #   29.27% of all branches        
S0-C2           1          38,659.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,958      context-switches          #    0.051 K/sec                  
S0-C2           1                 74      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             47,583      page-faults               #    0.001 M/sec                  
S0-C2           1        231,771,011      cycles                    #    0.006 GHz                    
S0-C2           1      1,108,228,232      instructions              #    4.78  insn per cycle         
S0-C2           1      1,143,547,255      branches                  #   29.580 M/sec                  
S0-C2           1        331,940,170      branch-misses             #   29.03% of all branches        
S0-C3           1          38,659.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,954      context-switches          #    0.076 K/sec                  
S0-C3           1                 75      cpu-migrations            #    0.002 K/sec                  
S0-C3           1             44,211      page-faults               #    0.001 M/sec                  
S0-C3           1      4,047,216,606      cycles                    #    0.105 GHz                    
S0-C3           1        938,211,443      instructions              #    0.23  insn per cycle         
S0-C3           1      1,120,996,751      branches                  #   28.997 M/sec                  
S0-C3           1        329,551,857      branch-misses             #   29.40% of all branches        

      38.659991619 seconds time elapsed

================================================================================
================================================================================
perf stat -o 099_go.log --per-core -a taskset -c 0-3 ./spec95_099_go.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:54:12 2021


 Performance counter stats for 'system wide':

S0-C0           1          55,612.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              9,170      context-switches          #    0.165 K/sec                  
S0-C0           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                398      page-faults               #    0.007 K/sec                  
S0-C0           1      2,147,227,604      cycles                    #    0.039 GHz                    
S0-C0           1      1,382,495,631      instructions              #    0.64  insn per cycle         
S0-C0           1      2,636,803,040      branches                  #   47.414 M/sec                  
S0-C0           1      1,082,316,432      branch-misses             #   41.05% of all branches        
S0-C1           1          55,612.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,216      context-switches          #    0.040 K/sec                  
S0-C1           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                256      page-faults               #    0.005 K/sec                  
S0-C1           1      1,632,408,849      cycles                    #    0.029 GHz                    
S0-C1           1      1,326,419,991      instructions              #    0.81  insn per cycle         
S0-C1           1      2,629,207,194      branches                  #   47.277 M/sec                  
S0-C1           1      1,079,761,592      branch-misses             #   41.07% of all branches        
S0-C2           1          55,612.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,526      context-switches          #    0.027 K/sec                  
S0-C2           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                257      page-faults               #    0.005 K/sec                  
S0-C2           1      1,581,236,714      cycles                    #    0.028 GHz                    
S0-C2           1      1,321,774,407      instructions              #    0.84  insn per cycle         
S0-C2           1      2,628,605,871      branches                  #   47.266 M/sec                  
S0-C2           1      1,079,653,082      branch-misses             #   41.07% of all branches        
S0-C3           1          55,612.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,895      context-switches          #    0.052 K/sec                  
S0-C3           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                566      page-faults               #    0.010 K/sec                  
S0-C3           1      1,593,417,905      cycles                    #    0.029 GHz                    
S0-C3           1      1,335,539,391      instructions              #    0.84  insn per cycle         
S0-C3           1      2,630,670,947      branches                  #   47.303 M/sec                  
S0-C3           1      1,080,077,926      branch-misses             #   41.06% of all branches        

      55.613648269 seconds time elapsed

================================================================================
perf stat -o 101_tomcatv.log --per-core -a taskset -c 0-3 ./spec95_101_tomcatv.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:55:08 2021


 Performance counter stats for 'system wide':

S0-C0           1          87,504.07 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,355      context-switches          #    0.095 K/sec                  
S0-C0           1                 36      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              3,776      page-faults               #    0.043 K/sec                  
S0-C0           1      1,911,214,454      cycles                    #    0.022 GHz                    
S0-C0           1      3,234,788,780      instructions              #    1.69  insn per cycle         
S0-C0           1        852,784,844      branches                  #    9.746 M/sec                  
S0-C0           1         31,836,249      branch-misses             #    3.73% of all branches        
S0-C1           1          87,504.07 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1             10,047      context-switches          #    0.115 K/sec                  
S0-C1           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              4,081      page-faults               #    0.047 K/sec                  
S0-C1           1      1,497,160,386      cycles                    #    0.017 GHz                    
S0-C1           1      3,222,196,191      instructions              #    2.15  insn per cycle         
S0-C1           1        850,409,016      branches                  #    9.719 M/sec                  
S0-C1           1         31,053,063      branch-misses             #    3.65% of all branches        
S0-C2           1          87,504.07 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,206      context-switches          #    0.037 K/sec                  
S0-C2           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              3,776      page-faults               #    0.043 K/sec                  
S0-C2           1      1,776,344,484      cycles                    #    0.020 GHz                    
S0-C2           1      3,172,677,553      instructions              #    1.79  insn per cycle         
S0-C2           1        843,982,225      branches                  #    9.645 M/sec                  
S0-C2           1         29,878,638      branch-misses             #    3.54% of all branches        
S0-C3           1          87,504.07 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,211      context-switches          #    0.060 K/sec                  
S0-C3           1                 30      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              3,934      page-faults               #    0.045 K/sec                  
S0-C3           1      1,443,240,034      cycles                    #    0.016 GHz                    
S0-C3           1      3,189,853,509      instructions              #    2.21  insn per cycle         
S0-C3           1        846,675,775      branches                  #    9.676 M/sec                  
S0-C3           1         30,164,110      branch-misses             #    3.56% of all branches        

      87.505181674 seconds time elapsed

================================================================================
perf stat -o 102_swim.log --per-core -a taskset -c 0-3 ./spec95_102_swim.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:56:35 2021


 Performance counter stats for 'system wide':

S0-C0           1          74,308.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             20,588      context-switches          #    0.277 K/sec                  
S0-C0           1                 39      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              4,044      page-faults               #    0.054 K/sec                  
S0-C0           1      1,563,215,208      cycles                    #    0.021 GHz                    
S0-C0           1      1,902,254,596      instructions              #    1.22  insn per cycle         
S0-C0           1        208,726,018      branches                  #    2.809 M/sec                  
S0-C0           1          9,183,623      branch-misses             #    4.40% of all branches        
S0-C1           1          74,308.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,561      context-switches          #    0.048 K/sec                  
S0-C1           1                 27      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              3,829      page-faults               #    0.052 K/sec                  
S0-C1           1      1,224,527,127      cycles                    #    0.016 GHz                    
S0-C1           1      1,768,837,656      instructions              #    1.44  insn per cycle         
S0-C1           1        183,576,214      branches                  #    2.470 M/sec                  
S0-C1           1          3,457,463      branch-misses             #    1.88% of all branches        
S0-C2           1          74,308.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,218      context-switches          #    0.043 K/sec                  
S0-C2           1                 30      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              3,775      page-faults               #    0.051 K/sec                  
S0-C2           1      2,008,303,790      cycles                    #    0.027 GHz                    
S0-C2           1      1,827,353,563      instructions              #    0.91  insn per cycle         
S0-C2           1        184,941,116      branches                  #    2.489 M/sec                  
S0-C2           1          3,347,270      branch-misses             #    1.81% of all branches        
S0-C3           1          74,308.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,319      context-switches          #    0.058 K/sec                  
S0-C3           1                 41      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              3,927      page-faults               #    0.053 K/sec                  
S0-C3           1      1,379,490,222      cycles                    #    0.019 GHz                    
S0-C3           1      1,777,980,523      instructions              #    1.29  insn per cycle         
S0-C3           1        185,049,075      branches                  #    2.490 M/sec                  
S0-C3           1          3,688,466      branch-misses             #    1.99% of all branches        

      74.309707564 seconds time elapsed

================================================================================
perf stat -o 103_su2cor.log --per-core -a taskset -c 0-3 ./spec95_103_su2cor.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:57:50 2021


 Performance counter stats for 'system wide':

S0-C0           1         128,877.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             14,467      context-switches          #    0.112 K/sec                  
S0-C0           1                 46      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,202      page-faults               #    0.048 K/sec                  
S0-C0           1         90,579,672      cycles                    #    0.001 GHz                    
S0-C0           1      4,293,249,761      instructions              #   47.40  insn per cycle         
S0-C0           1      1,207,316,858      branches                  #    9.368 M/sec                  
S0-C0           1        110,376,421      branch-misses             #    9.14% of all branches        
S0-C1           1         128,877.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,431      context-switches          #    0.042 K/sec                  
S0-C1           1                 33      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,106      page-faults               #    0.047 K/sec                  
S0-C1           1      3,872,184,937      cycles                    #    0.030 GHz                    
S0-C1           1      4,191,903,035      instructions              #    1.08  insn per cycle         
S0-C1           1      1,193,021,021      branches                  #    9.257 M/sec                  
S0-C1           1        107,890,699      branch-misses             #    9.04% of all branches        
S0-C2           1         128,877.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,752      context-switches          #    0.037 K/sec                  
S0-C2           1                 23      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,211      page-faults               #    0.048 K/sec                  
S0-C2           1      4,124,840,834      cycles                    #    0.032 GHz                    
S0-C2           1      4,188,789,139      instructions              #    1.02  insn per cycle         
S0-C2           1      1,192,584,305      branches                  #    9.254 M/sec                  
S0-C2           1        107,725,064      branch-misses             #    9.03% of all branches        
S0-C3           1         128,877.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             15,851      context-switches          #    0.123 K/sec                  
S0-C3           1                 17      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,373      page-faults               #    0.049 K/sec                  
S0-C3           1        175,416,605      cycles                    #    0.001 GHz                    
S0-C3           1      4,270,890,690      instructions              #   24.35  insn per cycle         
S0-C3           1      1,203,800,447      branches                  #    9.341 M/sec                  
S0-C3           1        110,113,714      branch-misses             #    9.15% of all branches        

     128.878829083 seconds time elapsed

================================================================================
perf stat -o 104_hydro2d.log --per-core -a taskset -c 0-3 ./spec95_104_hydro2d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:59:59 2021


 Performance counter stats for 'system wide':

S0-C0           1         108,870.14 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             14,882      context-switches          #    0.137 K/sec                  
S0-C0           1                 28      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,342      page-faults               #    0.022 K/sec                  
S0-C0           1      2,856,394,385      cycles                    #    0.026 GHz                    
S0-C0           1      1,507,189,142      instructions              #    0.53  insn per cycle         
S0-C0           1      2,624,636,474      branches                  #   24.108 M/sec                  
S0-C0           1         22,634,831      branch-misses             #    0.86% of all branches        
S0-C1           1         108,870.15 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,725      context-switches          #    0.053 K/sec                  
S0-C1           1                 14      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,658      page-faults               #    0.024 K/sec                  
S0-C1           1      2,285,790,089      cycles                    #    0.021 GHz                    
S0-C1           1      1,416,372,586      instructions              #    0.62  insn per cycle         
S0-C1           1      2,612,287,055      branches                  #   23.995 M/sec                  
S0-C1           1         19,937,047      branch-misses             #    0.76% of all branches        
S0-C2           1         108,870.15 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,534      context-switches          #    0.042 K/sec                  
S0-C2           1                 16      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,339      page-faults               #    0.021 K/sec                  
S0-C2           1      2,291,339,167      cycles                    #    0.021 GHz                    
S0-C2           1      1,403,990,464      instructions              #    0.61  insn per cycle         
S0-C2           1      2,610,652,682      branches                  #   23.980 M/sec                  
S0-C2           1         19,511,141      branch-misses             #    0.75% of all branches        
S0-C3           1         108,870.15 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              6,150      context-switches          #    0.056 K/sec                  
S0-C3           1                 22      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,480      page-faults               #    0.023 K/sec                  
S0-C3           1      2,776,481,715      cycles                    #    0.026 GHz                    
S0-C3           1      1,421,352,929      instructions              #    0.51  insn per cycle         
S0-C3           1      2,613,498,300      branches                  #   24.006 M/sec                  
S0-C3           1         20,090,253      branch-misses             #    0.77% of all branches        

     108.871479355 seconds time elapsed

================================================================================
perf stat -o 107_mgrid.log --per-core -a taskset -c 0-3 ./spec95_107_mgrid.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:01:48 2021


 Performance counter stats for 'system wide':

S0-C0           1         116,202.51 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             22,552      context-switches          #    0.194 K/sec                  
S0-C0           1                 52      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,398      page-faults               #    0.021 K/sec                  
S0-C0           1        399,647,751      cycles                    #    0.003 GHz                    
S0-C0           1        405,777,685      instructions              #    1.02  insn per cycle         
S0-C0           1        747,040,170      branches                  #    6.429 M/sec                  
S0-C0           1         42,006,307      branch-misses             #    5.62% of all branches        
S0-C1           1         116,202.51 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1             12,543      context-switches          #    0.108 K/sec                  
S0-C1           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,306      page-faults               #    0.020 K/sec                  
S0-C1           1      3,979,074,695      cycles                    #    0.034 GHz                    
S0-C1           1        234,266,437      instructions              #    0.06  insn per cycle         
S0-C1           1        722,048,961      branches                  #    6.214 M/sec                  
S0-C1           1         36,623,600      branch-misses             #    5.07% of all branches        
S0-C2           1         116,202.51 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,067      context-switches          #    0.044 K/sec                  
S0-C2           1                 31      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,198      page-faults               #    0.019 K/sec                  
S0-C2           1      3,825,352,192      cycles                    #    0.033 GHz                    
S0-C2           1        179,504,848      instructions              #    0.05  insn per cycle         
S0-C2           1        715,015,880      branches                  #    6.153 M/sec                  
S0-C2           1         34,920,756      branch-misses             #    4.88% of all branches        
S0-C3           1         116,202.51 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              6,231      context-switches          #    0.054 K/sec                  
S0-C3           1                 38      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              1,742      page-faults               #    0.015 K/sec                  
S0-C3           1      3,808,484,125      cycles                    #    0.033 GHz                    
S0-C3           1        187,043,985      instructions              #    0.05  insn per cycle         
S0-C3           1        716,586,254      branches                  #    6.167 M/sec                  
S0-C3           1         35,192,308      branch-misses             #    4.91% of all branches        

     116.203857106 seconds time elapsed

================================================================================
perf stat -o 110_applu.log --per-core -a taskset -c 0-3 ./spec95_110_applu.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:03:44 2021


 Performance counter stats for 'system wide':

S0-C0           1          93,731.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,269      context-switches          #    0.088 K/sec                  
S0-C0           1                 20      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              7,691      page-faults               #    0.082 K/sec                  
S0-C0           1      2,051,911,942      cycles                    #    0.022 GHz                    
S0-C0           1        451,356,729      instructions              #    0.22  insn per cycle         
S0-C0           1        353,393,719      branches                  #    3.770 M/sec                  
S0-C0           1         19,755,165      branch-misses             #    5.59% of all branches        
S0-C1           1          93,731.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,307      context-switches          #    0.046 K/sec                  
S0-C1           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              7,812      page-faults               #    0.083 K/sec                  
S0-C1           1      2,043,958,466      cycles                    #    0.022 GHz                    
S0-C1           1        399,827,609      instructions              #    0.20  insn per cycle         
S0-C1           1        346,102,597      branches                  #    3.692 M/sec                  
S0-C1           1         18,084,147      branch-misses             #    5.23% of all branches        
S0-C2           1          93,731.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,909      context-switches          #    0.042 K/sec                  
S0-C2           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              7,591      page-faults               #    0.081 K/sec                  
S0-C2           1      2,033,494,663      cycles                    #    0.022 GHz                    
S0-C2           1        394,238,844      instructions              #    0.19  insn per cycle         
S0-C2           1        345,384,533      branches                  #    3.685 M/sec                  
S0-C2           1         17,875,618      branch-misses             #    5.18% of all branches        
S0-C3           1          93,731.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             11,316      context-switches          #    0.121 K/sec                  
S0-C3           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              7,541      page-faults               #    0.080 K/sec                  
S0-C3           1      2,044,209,854      cycles                    #    0.022 GHz                    
S0-C3           1        449,584,941      instructions              #    0.22  insn per cycle         
S0-C3           1        353,028,990      branches                  #    3.766 M/sec                  
S0-C3           1         19,445,303      branch-misses             #    5.51% of all branches        

      93.732820905 seconds time elapsed

================================================================================
perf stat -o 125_turb3d.log --per-core -a taskset -c 0-3 ./spec95_125_turb3d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:05:18 2021


 Performance counter stats for 'system wide':

S0-C0           1         127,990.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             20,427      context-switches          #    0.160 K/sec                  
S0-C0           1                 28      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,530      page-faults               #    0.051 K/sec                  
S0-C0           1      2,792,528,952      cycles                    #    0.022 GHz                    
S0-C0           1      1,985,473,369      instructions              #    0.71  insn per cycle         
S0-C0           1      3,588,287,185      branches                  #   28.036 M/sec                  
S0-C0           1        295,852,286      branch-misses             #    8.24% of all branches        
S0-C1           1         127,990.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,390      context-switches          #    0.026 K/sec                  
S0-C1           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,576      page-faults               #    0.051 K/sec                  
S0-C1           1      2,065,214,853      cycles                    #    0.016 GHz                    
S0-C1           1      1,837,721,977      instructions              #    0.89  insn per cycle         
S0-C1           1      3,568,310,989      branches                  #   27.879 M/sec                  
S0-C1           1        288,465,868      branch-misses             #    8.08% of all branches        
S0-C2           1         127,990.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              6,495      context-switches          #    0.051 K/sec                  
S0-C2           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,790      page-faults               #    0.053 K/sec                  
S0-C2           1      1,875,066,819      cycles                    #    0.015 GHz                    
S0-C2           1      1,856,591,106      instructions              #    0.99  insn per cycle         
S0-C2           1      3,570,702,397      branches                  #   27.898 M/sec                  
S0-C2           1        289,032,898      branch-misses             #    8.09% of all branches        
S0-C3           1         127,990.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,733      context-switches          #    0.060 K/sec                  
S0-C3           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,681      page-faults               #    0.052 K/sec                  
S0-C3           1      2,192,266,279      cycles                    #    0.017 GHz                    
S0-C3           1      1,866,228,334      instructions              #    0.85  insn per cycle         
S0-C3           1      3,572,655,704      branches                  #   27.913 M/sec                  
S0-C3           1        289,554,474      branch-misses             #    8.10% of all branches        

     127.992082498 seconds time elapsed

================================================================================
perf stat -o 126_gcc.log --per-core -a taskset -c 0-3 ./spec95_126_gcc.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:07:26 2021


 Performance counter stats for 'system wide':

S0-C0           1           7,638.40 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              5,511      context-switches          #    0.721 K/sec                  
S0-C0           1                 17      cpu-migrations            #    0.002 K/sec                  
S0-C0           1              4,484      page-faults               #    0.587 K/sec                  
S0-C0           1      3,781,900,295      cycles                    #    0.495 GHz                    
S0-C0           1      3,387,057,402      instructions              #    0.90  insn per cycle         
S0-C0           1        464,264,158      branches                  #   60.780 M/sec                  
S0-C0           1        118,875,764      branch-misses             #   25.61% of all branches        
S0-C1           1           7,638.40 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,270      context-switches          #    0.297 K/sec                  
S0-C1           1                 32      cpu-migrations            #    0.004 K/sec                  
S0-C1           1              4,622      page-faults               #    0.605 K/sec                  
S0-C1           1      3,668,491,861      cycles                    #    0.480 GHz                    
S0-C1           1      3,339,515,646      instructions              #    0.91  insn per cycle         
S0-C1           1        457,514,822      branches                  #   59.897 M/sec                  
S0-C1           1        117,592,125      branch-misses             #   25.70% of all branches        
S0-C2           1           7,638.40 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                675      context-switches          #    0.088 K/sec                  
S0-C2           1                 26      cpu-migrations            #    0.003 K/sec                  
S0-C2           1              4,164      page-faults               #    0.545 K/sec                  
S0-C2           1      3,570,957,748      cycles                    #    0.468 GHz                    
S0-C2           1      3,326,369,581      instructions              #    0.93  insn per cycle         
S0-C2           1        455,791,569      branches                  #   59.671 M/sec                  
S0-C2           1        116,882,960      branch-misses             #   25.64% of all branches        
S0-C3           1           7,638.41 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,345      context-switches          #    0.307 K/sec                  
S0-C3           1                 28      cpu-migrations            #    0.004 K/sec                  
S0-C3           1              4,627      page-faults               #    0.606 K/sec                  
S0-C3           1      3,647,291,421      cycles                    #    0.477 GHz                    
S0-C3           1      3,335,831,245      instructions              #    0.91  insn per cycle         
S0-C3           1        457,137,510      branches                  #   59.847 M/sec                  
S0-C3           1        117,285,895      branch-misses             #   25.66% of all branches        

       7.638897988 seconds time elapsed

================================================================================
perf stat -o 129_compress.log --per-core -a taskset -c 0-3 ./spec95_129_compress.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:07:33 2021


 Performance counter stats for 'system wide':

S0-C0           1         186,133.62 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             35,160      context-switches          #    0.189 K/sec                  
S0-C0           1                 46      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              9,107      page-faults               #    0.049 K/sec                  
S0-C0           1      2,868,553,292      cycles                    #    0.015 GHz                    
S0-C0           1      1,422,819,612      instructions              #    0.50  insn per cycle         
S0-C0           1      3,692,562,903      branches                  #   19.838 M/sec                  
S0-C0           1        620,392,847      branch-misses             #   16.80% of all branches        
S0-C1           1         186,133.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              9,808      context-switches          #    0.053 K/sec                  
S0-C1           1                 31      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              9,254      page-faults               #    0.050 K/sec                  
S0-C1           1      1,129,041,274      cycles                    #    0.006 GHz                    
S0-C1           1      1,186,207,663      instructions              #    1.05  insn per cycle         
S0-C1           1      3,660,322,833      branches                  #   19.665 M/sec                  
S0-C1           1        613,142,082      branch-misses             #   16.75% of all branches        
S0-C2           1         186,133.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,809      context-switches          #    0.031 K/sec                  
S0-C2           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,424      page-faults               #    0.051 K/sec                  
S0-C2           1      1,513,395,101      cycles                    #    0.008 GHz                    
S0-C2           1      1,168,023,240      instructions              #    0.77  insn per cycle         
S0-C2           1      3,657,812,353      branches                  #   19.652 M/sec                  
S0-C2           1        612,362,072      branch-misses             #   16.74% of all branches        
S0-C3           1         186,133.60 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             12,928      context-switches          #    0.069 K/sec                  
S0-C3           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,108      page-faults               #    0.049 K/sec                  
S0-C3           1      2,681,855,824      cycles                    #    0.014 GHz                    
S0-C3           1      1,205,591,770      instructions              #    0.45  insn per cycle         
S0-C3           1      3,663,846,403      branches                  #   19.684 M/sec                  
S0-C3           1        613,459,454      branch-misses             #   16.74% of all branches        

     186.135884369 seconds time elapsed

================================================================================
perf stat -o 130_li.log --per-core -a taskset -c 0-3 ./spec95_130_li.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:10:40 2021


 Performance counter stats for 'system wide':

S0-C0           1         102,444.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,127      context-switches          #    0.079 K/sec                  
S0-C0           1                 28      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                436      page-faults               #    0.004 K/sec                  
S0-C0           1      1,986,244,229      cycles                    #    0.019 GHz                    
S0-C0           1      1,038,740,245      instructions              #    0.52  insn per cycle         
S0-C0           1      1,829,930,295      branches                  #   17.863 M/sec                  
S0-C0           1      1,042,238,219      branch-misses             #   56.96% of all branches        
S0-C1           1         102,444.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,502      context-switches          #    0.044 K/sec                  
S0-C1           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                293      page-faults               #    0.003 K/sec                  
S0-C1           1      1,886,105,102      cycles                    #    0.018 GHz                    
S0-C1           1        987,742,393      instructions              #    0.52  insn per cycle         
S0-C1           1      1,822,709,687      branches                  #   17.792 M/sec                  
S0-C1           1      1,040,163,509      branch-misses             #   57.07% of all branches        
S0-C2           1         102,444.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,696      context-switches          #    0.036 K/sec                  
S0-C2           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                608      page-faults               #    0.006 K/sec                  
S0-C2           1      1,913,373,626      cycles                    #    0.019 GHz                    
S0-C2           1        988,191,811      instructions              #    0.52  insn per cycle         
S0-C2           1      1,822,711,562      branches                  #   17.792 M/sec                  
S0-C2           1      1,040,200,403      branch-misses             #   57.07% of all branches        
S0-C3           1         102,444.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             13,632      context-switches          #    0.133 K/sec                  
S0-C3           1                 17      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                290      page-faults               #    0.003 K/sec                  
S0-C3           1      1,962,475,245      cycles                    #    0.019 GHz                    
S0-C3           1      1,051,292,873      instructions              #    0.54  insn per cycle         
S0-C3           1      1,831,449,404      branches                  #   17.877 M/sec                  
S0-C3           1      1,042,725,939      branch-misses             #   56.93% of all branches        

     102.445785334 seconds time elapsed

================================================================================
perf stat -o 132_ijpeg.log --per-core -a taskset -c 0-3 ./spec95_132_ijpeg.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:12:22 2021


 Performance counter stats for 'system wide':

S0-C0           1          29,704.19 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             11,420      context-switches          #    0.384 K/sec                  
S0-C0           1                 25      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              2,939      page-faults               #    0.099 K/sec                  
S0-C0           1      3,110,188,882      cycles                    #    0.105 GHz                    
S0-C0           1        368,631,730      instructions              #    0.12  insn per cycle         
S0-C0           1      1,133,344,525      branches                  #   38.154 M/sec                  
S0-C0           1        205,712,623      branch-misses             #   18.15% of all branches        
S0-C1           1          29,704.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,602      context-switches          #    0.121 K/sec                  
S0-C1           1                 15      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              2,792      page-faults               #    0.094 K/sec                  
S0-C1           1      2,981,278,927      cycles                    #    0.100 GHz                    
S0-C1           1        267,061,625      instructions              #    0.09  insn per cycle         
S0-C1           1      1,119,043,776      branches                  #   37.673 M/sec                  
S0-C1           1        202,754,839      branch-misses             #   18.12% of all branches        
S0-C2           1          29,704.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,445      context-switches          #    0.049 K/sec                  
S0-C2           1                 22      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              2,564      page-faults               #    0.086 K/sec                  
S0-C2           1      1,550,824,090      cycles                    #    0.052 GHz                    
S0-C2           1      3,719,514,221      instructions              #    2.40  insn per cycle         
S0-C2           1      1,066,631,273      branches                  #   35.908 M/sec                  
S0-C2           1        187,867,920      branch-misses             #   17.61% of all branches        
S0-C3           1          29,704.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,804      context-switches          #    0.061 K/sec                  
S0-C3           1                 21      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              2,427      page-faults               #    0.082 K/sec                  
S0-C3           1      3,337,570,381      cycles                    #    0.112 GHz                    
S0-C3           1      1,831,509,322      instructions              #    0.55  insn per cycle         
S0-C3           1        966,740,199      branches                  #   32.546 M/sec                  
S0-C3           1        165,051,029      branch-misses             #   17.07% of all branches        

      29.704812368 seconds time elapsed

================================================================================
perf stat -o 134_perl.log --per-core -a taskset -c 0-3 ./spec95_134_perl.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:12:52 2021


 Performance counter stats for 'system wide':

S0-C0           1          36,264.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              4,928      context-switches          #    0.136 K/sec                  
S0-C0           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              9,297      page-faults               #    0.256 K/sec                  
S0-C0           1        783,755,529      cycles                    #    0.022 GHz                    
S0-C0           1        827,885,015      instructions              #    1.06  insn per cycle         
S0-C0           1      2,730,065,275      branches                  #   75.281 M/sec                  
S0-C0           1        478,497,271      branch-misses             #   17.53% of all branches        
S0-C1           1          36,264.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                922      context-switches          #    0.025 K/sec                  
S0-C1           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              9,422      page-faults               #    0.260 K/sec                  
S0-C1           1      1,197,189,669      cycles                    #    0.033 GHz                    
S0-C1           1        797,432,443      instructions              #    0.67  insn per cycle         
S0-C1           1      2,725,786,173      branches                  #   75.163 M/sec                  
S0-C1           1        491,536,901      branch-misses             #   18.03% of all branches        
S0-C2           1          36,264.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,169      context-switches          #    0.032 K/sec                  
S0-C2           1                  5      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,152      page-faults               #    0.252 K/sec                  
S0-C2           1        961,460,180      cycles                    #    0.027 GHz                    
S0-C2           1        793,717,134      instructions              #    0.83  insn per cycle         
S0-C2           1      2,725,351,043      branches                  #   75.151 M/sec                  
S0-C2           1        491,721,496      branch-misses             #   18.04% of all branches        
S0-C3           1          36,264.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,573      context-switches          #    0.126 K/sec                  
S0-C3           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,200      page-faults               #    0.254 K/sec                  
S0-C3           1        224,588,466      cycles                    #    0.006 GHz                    
S0-C3           1        817,987,281      instructions              #    3.64  insn per cycle         
S0-C3           1      2,728,678,119      branches                  #   75.243 M/sec                  
S0-C3           1        478,089,476      branch-misses             #   17.52% of all branches        

      36.265431854 seconds time elapsed

================================================================================
perf stat -o 141_apsi.log --per-core -a taskset -c 0-3 ./spec95_141_apsi.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:13:28 2021


 Performance counter stats for 'system wide':

S0-C0           1          78,860.23 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,064      context-switches          #    0.090 K/sec                  
S0-C0           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              1,177      page-faults               #    0.015 K/sec                  
S0-C0           1      2,099,672,414      cycles                    #    0.027 GHz                    
S0-C0           1      2,108,544,446      instructions              #    1.00  insn per cycle         
S0-C0           1        874,030,439      branches                  #   11.083 M/sec                  
S0-C0           1         40,543,310      branch-misses             #    4.64% of all branches        
S0-C1           1          78,860.23 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,084      context-switches          #    0.064 K/sec                  
S0-C1           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                913      page-faults               #    0.012 K/sec                  
S0-C1           1      2,132,518,150      cycles                    #    0.027 GHz                    
S0-C1           1      2,072,727,802      instructions              #    0.97  insn per cycle         
S0-C1           1        869,009,818      branches                  #   11.020 M/sec                  
S0-C1           1         39,359,603      branch-misses             #    4.53% of all branches        
S0-C2           1          78,860.24 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,363      context-switches          #    0.055 K/sec                  
S0-C2           1                 27      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              1,109      page-faults               #    0.014 K/sec                  
S0-C2           1      2,048,126,947      cycles                    #    0.026 GHz                    
S0-C2           1      2,072,014,085      instructions              #    1.01  insn per cycle         
S0-C2           1        868,812,527      branches                  #   11.017 M/sec                  
S0-C2           1         39,766,445      branch-misses             #    4.58% of all branches        
S0-C3           1          78,860.24 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,521      context-switches          #    0.070 K/sec                  
S0-C3           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                916      page-faults               #    0.012 K/sec                  
S0-C3           1      2,149,197,453      cycles                    #    0.027 GHz                    
S0-C3           1      2,093,494,688      instructions              #    0.97  insn per cycle         
S0-C3           1        871,742,312      branches                  #   11.054 M/sec                  
S0-C3           1         40,148,392      branch-misses             #    4.61% of all branches        

      78.861255479 seconds time elapsed

================================================================================
perf stat -o 145_fpppp.log --per-core -a taskset -c 0-3 ./spec95_145_fpppp.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:14:47 2021


 Performance counter stats for 'system wide':

S0-C0           1         193,653.26 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             23,998      context-switches          #    0.124 K/sec                  
S0-C0           1                 34      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                672      page-faults               #    0.003 K/sec                  
S0-C0           1        866,748,749      cycles                    #    0.004 GHz                    
S0-C0           1      3,907,977,752      instructions              #    4.51  insn per cycle         
S0-C0           1      1,296,299,900      branches                  #    6.694 M/sec                  
S0-C0           1        127,866,290      branch-misses             #    9.86% of all branches        
S0-C1           1         193,653.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              8,739      context-switches          #    0.045 K/sec                  
S0-C1           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                239      page-faults               #    0.001 K/sec                  
S0-C1           1      3,752,414,223      cycles                    #    0.019 GHz                    
S0-C1           1      3,711,641,794      instructions              #    0.99  insn per cycle         
S0-C1           1      1,268,848,869      branches                  #    6.552 M/sec                  
S0-C1           1        121,595,285      branch-misses             #    9.58% of all branches        
S0-C2           1         193,653.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             10,186      context-switches          #    0.053 K/sec                  
S0-C2           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                427      page-faults               #    0.002 K/sec                  
S0-C2           1      3,886,809,416      cycles                    #    0.020 GHz                    
S0-C2           1      3,718,484,131      instructions              #    0.96  insn per cycle         
S0-C2           1      1,269,643,480      branches                  #    6.556 M/sec                  
S0-C2           1        121,951,007      branch-misses             #    9.61% of all branches        
S0-C3           1         193,653.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             21,896      context-switches          #    0.113 K/sec                  
S0-C3           1                 22      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                455      page-faults               #    0.002 K/sec                  
S0-C3           1      4,293,657,019      cycles                    #    0.022 GHz                    
S0-C3           1      3,819,026,637      instructions              #    0.89  insn per cycle         
S0-C3           1      1,283,508,548      branches                  #    6.628 M/sec                  
S0-C3           1        125,694,944      branch-misses             #    9.79% of all branches        

     193.655224298 seconds time elapsed

================================================================================
perf stat -o 146_wave5.log --per-core -a taskset -c 0-3 ./spec95_146_wave5.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:18:01 2021


 Performance counter stats for 'system wide':

S0-C0           1          80,867.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             12,063      context-switches          #    0.149 K/sec                  
S0-C0           1                 16      cpu-migrations            #    0.000 K/sec                  
S0-C0           1             10,476      page-faults               #    0.130 K/sec                  
S0-C0           1      3,764,368,369      cycles                    #    0.047 GHz                    
S0-C0           1      2,605,774,121      instructions              #    0.69  insn per cycle         
S0-C0           1      1,332,873,959      branches                  #   16.482 M/sec                  
S0-C0           1         18,803,880      branch-misses             #    1.41% of all branches        
S0-C1           1          80,867.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,078      context-switches          #    0.038 K/sec                  
S0-C1           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C1           1             10,782      page-faults               #    0.133 K/sec                  
S0-C1           1      3,266,553,153      cycles                    #    0.040 GHz                    
S0-C1           1      2,483,397,013      instructions              #    0.76  insn per cycle         
S0-C1           1      1,319,853,919      branches                  #   16.321 M/sec                  
S0-C1           1         15,722,708      branch-misses             #    1.19% of all branches        
S0-C2           1          80,867.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,232      context-switches          #    0.028 K/sec                  
S0-C2           1                  3      cpu-migrations            #    0.000 K/sec                  
S0-C2           1             10,471      page-faults               #    0.129 K/sec                  
S0-C2           1      4,038,210,479      cycles                    #    0.050 GHz                    
S0-C2           1      2,524,906,782      instructions              #    0.63  insn per cycle         
S0-C2           1      1,321,948,565      branches                  #   16.347 M/sec                  
S0-C2           1         15,468,629      branch-misses             #    1.17% of all branches        
S0-C3           1          80,867.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,704      context-switches          #    0.071 K/sec                  
S0-C3           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             10,629      page-faults               #    0.131 K/sec                  
S0-C3           1      3,443,109,837      cycles                    #    0.043 GHz                    
S0-C3           1      2,596,148,324      instructions              #    0.75  insn per cycle         
S0-C3           1      1,328,293,946      branches                  #   16.425 M/sec                  
S0-C3           1         16,291,868      branch-misses             #    1.23% of all branches        

      80.868831143 seconds time elapsed

================================================================================
perf stat -o 147_vortex.log --per-core -a taskset -c 0-3 ./spec95_147_vortex.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 05:19:22 2021


 Performance counter stats for 'system wide':

S0-C0           1         112,908.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,285      context-switches          #    0.073 K/sec                  
S0-C0           1                 20      cpu-migrations            #    0.000 K/sec                  
S0-C0           1             11,994      page-faults               #    0.106 K/sec                  
S0-C0           1      3,210,524,779      cycles                    #    0.028 GHz                    
S0-C0           1      3,477,692,719      instructions              #    1.08  insn per cycle         
S0-C0           1      1,547,803,677      branches                  #   13.709 M/sec                  
S0-C0           1        391,143,259      branch-misses             #   25.27% of all branches        
S0-C1           1         112,908.19 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,265      context-switches          #    0.047 K/sec                  
S0-C1           1                  4      cpu-migrations            #    0.000 K/sec                  
S0-C1           1             11,839      page-faults               #    0.105 K/sec                  
S0-C1           1      4,283,167,872      cycles                    #    0.038 GHz                    
S0-C1           1      3,431,070,995      instructions              #    0.80  insn per cycle         
S0-C1           1      1,541,290,910      branches                  #   13.651 M/sec                  
S0-C1           1        385,504,171      branch-misses             #   25.01% of all branches        
S0-C2           1         112,908.19 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,929      context-switches          #    0.035 K/sec                  
S0-C2           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C2           1             11,890      page-faults               #    0.105 K/sec                  
S0-C2           1      3,168,450,068      cycles                    #    0.028 GHz                    
S0-C2           1      3,425,825,711      instructions              #    1.08  insn per cycle         
S0-C2           1      1,540,472,977      branches                  #   13.644 M/sec                  
S0-C2           1        389,242,274      branch-misses             #   25.27% of all branches        
S0-C3           1         112,908.19 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             14,659      context-switches          #    0.130 K/sec                  
S0-C3           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             12,109      page-faults               #    0.107 K/sec                  
S0-C3           1      3,439,547,742      cycles                    #    0.030 GHz                    
S0-C3           1      3,502,529,965      instructions              #    1.02  insn per cycle         
S0-C3           1      1,550,965,375      branches                  #   13.737 M/sec                  
S0-C3           1        389,008,009      branch-misses             #   25.08% of all branches        

     112.909442804 seconds time elapsed

================================================================================
perf stat -o aes_benchmark.log --per-core -a taskset -c 0-3 ./aes_benchmark 4
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
# started on Wed Mar  3 05:21:15 2021


 Performance counter stats for 'system wide':

S0-C0           1           7,423.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,061      context-switches          #    0.143 K/sec                  
S0-C0           1                  6      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                388      page-faults               #    0.052 K/sec                  
S0-C0           1      4,085,773,816      cycles                    #    0.550 GHz                    
S0-C0           1      3,440,310,139      instructions              #    0.84  insn per cycle         
S0-C0           1        178,581,100      branches                  #   24.056 M/sec                  
S0-C0           1          3,169,054      branch-misses             #    1.77% of all branches        
S0-C1           1           7,423.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                481      context-switches          #    0.065 K/sec                  
S0-C1           1                  2      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                495      page-faults               #    0.067 K/sec                  
S0-C1           1      4,070,749,011      cycles                    #    0.548 GHz                    
S0-C1           1      3,435,958,723      instructions              #    0.84  insn per cycle         
S0-C1           1        177,980,498      branches                  #   23.975 M/sec                  
S0-C1           1          3,031,707      branch-misses             #    1.70% of all branches        
S0-C2           1           7,423.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                464      context-switches          #    0.063 K/sec                  
S0-C2           1                  2      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                388      page-faults               #    0.052 K/sec                  
S0-C2           1      4,067,044,266      cycles                    #    0.548 GHz                    
S0-C2           1      3,435,445,699      instructions              #    0.84  insn per cycle         
S0-C2           1        177,866,378      branches                  #   23.960 M/sec                  
S0-C2           1          3,002,876      branch-misses             #    1.69% of all branches        
S0-C3           1           7,423.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                502      context-switches          #    0.068 K/sec                  
S0-C3           1                  4      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                388      page-faults               #    0.052 K/sec                  
S0-C3           1      4,065,842,903      cycles                    #    0.548 GHz                    
S0-C3           1      3,434,479,839      instructions              #    0.84  insn per cycle         
S0-C3           1        177,831,210      branches                  #   23.955 M/sec                  
S0-C3           1          3,002,536      branch-misses             #    1.69% of all branches        

       7.423940876 seconds time elapsed

================================================================================
This benchmark has been compiled to use 16 threads. You have to repcompile it if you want to use different number of threads. See ../install/setup.sh for details.
================================================================================
================================================================================
Printing results
File: lda_perf_output_1614747011003206023.txt
instructions: 5850085
=(199810+599927+4180590+869758)
frequencies: 0.369
=(0.097+0.164+0.976+0.237)/4
ipcs:0.27
=1*(0.16+0.29+0.34+0.29)/4

File: word2vec_perf_output_no_branch_1614746811771708880.txt
instructions: 7476441951
=(562001512+3032556168+1424151753+2457732518)
frequencies: 0.024
=(0.027+0.028+0.027+0.014)/4
ipcs:0.83
=1*(0.19+1.02+0.49+1.62)/4

File: wordcounts_perf_output_1614747011218529445.txt
instructions: 5822584
=(197606+609474+4278514+736990)
frequencies: 0.363
=(0.092+0.170+1.000+0.191)/4
ipcs:0.28
=1*(0.17+0.29+0.34+0.31)/4

File: grep_perf_output_1614747010907710888.txt
instructions: 6655248
=(392226+4422846+1075580+764596)
frequencies: 0.497
=(0.191+1.203+0.376+0.220)/4
ipcs:0.25
=1*(0.17+0.31+0.24+0.29)/4

File: sqlite_4_threads.txt
instructions: 2448978406
=(622906190+606482459+603315242+616274515)
frequencies: 0.158
=(0.162+0.163+0.152+0.155)/4
ipcs:0.46
=1*(0.45+0.44+0.47+0.47)/4

File: sort_perf_output_1614747011495940685.txt
instructions: 5882657
=(750884+244898+4278619+608256)
frequencies: 0.410
=(0.234+0.135+1.104+0.165)/4
ipcs:0.27
=1*(0.27+0.15+0.33+0.31)/4

File: word2vec_perf_output_1614746811767744456.txt
instructions: 10429381980
=(2288029028+4013656803+2087394541+2040301608)
frequencies: 0.024
=(0.032+0.023+0.022+0.020)/4
ipcs:1.20
=1*(0.77+1.91+1.02+1.11)/4

File: md5_perf_output_1614747011403188038.txt
instructions: 5822517
=(626094+664695+236852+4294876)
frequencies: 0.390
=(0.199+0.169+0.126+1.066)/4
ipcs:0.28
=1*(0.27+0.33+0.16+0.34)/4

File: NaiveBayes_perf_output_1614747011095299356.txt
instructions: 23246044
=(6821184+2870311+8352768+5201781)
frequencies: 0.422
=(0.520+0.204+0.588+0.377)/4
ipcs:0.33
=1*(0.31+0.33+0.34+0.33)/4

File: go_word2vec_4_threads.txt
instructions: 12037988704
=(2891179960+3089357166+2810629539+3246822039)
frequencies: 0.042
=(0.057+0.024+0.058+0.029)/4
ipcs:2.04
=1*(1.23+3.07+1.17+2.68)/4

File: kmeans_perf_output_1614747011310899549.txt
instructions: 6121772
=(878601+3687405+681198+874568)
frequencies: 0.416
=(0.295+0.915+0.177+0.279)/4
ipcs:0.29
=1*(0.25+0.33+0.32+0.26)/4

================================================================================
Finished running benchmarks
================================================================================
