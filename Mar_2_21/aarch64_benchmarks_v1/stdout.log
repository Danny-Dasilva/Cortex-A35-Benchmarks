Architecture:        aarch64
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A35
Stepping:            r0p1
CPU max MHz:         1300.0000
CPU min MHz:         598.0000
BogoMIPS:            26.00
Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
================================================================================
/home/mendel/sd_card/i-benchmarks/word2vec/bin
perf stat -o ../data/word2vec_perf_output_1614743222983589991.txt --per-core -a taskset -c 0-3 ./word2vec -train ../data/text8_1.7mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_1.7mb
100K200KVocab size: 5847
Words in train file: 252418
Alpha: 0.050000  Progress: 0.28%  Words/thread/sec: 3.50k  Alpha: 0.049862  Progress: 0.58%  Words/thread/sec: 5.88k  Alpha: 0.049709  Progress: 0.88%  Words/thread/sec: 8.92k  Alpha: 0.049558  Progress: 1.19%  Words/thread/sec: 11.92k  Alpha: 0.049407  Progress: 1.45%  Words/thread/sec: 8.10k  Alpha: 0.049275  Progress: 1.72%  Words/thread/sec: 8.68k  Alpha: 0.049140  Progress: 1.98%  Words/thread/sec: 9.99k  Alpha: 0.049008  Progress: 2.30%  Words/thread/sec: 10.56k  Alpha: 0.048852  Progress: 2.56%  Words/thread/sec: 8.63k  Alpha: 0.048718  Progress: 2.84%  Words/thread/sec: 9.52k  Alpha: 0.048581  Progress: 3.16%  Words/thread/sec: 10.58k  Alpha: 0.048421  Progress: 3.43%  Words/thread/sec: 10.84k  Alpha: 0.048284  Progress: 3.70%  Words/thread/sec: 9.32k  Alpha: 0.048148  Progress: 3.97%  Words/thread/sec: 9.54k  Alpha: 0.048015  Progress: 4.29%  Words/thread/sec: 10.30k  Alpha: 0.047855  Progress: 4.60%  Words/thread/sec: 11.00k  Alpha: 0.047701  Progress: 4.90%  Words/thread/sec: 9.49k  Alpha: 0.047548  Progress: 5.17%  Words/thread/sec: 10.02k  Alpha: 0.047413  Progress: 5.49%  Words/thread/sec: 10.27k  Alpha: 0.047253  Progress: 5.81%  Words/thread/sec: 10.84k  Alpha: 0.047096  Progress: 6.99%  Words/thread/sec: 10.08k  Alpha: 0.046504  Progress: 7.30%  Words/thread/sec: 10.21k  Alpha: 0.046350  Progress: 7.60%  Words/thread/sec: 10.62k  Alpha: 0.046199  Progress: 7.90%  Words/thread/sec: 11.03k  Alpha: 0.046049  Progress: 8.17%  Words/thread/sec: 10.31k  Alpha: 0.045915  Progress: 8.44%  Words/thread/sec: 10.36k  Alpha: 0.045782  Progress: 8.70%  Words/thread/sec: 10.67k  Alpha: 0.045649  Progress: 9.02%  Words/thread/sec: 10.82k  Alpha: 0.045492  Progress: 9.28%  Words/thread/sec: 10.41k  Alpha: 0.045359  Progress: 9.55%  Words/thread/sec: 10.45k  Alpha: 0.045226  Progress: 9.82%  Words/thread/sec: 10.74k  Alpha: 0.045089  Progress: 10.09%  Words/thread/sec: 10.82k  Alpha: 0.044953  Progress: 10.37%  Words/thread/sec: 10.46k  Alpha: 0.044816  Progress: 10.64%  Words/thread/sec: 10.30k  Alpha: 0.044682  Progress: 10.95%  Words/thread/sec: 10.61k  Alpha: 0.044523  Progress: 11.27%  Words/thread/sec: 10.91k  Alpha: 0.044367  Progress: 11.57%  Words/thread/sec: 10.42k  Alpha: 0.044213  Progress: 11.85%  Words/thread/sec: 10.47k  Alpha: 0.044076  Progress: 12.16%  Words/thread/sec: 10.56k  Alpha: 0.043918  Progress: 12.48%  Words/thread/sec: 10.84k  Alpha: 0.043759  Progress: 13.71%  Words/thread/sec: 10.47k  Alpha: 0.043143  Progress: 14.02%  Words/thread/sec: 10.54k  Alpha: 0.042992  Progress: 14.33%  Words/thread/sec: 10.77k  Alpha: 0.042837  Progress: 14.63%  Words/thread/sec: 10.99k  Alpha: 0.042686  Progress: 14.90%  Words/thread/sec: 10.57k  Alpha: 0.042552  Progress: 15.16%  Words/thread/sec: 10.61k  Alpha: 0.042418  Progress: 15.43%  Words/thread/sec: 10.79k  Alpha: 0.042286  Progress: 15.74%  Words/thread/sec: 10.86k  Alpha: 0.042130  Progress: 16.01%  Words/thread/sec: 10.62k  Alpha: 0.041996  Progress: 16.28%  Words/thread/sec: 10.65k  Alpha: 0.041858  Progress: 16.55%  Words/thread/sec: 10.82k  Alpha: 0.041726  Progress: 16.82%  Words/thread/sec: 10.86k  Alpha: 0.041589  Progress: 17.10%  Words/thread/sec: 10.64k  Alpha: 0.041451  Progress: 17.36%  Words/thread/sec: 10.54k  Alpha: 0.041318  Progress: 17.69%  Words/thread/sec: 10.74k  Alpha: 0.041318  Progress: 18.00%  Words/thread/sec: 10.92k  Alpha: 0.041001  Progress: 18.31%  Words/thread/sec: 10.62k  Alpha: 0.040846  Progress: 18.58%  Words/thread/sec: 10.64k  Alpha: 0.040846  Progress: 18.84%  Words/thread/sec: 10.79k  Alpha: 0.040579  Progress: 19.16%  Words/thread/sec: 10.84k  Alpha: 0.040422  Progress: 20.44%  Words/thread/sec: 10.63k  Alpha: 0.039780  Progress: 20.74%  Words/thread/sec: 10.67k  Alpha: 0.039630  Progress: 21.05%  Words/thread/sec: 10.82k  Alpha: 0.039475  Progress: 21.35%  Words/thread/sec: 10.96k  Alpha: 0.039325  Progress: 21.62%  Words/thread/sec: 10.69k  Alpha: 0.039191  Progress: 21.89%  Words/thread/sec: 10.72k  Alpha: 0.039056  Progress: 22.20%  Words/thread/sec: 10.75k  Alpha: 0.038902  Progress: 22.51%  Words/thread/sec: 10.89k  Alpha: 0.038743  Progress: 22.83%  Words/thread/sec: 10.67k  Alpha: 0.038583  Progress: 23.11%  Words/thread/sec: 10.79k  Alpha: 0.038446  Progress: 23.38%  Words/thread/sec: 10.81k  Alpha: 0.038310  Progress: 23.65%  Words/thread/sec: 10.91k  Alpha: 0.038177  Progress: 23.92%  Words/thread/sec: 10.68k  Alpha: 0.038041  Progress: 24.23%  Words/thread/sec: 10.72k  Alpha: 0.037884  Progress: 24.50%  Words/thread/sec: 10.83k  Alpha: 0.037749  Progress: 24.77%  Words/thread/sec: 10.93k  Alpha: 0.037613  Progress: 25.04%  Words/thread/sec: 10.62k  Alpha: 0.037478  Progress: 25.35%  Words/thread/sec: 10.75k  Alpha: 0.037324  Progress: 25.67%  Words/thread/sec: 10.77k  Alpha: 0.037165  Progress: 25.98%  Words/thread/sec: 10.89k  Alpha: 0.037008  Progress: 27.17%  Words/thread/sec: 10.72k  Alpha: 0.036413  Progress: 27.47%  Words/thread/sec: 10.76k  Alpha: 0.036263  Progress: 27.77%  Words/thread/sec: 10.83k  Alpha: 0.036113  Progress: 28.08%  Words/thread/sec: 10.92k  Alpha: 0.035958  Progress: 28.35%  Words/thread/sec: 10.77k  Alpha: 0.035825  Progress: 28.62%  Words/thread/sec: 10.80k  Alpha: 0.035690  Progress: 28.89%  Words/thread/sec: 10.85k  Alpha: 0.035556  Progress: 29.20%  Words/thread/sec: 10.81k  Alpha: 0.035401  Progress: 29.46%  Words/thread/sec: 10.79k  Alpha: 0.035269  Progress: 29.74%  Words/thread/sec: 10.82k  Alpha: 0.035131  Progress: 30.00%  Words/thread/sec: 10.87k  Alpha: 0.034998  Progress: 30.27%  Words/thread/sec: 10.78k  Alpha: 0.034864  Progress: 30.55%  Words/thread/sec: 10.81k  Alpha: 0.034725  Progress: 30.86%  Words/thread/sec: 10.77k  Alpha: 0.034570  Progress: 31.18%  Words/thread/sec: 10.84k  Alpha: 0.034410  Progress: 31.44%  Words/thread/sec: 10.79k  Alpha: 0.034278  Progress: 31.75%  Words/thread/sec: 10.79k  Alpha: 0.034123  Progress: 32.03%  Words/thread/sec: 10.81k  Alpha: 0.033987  Progress: 32.34%  Words/thread/sec: 10.80k  Alpha: 0.033830  Progress: 32.66%  Words/thread/sec: 10.74k  Alpha: 0.033672  Progress: 33.89%  Words/thread/sec: 10.79k  Alpha: 0.033054  Progress: 34.19%  Words/thread/sec: 10.83k  Alpha: 0.032903  Progress: 34.50%  Words/thread/sec: 10.88k  Alpha: 0.032752  Progress: 34.81%  Words/thread/sec: 10.81k  Alpha: 0.032597  Progress: 35.07%  Words/thread/sec: 10.83k  Alpha: 0.032463  Progress: 35.34%  Words/thread/sec: 10.85k  Alpha: 0.032330  Progress: 35.61%  Words/thread/sec: 10.89k  Alpha: 0.032195  Progress: 35.87%  Words/thread/sec: 10.75k  Alpha: 0.032063  Progress: 36.19%  Words/thread/sec: 10.84k  Alpha: 0.031907  Progress: 36.46%  Words/thread/sec: 10.86k  Alpha: 0.031771  Progress: 36.72%  Words/thread/sec: 10.90k  Alpha: 0.031638  Progress: 37.00%  Words/thread/sec: 10.76k  Alpha: 0.031502  Progress: 37.27%  Words/thread/sec: 10.84k  Alpha: 0.031363  Progress: 37.54%  Words/thread/sec: 10.82k  Alpha: 0.031231  Progress: 37.85%  Words/thread/sec: 10.90k  Alpha: 0.031074  Progress: 38.12%  Words/thread/sec: 10.78k  Alpha: 0.030941  Progress: 38.43%  Words/thread/sec: 10.80k  Alpha: 0.030786  Progress: 38.69%  Words/thread/sec: 10.84k  Alpha: 0.030653  Progress: 38.96%  Words/thread/sec: 10.90k  Alpha: 0.030518  Progress: 39.23%  Words/thread/sec: 10.79k  Alpha: 0.030386  Progress: 39.50%  Words/thread/sec: 10.77k  Alpha: 0.030249  Progress: 40.62%  Words/thread/sec: 10.82k  Alpha: 0.029688  Progress: 40.93%  Words/thread/sec: 10.86k  Alpha: 0.029537  Progress: 41.23%  Words/thread/sec: 10.88k  Alpha: 0.029386  Progress: 41.54%  Words/thread/sec: 10.83k  Alpha: 0.029232  Progress: 41.81%  Words/thread/sec: 10.84k  Alpha: 0.029097  Progress: 42.07%  Words/thread/sec: 10.87k  Alpha: 0.028964  Progress: 42.34%  Words/thread/sec: 10.89k  Alpha: 0.028830  Progress: 42.61%  Words/thread/sec: 10.77k  Alpha: 0.028830  Progress: 42.92%  Words/thread/sec: 10.85k  Alpha: 0.028542  Progress: 43.19%  Words/thread/sec: 10.89k  Alpha: 0.028404  Progress: 43.46%  Words/thread/sec: 10.90k  Alpha: 0.028272  Progress: 43.73%  Words/thread/sec: 10.79k  Alpha: 0.028137  Progress: 44.00%  Words/thread/sec: 10.85k  Alpha: 0.027998  Progress: 44.31%  Words/thread/sec: 10.84k  Alpha: 0.027843  Progress: 44.64%  Words/thread/sec: 10.87k  Alpha: 0.027681  Progress: 44.91%  Words/thread/sec: 10.81k  Alpha: 0.027547  Progress: 45.21%  Words/thread/sec: 10.83k  Alpha: 0.027393  Progress: 45.48%  Words/thread/sec: 10.87k  Alpha: 0.027258  Progress: 45.80%  Words/thread/sec: 10.84k  Alpha: 0.027100  Progress: 46.11%  Words/thread/sec: 10.79k  Alpha: 0.026943  Progress: 47.34%  Words/thread/sec: 10.83k  Alpha: 0.026330  Progress: 47.64%  Words/thread/sec: 10.87k  Alpha: 0.026180  Progress: 47.94%  Words/thread/sec: 10.89k  Alpha: 0.026029  Progress: 48.25%  Words/thread/sec: 10.84k  Alpha: 0.025874  Progress: 48.52%  Words/thread/sec: 10.85k  Alpha: 0.025739  Progress: 48.79%  Words/thread/sec: 10.88k  Alpha: 0.025606  Progress: 49.05%  Words/thread/sec: 10.89k  Alpha: 0.025473  Progress: 49.32%  Words/thread/sec: 10.79k  Alpha: 0.025341  Progress: 49.63%  Words/thread/sec: 10.86k  Alpha: 0.025184  Progress: 49.90%  Words/thread/sec: 10.89k  Alpha: 0.025049  Progress: 50.17%  Words/thread/sec: 10.90k  Alpha: 0.024915  Progress: 50.45%  Words/thread/sec: 10.80k  Alpha: 0.024777  Progress: 50.72%  Words/thread/sec: 10.86k  Alpha: 0.024641  Progress: 51.03%  Words/thread/sec: 10.85k  Alpha: 0.024486  Progress: 51.29%  Words/thread/sec: 10.91k  Alpha: 0.024354  Progress: 51.56%  Words/thread/sec: 10.81k  Alpha: 0.024221  Progress: 51.87%  Words/thread/sec: 10.83k  Alpha: 0.024065  Progress: 52.14%  Words/thread/sec: 10.86k  Alpha: 0.023931  Progress: 52.41%  Words/thread/sec: 10.91k  Alpha: 0.023796  Progress: 52.73%  Words/thread/sec: 10.78k  Alpha: 0.023637  Progress: 53.25%  Words/thread/sec: 10.87k  Alpha: 0.023373  Progress: 54.06%  Words/thread/sec: 10.84k  Alpha: 0.022971  Progress: 54.36%  Words/thread/sec: 10.87k  Alpha: 0.022822  Progress: 54.66%  Words/thread/sec: 10.89k  Alpha: 0.022669  Progress: 54.97%  Words/thread/sec: 10.85k  Alpha: 0.022516  Progress: 55.23%  Words/thread/sec: 10.86k  Alpha: 0.022383  Progress: 55.50%  Words/thread/sec: 10.89k  Alpha: 0.022251  Progress: 55.76%  Words/thread/sec: 10.90k  Alpha: 0.022118  Progress: 56.08%  Words/thread/sec: 10.81k  Alpha: 0.021961  Progress: 56.35%  Words/thread/sec: 10.84k  Alpha: 0.021825  Progress: 56.67%  Words/thread/sec: 10.89k  Alpha: 0.021666  Progress: 56.94%  Words/thread/sec: 10.91k  Alpha: 0.021531  Progress: 57.21%  Words/thread/sec: 10.82k  Alpha: 0.021397  Progress: 57.48%  Words/thread/sec: 10.84k  Alpha: 0.021262  Progress: 57.79%  Words/thread/sec: 10.87k  Alpha: 0.021106  Progress: 58.11%  Words/thread/sec: 10.89k  Alpha: 0.020945  Progress: 58.38%  Words/thread/sec: 10.84k  Alpha: 0.020812  Progress: 58.64%  Words/thread/sec: 10.83k  Alpha: 0.020678  Progress: 58.95%  Words/thread/sec: 10.87k  Alpha: 0.020524  Progress: 59.27%  Words/thread/sec: 10.86k  Alpha: 0.020367  Progress: 59.58%  Words/thread/sec: 10.83k  Alpha: 0.020210  Progress: 60.77%  Words/thread/sec: 10.85k  Alpha: 0.019614  Progress: 61.07%  Words/thread/sec: 10.88k  Alpha: 0.019464  Progress: 61.38%  Words/thread/sec: 10.89k  Alpha: 0.019312  Progress: 61.68%  Words/thread/sec: 10.85k  Alpha: 0.019158  Progress: 61.95%  Words/thread/sec: 10.86k  Alpha: 0.019024  Progress: 62.22%  Words/thread/sec: 10.90k  Alpha: 0.018890  Progress: 62.49%  Words/thread/sec: 10.90k  Alpha: 0.018757  Progress: 62.80%  Words/thread/sec: 10.82k  Alpha: 0.018602  Progress: 63.07%  Words/thread/sec: 10.85k  Alpha: 0.018464  Progress: 63.39%  Words/thread/sec: 10.89k  Alpha: 0.018303  Progress: 63.66%  Words/thread/sec: 10.92k  Alpha: 0.018171  Progress: 63.93%  Words/thread/sec: 10.83k  Alpha: 0.018036  Progress: 64.20%  Words/thread/sec: 10.84k  Alpha: 0.017900  Progress: 64.51%  Words/thread/sec: 10.88k  Alpha: 0.017746  Progress: 64.83%  Words/thread/sec: 10.89k  Alpha: 0.017585  Progress: 65.10%  Words/thread/sec: 10.85k  Alpha: 0.017451  Progress: 65.36%  Words/thread/sec: 10.84k  Alpha: 0.017318  Progress: 65.67%  Words/thread/sec: 10.87k  Alpha: 0.017164  Progress: 65.99%  Words/thread/sec: 10.87k  Alpha: 0.017007  Progress: 66.25%  Words/thread/sec: 10.86k  Alpha: 0.016874  Progress: 67.49%  Words/thread/sec: 10.85k  Alpha: 0.016253  Progress: 67.79%  Words/thread/sec: 10.89k  Alpha: 0.016103  Progress: 68.10%  Words/thread/sec: 10.90k  Alpha: 0.015952  Progress: 68.40%  Words/thread/sec: 10.86k  Alpha: 0.015798  Progress: 68.67%  Words/thread/sec: 10.87k  Alpha: 0.015663  Progress: 68.94%  Words/thread/sec: 10.90k  Alpha: 0.015529  Progress: 69.21%  Words/thread/sec: 10.91k  Alpha: 0.015396  Progress: 69.52%  Words/thread/sec: 10.83k  Alpha: 0.015241  Progress: 69.79%  Words/thread/sec: 10.86k  Alpha: 0.015104  Progress: 70.12%  Words/thread/sec: 10.89k  Alpha: 0.014942  Progress: 70.38%  Words/thread/sec: 10.92k  Alpha: 0.014809  Progress: 70.65%  Words/thread/sec: 10.84k  Alpha: 0.014674  Progress: 70.92%  Words/thread/sec: 10.85k  Alpha: 0.014538  Progress: 71.23%  Words/thread/sec: 10.89k  Alpha: 0.014384  Progress: 71.50%  Words/thread/sec: 10.93k  Alpha: 0.014251  Progress: 71.76%  Words/thread/sec: 10.84k  Alpha: 0.014118  Progress: 72.04%  Words/thread/sec: 10.84k  Alpha: 0.013982  Progress: 72.30%  Words/thread/sec: 10.88k  Alpha: 0.013849  Progress: 72.61%  Words/thread/sec: 10.91k  Alpha: 0.013696  Progress: 72.92%  Words/thread/sec: 10.83k  Alpha: 0.013538  Progress: 73.45%  Words/thread/sec: 10.89k  Alpha: 0.013273  Progress: 74.21%  Words/thread/sec: 10.86k  Alpha: 0.012895  Progress: 74.51%  Words/thread/sec: 10.89k  Alpha: 0.012744  Progress: 74.81%  Words/thread/sec: 10.90k  Alpha: 0.012594  Progress: 75.12%  Words/thread/sec: 10.86k  Alpha: 0.012441  Progress: 75.39%  Words/thread/sec: 10.88k  Alpha: 0.012305  Progress: 75.66%  Words/thread/sec: 10.90k  Alpha: 0.012172  Progress: 75.92%  Words/thread/sec: 10.90k  Alpha: 0.012038  Progress: 76.19%  Words/thread/sec: 10.84k  Alpha: 0.011905  Progress: 76.50%  Words/thread/sec: 10.87k  Alpha: 0.011751  Progress: 76.77%  Words/thread/sec: 10.91k  Alpha: 0.011613  Progress: 77.04%  Words/thread/sec: 10.91k  Alpha: 0.011480  Progress: 77.32%  Words/thread/sec: 10.85k  Alpha: 0.011340  Progress: 77.59%  Words/thread/sec: 10.88k  Alpha: 0.011204  Progress: 77.90%  Words/thread/sec: 10.88k  Alpha: 0.011049  Progress: 78.17%  Words/thread/sec: 10.91k  Alpha: 0.010916  Progress: 78.44%  Words/thread/sec: 10.85k  Alpha: 0.010782  Progress: 78.75%  Words/thread/sec: 10.87k  Alpha: 0.010625  Progress: 79.02%  Words/thread/sec: 10.89k  Alpha: 0.010491  Progress: 79.29%  Words/thread/sec: 10.92k  Alpha: 0.010357  Progress: 79.85%  Words/thread/sec: 10.86k  Alpha: 0.010075  Progress: 80.38%  Words/thread/sec: 10.92k  Alpha: 0.009810  Progress: 80.71%  Words/thread/sec: 10.87k  Alpha: 0.009645  Progress: 81.23%  Words/thread/sec: 10.89k  Alpha: 0.009385  Progress: 81.53%  Words/thread/sec: 10.90k  Alpha: 0.009235  Progress: 81.80%  Words/thread/sec: 10.87k  Alpha: 0.009100  Progress: 82.10%  Words/thread/sec: 10.90k  Alpha: 0.008948  Progress: 82.37%  Words/thread/sec: 10.90k  Alpha: 0.008815  Progress: 82.64%  Words/thread/sec: 10.90k  Alpha: 0.008680  Progress: 82.91%  Words/thread/sec: 10.87k  Alpha: 0.008546  Progress: 83.22%  Words/thread/sec: 10.88k  Alpha: 0.008391  Progress: 83.49%  Words/thread/sec: 10.91k  Alpha: 0.008255  Progress: 83.76%  Words/thread/sec: 10.91k  Alpha: 0.008122  Progress: 84.03%  Words/thread/sec: 10.88k  Alpha: 0.007984  Progress: 84.31%  Words/thread/sec: 10.88k  Alpha: 0.007847  Progress: 84.62%  Words/thread/sec: 10.88k  Alpha: 0.007691  Progress: 84.94%  Words/thread/sec: 10.89k  Alpha: 0.007529  Progress: 85.25%  Words/thread/sec: 10.87k  Alpha: 0.007373  Progress: 85.52%  Words/thread/sec: 10.90k  Alpha: 0.007240  Progress: 85.79%  Words/thread/sec: 10.90k  Alpha: 0.007105  Progress: 86.10%  Words/thread/sec: 10.88k  Alpha: 0.006948  Progress: 86.67%  Words/thread/sec: 10.88k  Alpha: 0.006663  Progress: 87.43%  Words/thread/sec: 10.87k  Alpha: 0.006285  Progress: 87.95%  Words/thread/sec: 10.90k  Alpha: 0.006025  Progress: 88.26%  Words/thread/sec: 10.90k  Alpha: 0.005872  Progress: 88.52%  Words/thread/sec: 10.87k  Alpha: 0.005738  Progress: 88.83%  Words/thread/sec: 10.90k  Alpha: 0.005584  Progress: 89.10%  Words/thread/sec: 10.90k  Alpha: 0.005450  Progress: 89.36%  Words/thread/sec: 10.91k  Alpha: 0.005318  Progress: 89.63%  Words/thread/sec: 10.88k  Alpha: 0.005185  Progress: 89.94%  Words/thread/sec: 10.88k  Alpha: 0.005029  Progress: 90.22%  Words/thread/sec: 10.91k  Alpha: 0.004892  Progress: 90.48%  Words/thread/sec: 10.91k  Alpha: 0.004758  Progress: 90.76%  Words/thread/sec: 10.89k  Alpha: 0.004620  Progress: 91.03%  Words/thread/sec: 10.88k  Alpha: 0.004484  Progress: 91.34%  Words/thread/sec: 10.89k  Alpha: 0.004328  Progress: 91.61%  Words/thread/sec: 10.92k  Alpha: 0.004196  Progress: 91.92%  Words/thread/sec: 10.87k  Alpha: 0.004041  Progress: 92.18%  Words/thread/sec: 10.89k  Alpha: 0.003908  Progress: 92.46%  Words/thread/sec: 10.89k  Alpha: 0.003772  Progress: 92.72%  Words/thread/sec: 10.92k  Alpha: 0.003640  Progress: 93.30%  Words/thread/sec: 10.87k  Alpha: 0.003350  Progress: 93.83%  Words/thread/sec: 10.92k  Alpha: 0.003086  Progress: 94.16%  Words/thread/sec: 10.88k  Alpha: 0.002922  Progress: 94.68%  Words/thread/sec: 10.90k  Alpha: 0.002662  Progress: 94.98%  Words/thread/sec: 10.90k  Alpha: 0.002510  Progress: 95.25%  Words/thread/sec: 10.88k  Alpha: 0.002374  Progress: 95.56%  Words/thread/sec: 10.90k  Alpha: 0.002220  Progress: 95.83%  Words/thread/sec: 10.91k  Alpha: 0.002086  Progress: 96.09%  Words/thread/sec: 10.91k  Alpha: 0.001953  Progress: 96.41%  Words/thread/sec: 10.87k  Alpha: 0.001793  Progress: 96.69%  Words/thread/sec: 10.88k  Alpha: 0.001656  Progress: 97.00%  Words/thread/sec: 10.92k  Alpha: 0.001500  Progress: 97.27%  Words/thread/sec: 10.92k  Alpha: 0.001367  Progress: 97.54%  Words/thread/sec: 10.87k  Alpha: 0.001232  Progress: 97.81%  Words/thread/sec: 10.89k  Alpha: 0.001095  Progress: 98.12%  Words/thread/sec: 10.90k  Alpha: 0.000939  Progress: 98.44%  Words/thread/sec: 10.91k  Alpha: 0.000779  Progress: 98.71%  Words/thread/sec: 10.87k  Alpha: 0.000646  Progress: 99.02%  Words/thread/sec: 10.89k  Alpha: 0.000492  Progress: 99.29%  Words/thread/sec: 10.91k  Alpha: 0.000357  Progress: 99.60%  Words/thread/sec: 10.89k  Alpha: 0.000200  Progress: 100.39%  Words/thread/sec: 10.91k  # started on Wed Mar  3 03:47:03 2021


 Performance counter stats for 'system wide':

S0-C0           1          91,805.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             25,638      context-switches          #    0.279 K/sec                  
S0-C0           1                279      cpu-migrations            #    0.003 K/sec                  
S0-C0           1                  7      page-faults               #    0.000 K/sec                  
S0-C0           1      2,966,904,408      cycles                    #    0.032 GHz                    
S0-C0           1      2,247,928,633      instructions              #    0.76  insn per cycle         
S0-C0           1      4,168,610,890      branches                  #   45.407 M/sec                  
S0-C0           1         66,773,198      branch-misses             #    1.60% of all branches        
S0-C1           1          91,805.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,959      context-switches          #    0.054 K/sec                  
S0-C1           1                252      cpu-migrations            #    0.003 K/sec                  
S0-C1           1             29,436      page-faults               #    0.321 K/sec                  
S0-C1           1      2,146,165,771      cycles                    #    0.023 GHz                    
S0-C1           1      2,121,606,683      instructions              #    0.99  insn per cycle         
S0-C1           1      4,152,017,535      branches                  #   45.226 M/sec                  
S0-C1           1         61,089,623      branch-misses             #    1.47% of all branches        
S0-C2           1          91,805.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,673      context-switches          #    0.051 K/sec                  
S0-C2           1                256      cpu-migrations            #    0.003 K/sec                  
S0-C2           1            100,709      page-faults               #    0.001 M/sec                  
S0-C2           1      2,040,649,060      cycles                    #    0.022 GHz                    
S0-C2           1      3,918,389,028      instructions              #    1.92  insn per cycle         
S0-C2           1      4,254,107,090      branches                  #   46.338 M/sec                  
S0-C2           1         65,767,073      branch-misses             #    1.55% of all branches        
S0-C3           1          91,805.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              9,811      context-switches          #    0.107 K/sec                  
S0-C3           1                268      cpu-migrations            #    0.003 K/sec                  
S0-C3           1                  7      page-faults               #    0.000 K/sec                  
S0-C3           1      2,252,383,844      cycles                    #    0.025 GHz                    
S0-C3           1      2,117,394,294      instructions              #    0.94  insn per cycle         
S0-C3           1      4,149,881,173      branches                  #   45.203 M/sec                  
S0-C3           1         61,807,539      branch-misses             #    1.49% of all branches        

      91.806780330 seconds time elapsed

perf stat -o ../data/word2vec_perf_output_no_branch_1614743222987951735.txt --per-core -a taskset -c 0-3 ./word2vec_no-guess-branch-probability -train ../data/text8_3.3mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_3.3mb
100K200K300K400K500KVocab size: 9546
Words in train file: 524166
Alpha: 0.050000  Progress: 0.15%  Words/thread/sec: 6.26k  Alpha: 0.050000  Progress: 0.28%  Words/thread/sec: 12.12k  Alpha: 0.049858  Progress: 0.42%  Words/thread/sec: 17.95k  Alpha: 0.049789  Progress: 0.56%  Words/thread/sec: 23.85k  Alpha: 0.049719  Progress: 0.71%  Words/thread/sec: 13.93k  Alpha: 0.049643  Progress: 0.86%  Words/thread/sec: 16.64k  Alpha: 0.049572  Progress: 1.00%  Words/thread/sec: 19.47k  Alpha: 0.049499  Progress: 1.15%  Words/thread/sec: 22.30k  Alpha: 0.049424  Progress: 1.28%  Words/thread/sec: 17.10k  Alpha: 0.049361  Progress: 1.42%  Words/thread/sec: 17.92k  Alpha: 0.049290  Progress: 1.57%  Words/thread/sec: 19.76k  Alpha: 0.049215  Progress: 1.72%  Words/thread/sec: 21.62k  Alpha: 0.049142  Progress: 1.87%  Words/thread/sec: 18.15k  Alpha: 0.049067  Progress: 2.02%  Words/thread/sec: 18.79k  Alpha: 0.049067  Progress: 2.16%  Words/thread/sec: 20.16k  Alpha: 0.048918  Progress: 2.31%  Words/thread/sec: 21.46k  Alpha: 0.048847  Progress: 2.45%  Words/thread/sec: 18.71k  Alpha: 0.048777  Progress: 2.59%  Words/thread/sec: 19.15k  Alpha: 0.048705  Progress: 2.73%  Words/thread/sec: 20.21k  Alpha: 0.048634  Progress: 2.88%  Words/thread/sec: 21.29k  Alpha: 0.048560  Progress: 3.03%  Words/thread/sec: 19.05k  Alpha: 0.048486  Progress: 3.17%  Words/thread/sec: 19.43k  Alpha: 0.048416  Progress: 3.31%  Words/thread/sec: 20.29k  Alpha: 0.048345  Progress: 3.46%  Words/thread/sec: 21.21k  Alpha: 0.048269  Progress: 3.60%  Words/thread/sec: 19.27k  Alpha: 0.048199  Progress: 3.75%  Words/thread/sec: 19.61k  Alpha: 0.048127  Progress: 3.89%  Words/thread/sec: 20.32k  Alpha: 0.048127  Progress: 4.03%  Words/thread/sec: 21.10k  Alpha: 0.047983  Progress: 4.19%  Words/thread/sec: 19.48k  Alpha: 0.047907  Progress: 4.33%  Words/thread/sec: 19.77k  Alpha: 0.047835  Progress: 4.48%  Words/thread/sec: 20.45k  Alpha: 0.047760  Progress: 4.63%  Words/thread/sec: 21.10k  Alpha: 0.047687  Progress: 4.77%  Words/thread/sec: 19.65k  Alpha: 0.047615  Progress: 4.92%  Words/thread/sec: 19.90k  Alpha: 0.047542  Progress: 5.06%  Words/thread/sec: 20.48k  Alpha: 0.047470  Progress: 5.21%  Words/thread/sec: 21.06k  Alpha: 0.047394  Progress: 5.36%  Words/thread/sec: 20.14k  Alpha: 0.047321  Progress: 5.51%  Words/thread/sec: 20.04k  Alpha: 0.047246  Progress: 5.65%  Words/thread/sec: 20.56k  Alpha: 0.047173  Progress: 5.80%  Words/thread/sec: 21.07k  Alpha: 0.047101  Progress: 5.94%  Words/thread/sec: 20.49k  Alpha: 0.047032  Progress: 6.08%  Words/thread/sec: 20.09k  Alpha: 0.046960  Progress: 6.22%  Words/thread/sec: 20.52k  Alpha: 0.046960  Progress: 6.37%  Words/thread/sec: 21.00k  Alpha: 0.046816  Progress: 6.84%  Words/thread/sec: 20.63k  Alpha: 0.046578  Progress: 6.98%  Words/thread/sec: 20.51k  Alpha: 0.046508  Progress: 7.13%  Words/thread/sec: 20.94k  Alpha: 0.046434  Progress: 7.27%  Words/thread/sec: 21.09k  Alpha: 0.046365  Progress: 7.42%  Words/thread/sec: 20.62k  Alpha: 0.046290  Progress: 7.56%  Words/thread/sec: 20.54k  Alpha: 0.046220  Progress: 7.71%  Words/thread/sec: 20.92k  Alpha: 0.046145  Progress: 7.86%  Words/thread/sec: 21.08k  Alpha: 0.046072  Progress: 8.01%  Words/thread/sec: 20.65k  Alpha: 0.045997  Progress: 8.15%  Words/thread/sec: 20.59k  Alpha: 0.045923  Progress: 8.29%  Words/thread/sec: 20.92k  Alpha: 0.045854  Progress: 8.44%  Words/thread/sec: 21.07k  Alpha: 0.045780  Progress: 8.59%  Words/thread/sec: 20.64k  Alpha: 0.045706  Progress: 8.74%  Words/thread/sec: 20.61k  Alpha: 0.045632  Progress: 8.89%  Words/thread/sec: 20.93k  Alpha: 0.045557  Progress: 9.03%  Words/thread/sec: 21.07k  Alpha: 0.045486  Progress: 9.17%  Words/thread/sec: 20.65k  Alpha: 0.045414  Progress: 9.31%  Words/thread/sec: 20.61k  Alpha: 0.045343  Progress: 9.46%  Words/thread/sec: 20.91k  Alpha: 0.045271  Progress: 9.60%  Words/thread/sec: 21.04k  Alpha: 0.045198  Progress: 9.75%  Words/thread/sec: 20.64k  Alpha: 0.045126  Progress: 9.90%  Words/thread/sec: 20.64k  Alpha: 0.045050  Progress: 10.04%  Words/thread/sec: 20.91k  Alpha: 0.044979  Progress: 10.18%  Words/thread/sec: 21.02k  Alpha: 0.044909  Progress: 10.33%  Words/thread/sec: 20.63k  Alpha: 0.044837  Progress: 10.48%  Words/thread/sec: 20.63k  Alpha: 0.044762  Progress: 10.62%  Words/thread/sec: 20.89k  Alpha: 0.044690  Progress: 10.76%  Words/thread/sec: 21.00k  Alpha: 0.044621  Progress: 10.89%  Words/thread/sec: 20.77k  Alpha: 0.044557  Progress: 11.03%  Words/thread/sec: 20.56k  Alpha: 0.044484  Progress: 11.18%  Words/thread/sec: 20.81k  Alpha: 0.044410  Progress: 11.33%  Words/thread/sec: 20.91k  Alpha: 0.044337  Progress: 11.47%  Words/thread/sec: 20.70k  Alpha: 0.044265  Progress: 11.62%  Words/thread/sec: 20.52k  Alpha: 0.044189  Progress: 11.77%  Words/thread/sec: 20.76k  Alpha: 0.044116  Progress: 11.91%  Words/thread/sec: 20.85k  Alpha: 0.044044  Progress: 12.06%  Words/thread/sec: 20.84k  Alpha: 0.043971  Progress: 12.20%  Words/thread/sec: 20.52k  Alpha: 0.043899  Progress: 12.35%  Words/thread/sec: 20.75k  Alpha: 0.043826  Progress: 12.50%  Words/thread/sec: 20.85k  Alpha: 0.043752  Progress: 12.64%  Words/thread/sec: 20.97k  Alpha: 0.043682  Progress: 12.87%  Words/thread/sec: 20.67k  Alpha: 0.043565  Progress: 13.02%  Words/thread/sec: 20.89k  Alpha: 0.043491  Progress: 13.16%  Words/thread/sec: 20.98k  Alpha: 0.043419  Progress: 13.44%  Words/thread/sec: 20.86k  Alpha: 0.043278  Progress: 13.68%  Words/thread/sec: 20.73k  Alpha: 0.043158  Progress: 13.83%  Words/thread/sec: 20.94k  Alpha: 0.043084  Progress: 13.97%  Words/thread/sec: 20.88k  Alpha: 0.043016  Progress: 14.12%  Words/thread/sec: 20.99k  Alpha: 0.042942  Progress: 14.26%  Words/thread/sec: 20.70k  Alpha: 0.042871  Progress: 14.41%  Words/thread/sec: 20.90k  Alpha: 0.042796  Progress: 14.55%  Words/thread/sec: 20.84k  Alpha: 0.042723  Progress: 14.70%  Words/thread/sec: 20.94k  Alpha: 0.042648  Progress: 14.85%  Words/thread/sec: 20.67k  Alpha: 0.042575  Progress: 14.99%  Words/thread/sec: 20.85k  Alpha: 0.042504  Progress: 15.14%  Words/thread/sec: 20.79k  Alpha: 0.042429  Progress: 15.29%  Words/thread/sec: 20.90k  Alpha: 0.042355  Progress: 15.44%  Words/thread/sec: 20.67k  Alpha: 0.042281  Progress: 15.59%  Words/thread/sec: 20.86k  Alpha: 0.042206  Progress: 15.73%  Words/thread/sec: 20.80k  Alpha: 0.042135  Progress: 15.87%  Words/thread/sec: 20.90k  Alpha: 0.042064  Progress: 16.02%  Words/thread/sec: 20.67k  Alpha: 0.041992  Progress: 16.16%  Words/thread/sec: 20.84k  Alpha: 0.041921  Progress: 16.31%  Words/thread/sec: 20.78k  Alpha: 0.041847  Progress: 16.45%  Words/thread/sec: 20.87k  Alpha: 0.041775  Progress: 16.60%  Words/thread/sec: 20.64k  Alpha: 0.041700  Progress: 16.74%  Words/thread/sec: 20.80k  Alpha: 0.041629  Progress: 16.89%  Words/thread/sec: 20.73k  Alpha: 0.041557  Progress: 17.03%  Words/thread/sec: 20.81k  Alpha: 0.041486  Progress: 17.18%  Words/thread/sec: 20.60k  Alpha: 0.041412  Progress: 17.32%  Words/thread/sec: 20.76k  Alpha: 0.041339  Progress: 17.45%  Words/thread/sec: 20.72k  Alpha: 0.041275  Progress: 17.59%  Words/thread/sec: 20.85k  Alpha: 0.041206  Progress: 17.73%  Words/thread/sec: 20.57k  Alpha: 0.041133  Progress: 17.88%  Words/thread/sec: 20.74k  Alpha: 0.041059  Progress: 18.03%  Words/thread/sec: 20.71k  Alpha: 0.040987  Progress: 18.17%  Words/thread/sec: 20.86k  Alpha: 0.040913  Progress: 18.32%  Words/thread/sec: 20.58k  Alpha: 0.040838  Progress: 18.47%  Words/thread/sec: 20.74k  Alpha: 0.040766  Progress: 18.62%  Words/thread/sec: 20.81k  Alpha: 0.040692  Progress: 18.76%  Words/thread/sec: 20.84k  Alpha: 0.040620  Progress: 18.90%  Words/thread/sec: 20.55k  Alpha: 0.040551  Progress: 19.04%  Words/thread/sec: 20.70k  Alpha: 0.040478  Progress: 19.19%  Words/thread/sec: 20.85k  Alpha: 0.040405  Progress: 19.34%  Words/thread/sec: 20.79k  Alpha: 0.040331  Progress: 19.57%  Words/thread/sec: 20.63k  Alpha: 0.040214  Progress: 19.72%  Words/thread/sec: 20.78k  Alpha: 0.040141  Progress: 19.86%  Words/thread/sec: 20.73k  Alpha: 0.040069  Progress: 20.00%  Words/thread/sec: 20.78k  Alpha: 0.040000  Progress: 20.39%  Words/thread/sec: 20.67k  Alpha: 0.039807  Progress: 20.53%  Words/thread/sec: 20.81k  Alpha: 0.039734  Progress: 20.68%  Words/thread/sec: 20.87k  Alpha: 0.039659  Progress: 20.82%  Words/thread/sec: 20.79k  Alpha: 0.039591  Progress: 20.96%  Words/thread/sec: 20.64k  Alpha: 0.039520  Progress: 21.11%  Words/thread/sec: 20.78k  Alpha: 0.039445  Progress: 21.26%  Words/thread/sec: 20.83k  Alpha: 0.039369  Progress: 21.41%  Words/thread/sec: 20.76k  Alpha: 0.039297  Progress: 21.55%  Words/thread/sec: 20.62k  Alpha: 0.039224  Progress: 21.69%  Words/thread/sec: 20.75k  Alpha: 0.039154  Progress: 21.84%  Words/thread/sec: 20.80k  Alpha: 0.039080  Progress: 21.99%  Words/thread/sec: 20.76k  Alpha: 0.039005  Progress: 22.14%  Words/thread/sec: 20.63k  Alpha: 0.038931  Progress: 22.29%  Words/thread/sec: 20.76k  Alpha: 0.038857  Progress: 22.43%  Words/thread/sec: 20.80k  Alpha: 0.038785  Progress: 22.57%  Words/thread/sec: 20.76k  Alpha: 0.038715  Progress: 22.71%  Words/thread/sec: 20.62k  Alpha: 0.038643  Progress: 22.86%  Words/thread/sec: 20.74k  Alpha: 0.038571  Progress: 23.00%  Words/thread/sec: 20.77k  Alpha: 0.038499  Progress: 23.15%  Words/thread/sec: 20.72k  Alpha: 0.038426  Progress: 23.30%  Words/thread/sec: 20.60k  Alpha: 0.038351  Progress: 23.44%  Words/thread/sec: 20.71k  Alpha: 0.038279  Progress: 23.58%  Words/thread/sec: 20.73k  Alpha: 0.038208  Progress: 23.73%  Words/thread/sec: 20.70k  Alpha: 0.038137  Progress: 23.87%  Words/thread/sec: 20.59k  Alpha: 0.038063  Progress: 24.02%  Words/thread/sec: 20.70k  Alpha: 0.037990  Progress: 24.15%  Words/thread/sec: 20.79k  Alpha: 0.037926  Progress: 24.29%  Words/thread/sec: 20.68k  Alpha: 0.037857  Progress: 24.43%  Words/thread/sec: 20.56k  Alpha: 0.037785  Progress: 24.58%  Words/thread/sec: 20.68k  Alpha: 0.037711  Progress: 24.72%  Words/thread/sec: 20.79k  Alpha: 0.037638  Progress: 24.87%  Words/thread/sec: 20.67k  Alpha: 0.037565  Progress: 25.02%  Words/thread/sec: 20.60k  Alpha: 0.037492  Progress: 25.17%  Words/thread/sec: 20.67k  Alpha: 0.037416  Progress: 25.31%  Words/thread/sec: 20.79k  Alpha: 0.037344  Progress: 25.46%  Words/thread/sec: 20.65k  Alpha: 0.037272  Progress: 25.59%  Words/thread/sec: 20.65k  Alpha: 0.037203  Progress: 25.74%  Words/thread/sec: 20.65k  Alpha: 0.037130  Progress: 25.89%  Words/thread/sec: 20.76k  Alpha: 0.037057  Progress: 26.13%  Words/thread/sec: 20.71k  Alpha: 0.036936  Progress: 26.27%  Words/thread/sec: 20.61k  Alpha: 0.036867  Progress: 26.41%  Words/thread/sec: 20.71k  Alpha: 0.036793  Progress: 26.55%  Words/thread/sec: 20.71k  Alpha: 0.036725  Progress: 26.84%  Words/thread/sec: 20.81k  Alpha: 0.036582  Progress: 27.09%  Words/thread/sec: 20.66k  Alpha: 0.036457  Progress: 27.23%  Words/thread/sec: 20.74k  Alpha: 0.036386  Progress: 27.38%  Words/thread/sec: 20.84k  Alpha: 0.036312  Progress: 27.51%  Words/thread/sec: 20.63k  Alpha: 0.036244  Progress: 27.66%  Words/thread/sec: 20.63k  Alpha: 0.036169  Progress: 27.81%  Words/thread/sec: 20.71k  Alpha: 0.036097  Progress: 27.96%  Words/thread/sec: 20.82k  Alpha: 0.036022  Progress: 28.10%  Words/thread/sec: 20.62k  Alpha: 0.035949  Progress: 28.25%  Words/thread/sec: 20.63k  Alpha: 0.035875  Progress: 28.40%  Words/thread/sec: 20.72k  Alpha: 0.035801  Progress: 28.54%  Words/thread/sec: 20.81k  Alpha: 0.035731  Progress: 28.69%  Words/thread/sec: 20.63k  Alpha: 0.035655  Progress: 28.83%  Words/thread/sec: 20.63k  Alpha: 0.035583  Progress: 28.98%  Words/thread/sec: 20.72k  Alpha: 0.035509  Progress: 29.13%  Words/thread/sec: 20.82k  Alpha: 0.035434  Progress: 29.27%  Words/thread/sec: 20.62k  Alpha: 0.035363  Progress: 29.42%  Words/thread/sec: 20.61k  Alpha: 0.035291  Progress: 29.56%  Words/thread/sec: 20.70k  Alpha: 0.035219  Progress: 29.70%  Words/thread/sec: 20.79k  Alpha: 0.035148  Progress: 29.85%  Words/thread/sec: 20.59k  Alpha: 0.035074  Progress: 29.99%  Words/thread/sec: 20.59k  Alpha: 0.035003  Progress: 30.14%  Words/thread/sec: 20.68k  Alpha: 0.034928  Progress: 30.29%  Words/thread/sec: 20.77k  Alpha: 0.034857  Progress: 30.43%  Words/thread/sec: 20.59k  Alpha: 0.034786  Progress: 30.56%  Words/thread/sec: 20.64k  Alpha: 0.034722  Progress: 30.70%  Words/thread/sec: 20.67k  Alpha: 0.034648  Progress: 30.85%  Words/thread/sec: 20.75k  Alpha: 0.034576  Progress: 30.99%  Words/thread/sec: 20.57k  Alpha: 0.034506  Progress: 31.13%  Words/thread/sec: 20.63k  Alpha: 0.034434  Progress: 31.28%  Words/thread/sec: 20.66k  Alpha: 0.034362  Progress: 31.43%  Words/thread/sec: 20.75k  Alpha: 0.034287  Progress: 31.57%  Words/thread/sec: 20.58k  Alpha: 0.034214  Progress: 31.72%  Words/thread/sec: 20.65k  Alpha: 0.034141  Progress: 31.87%  Words/thread/sec: 20.65k  Alpha: 0.034065  Progress: 32.01%  Words/thread/sec: 20.73k  Alpha: 0.033993  Progress: 32.15%  Words/thread/sec: 20.63k  Alpha: 0.033924  Progress: 32.30%  Words/thread/sec: 20.64k  Alpha: 0.033852  Progress: 32.44%  Words/thread/sec: 20.63k  Alpha: 0.033779  Progress: 32.59%  Words/thread/sec: 20.71k  Alpha: 0.033707  Progress: 32.81%  Words/thread/sec: 20.66k  Alpha: 0.033596  Progress: 32.95%  Words/thread/sec: 20.59k  Alpha: 0.033526  Progress: 33.09%  Words/thread/sec: 20.67k  Alpha: 0.033457  Progress: 33.23%  Words/thread/sec: 20.75k  Alpha: 0.033383  Progress: 33.52%  Words/thread/sec: 20.73k  Alpha: 0.033241  Progress: 33.67%  Words/thread/sec: 20.65k  Alpha: 0.033166  Progress: 33.81%  Words/thread/sec: 20.62k  Alpha: 0.033096  Progress: 33.96%  Words/thread/sec: 20.70k  Alpha: 0.033022  Progress: 34.23%  Words/thread/sec: 20.62k  Alpha: 0.032884  Progress: 34.37%  Words/thread/sec: 20.63k  Alpha: 0.032816  Progress: 34.51%  Words/thread/sec: 20.67k  Alpha: 0.032746  Progress: 34.66%  Words/thread/sec: 20.76k  Alpha: 0.032671  Progress: 34.81%  Words/thread/sec: 20.62k  Alpha: 0.032597  Progress: 34.95%  Words/thread/sec: 20.63k  Alpha: 0.032524  Progress: 35.10%  Words/thread/sec: 20.68k  Alpha: 0.032451  Progress: 35.24%  Words/thread/sec: 20.76k  Alpha: 0.032380  Progress: 35.38%  Words/thread/sec: 20.62k  Alpha: 0.032309  Progress: 35.53%  Words/thread/sec: 20.63k  Alpha: 0.032234  Progress: 35.68%  Words/thread/sec: 20.68k  Alpha: 0.032159  Progress: 35.83%  Words/thread/sec: 20.76k  Alpha: 0.032085  Progress: 35.97%  Words/thread/sec: 20.60k  Alpha: 0.032013  Progress: 36.12%  Words/thread/sec: 20.61k  Alpha: 0.031942  Progress: 36.26%  Words/thread/sec: 20.66k  Alpha: 0.031871  Progress: 36.40%  Words/thread/sec: 20.73k  Alpha: 0.031799  Progress: 36.54%  Words/thread/sec: 20.58k  Alpha: 0.031728  Progress: 36.69%  Words/thread/sec: 20.60k  Alpha: 0.031654  Progress: 36.84%  Words/thread/sec: 20.65k  Alpha: 0.031579  Progress: 36.98%  Words/thread/sec: 20.73k  Alpha: 0.031508  Progress: 37.11%  Words/thread/sec: 20.63k  Alpha: 0.031444  Progress: 37.25%  Words/thread/sec: 20.59k  Alpha: 0.031373  Progress: 37.40%  Words/thread/sec: 20.64k  Alpha: 0.031299  Progress: 37.55%  Words/thread/sec: 20.72k  Alpha: 0.031227  Progress: 37.69%  Words/thread/sec: 20.63k  Alpha: 0.031154  Progress: 37.83%  Words/thread/sec: 20.58k  Alpha: 0.031085  Progress: 37.98%  Words/thread/sec: 20.63k  Alpha: 0.031011  Progress: 38.12%  Words/thread/sec: 20.70k  Alpha: 0.030939  Progress: 38.27%  Words/thread/sec: 20.66k  Alpha: 0.030866  Progress: 38.41%  Words/thread/sec: 20.56k  Alpha: 0.030793  Progress: 38.56%  Words/thread/sec: 20.61k  Alpha: 0.030721  Progress: 38.71%  Words/thread/sec: 20.69k  Alpha: 0.030645  Progress: 38.85%  Words/thread/sec: 20.70k  Alpha: 0.030575  Progress: 39.09%  Words/thread/sec: 20.61k  Alpha: 0.030456  Progress: 39.23%  Words/thread/sec: 20.66k  Alpha: 0.030383  Progress: 39.38%  Words/thread/sec: 20.74k  Alpha: 0.030311  Progress: 39.52%  Words/thread/sec: 20.59k  Alpha: 0.030242  Progress: 39.66%  Words/thread/sec: 20.61k  Alpha: 0.030168  Progress: 39.80%  Words/thread/sec: 20.66k  Alpha: 0.030098  Progress: 39.95%  Words/thread/sec: 20.73k  Alpha: 0.030024  Progress: 40.24%  Words/thread/sec: 20.65k  Alpha: 0.029878  Progress: 40.39%  Words/thread/sec: 20.67k  Alpha: 0.029807  Progress: 40.53%  Words/thread/sec: 20.61k  Alpha: 0.029736  Progress: 40.67%  Words/thread/sec: 20.68k  Alpha: 0.029663  Progress: 40.80%  Words/thread/sec: 20.68k  Alpha: 0.029599  Progress: 41.04%  Words/thread/sec: 20.57k  Alpha: 0.029478  Progress: 41.19%  Words/thread/sec: 20.64k  Alpha: 0.029403  Progress: 41.33%  Words/thread/sec: 20.69k  Alpha: 0.029334  Progress: 41.48%  Words/thread/sec: 20.72k  Alpha: 0.029260  Progress: 41.63%  Words/thread/sec: 20.58k  Alpha: 0.029186  Progress: 41.77%  Words/thread/sec: 20.65k  Alpha: 0.029115  Progress: 41.92%  Words/thread/sec: 20.70k  Alpha: 0.029042  Progress: 42.06%  Words/thread/sec: 20.72k  Alpha: 0.028972  Progress: 42.20%  Words/thread/sec: 20.56k  Alpha: 0.028898  Progress: 42.35%  Words/thread/sec: 20.63k  Alpha: 0.028824  Progress: 42.50%  Words/thread/sec: 20.69k  Alpha: 0.028750  Progress: 42.65%  Words/thread/sec: 20.71k  Alpha: 0.028676  Progress: 42.79%  Words/thread/sec: 20.55k  Alpha: 0.028605  Progress: 42.93%  Words/thread/sec: 20.62k  Alpha: 0.028533  Progress: 43.08%  Words/thread/sec: 20.67k  Alpha: 0.028462  Progress: 43.22%  Words/thread/sec: 20.69k  Alpha: 0.028391  Progress: 43.37%  Words/thread/sec: 20.56k  Alpha: 0.028316  Progress: 43.51%  Words/thread/sec: 20.62k  Alpha: 0.028244  Progress: 43.66%  Words/thread/sec: 20.67k  Alpha: 0.028171  Progress: 43.81%  Words/thread/sec: 20.69k  Alpha: 0.028096  Progress: 43.96%  Words/thread/sec: 20.56k  Alpha: 0.028021  Progress: 44.10%  Words/thread/sec: 20.62k  Alpha: 0.027949  Progress: 44.25%  Words/thread/sec: 20.67k  Alpha: 0.027877  Progress: 44.39%  Words/thread/sec: 20.68k  Alpha: 0.027805  Progress: 44.53%  Words/thread/sec: 20.54k  Alpha: 0.027805  Progress: 44.68%  Words/thread/sec: 20.61k  Alpha: 0.027658  Progress: 44.82%  Words/thread/sec: 20.65k  Alpha: 0.027589  Progress: 44.97%  Words/thread/sec: 20.71k  Alpha: 0.027516  Progress: 45.11%  Words/thread/sec: 20.54k  Alpha: 0.027447  Progress: 45.25%  Words/thread/sec: 20.59k  Alpha: 0.027375  Progress: 45.40%  Words/thread/sec: 20.66k  Alpha: 0.027298  Progress: 45.55%  Words/thread/sec: 20.70k  Alpha: 0.027225  Progress: 45.79%  Words/thread/sec: 20.56k  Alpha: 0.027106  Progress: 45.93%  Words/thread/sec: 20.62k  Alpha: 0.027033  Progress: 46.08%  Words/thread/sec: 20.66k  Alpha: 0.026962  Progress: 46.21%  Words/thread/sec: 20.62k  Alpha: 0.026893  Progress: 46.36%  Words/thread/sec: 20.55k  Alpha: 0.026819  Progress: 46.50%  Words/thread/sec: 20.61k  Alpha: 0.026749  Progress: 46.65%  Words/thread/sec: 20.66k  Alpha: 0.026674  Progress: 46.80%  Words/thread/sec: 20.63k  Alpha: 0.026600  Progress: 47.09%  Words/thread/sec: 20.60k  Alpha: 0.026457  Progress: 47.23%  Words/thread/sec: 20.59k  Alpha: 0.026383  Progress: 47.37%  Words/thread/sec: 20.65k  Alpha: 0.026313  Progress: 47.53%  Words/thread/sec: 20.69k  Alpha: 0.026237  Progress: 47.78%  Words/thread/sec: 20.57k  Alpha: 0.026111  Progress: 47.92%  Words/thread/sec: 20.63k  Alpha: 0.026040  Progress: 48.07%  Words/thread/sec: 20.66k  Alpha: 0.025966  Progress: 48.21%  Words/thread/sec: 20.68k  Alpha: 0.025897  Progress: 48.35%  Words/thread/sec: 20.55k  Alpha: 0.025827  Progress: 48.49%  Words/thread/sec: 20.61k  Alpha: 0.025755  Progress: 48.63%  Words/thread/sec: 20.64k  Alpha: 0.025683  Progress: 48.78%  Words/thread/sec: 20.67k  Alpha: 0.025611  Progress: 48.93%  Words/thread/sec: 20.54k  Alpha: 0.025536  Progress: 49.08%  Words/thread/sec: 20.60k  Alpha: 0.025462  Progress: 49.22%  Words/thread/sec: 20.63k  Alpha: 0.025389  Progress: 49.37%  Words/thread/sec: 20.66k  Alpha: 0.025315  Progress: 49.51%  Words/thread/sec: 20.54k  Alpha: 0.025243  Progress: 49.66%  Words/thread/sec: 20.60k  Alpha: 0.025171  Progress: 49.80%  Words/thread/sec: 20.62k  Alpha: 0.025100  Progress: 49.94%  Words/thread/sec: 20.66k  Alpha: 0.025028  Progress: 50.09%  Words/thread/sec: 20.54k  Alpha: 0.024957  Progress: 50.24%  Words/thread/sec: 20.60k  Alpha: 0.024882  Progress: 50.39%  Words/thread/sec: 20.63k  Alpha: 0.024806  Progress: 50.53%  Words/thread/sec: 20.66k  Alpha: 0.024733  Progress: 50.68%  Words/thread/sec: 20.53k  Alpha: 0.024660  Progress: 50.83%  Words/thread/sec: 20.59k  Alpha: 0.024586  Progress: 50.97%  Words/thread/sec: 20.62k  Alpha: 0.024513  Progress: 51.12%  Words/thread/sec: 20.65k  Alpha: 0.024441  Progress: 51.27%  Words/thread/sec: 20.53k  Alpha: 0.024366  Progress: 51.41%  Words/thread/sec: 20.58k  Alpha: 0.024294  Progress: 51.56%  Words/thread/sec: 20.64k  Alpha: 0.024219  Progress: 51.70%  Words/thread/sec: 20.64k  Alpha: 0.024150  Progress: 51.83%  Words/thread/sec: 20.55k  Alpha: 0.024084  Progress: 51.98%  Words/thread/sec: 20.56k  Alpha: 0.024012  Progress: 52.13%  Words/thread/sec: 20.62k  Alpha: 0.023936  Progress: 52.27%  Words/thread/sec: 20.62k  Alpha: 0.023863  Progress: 52.49%  Words/thread/sec: 20.53k  Alpha: 0.023754  Progress: 52.64%  Words/thread/sec: 20.58k  Alpha: 0.023681  Progress: 52.78%  Words/thread/sec: 20.58k  Alpha: 0.023609  Progress: 52.92%  Words/thread/sec: 20.61k  Alpha: 0.023540  Progress: 53.07%  Words/thread/sec: 20.51k  Alpha: 0.023467  Progress: 53.21%  Words/thread/sec: 20.57k  Alpha: 0.023397  Progress: 53.35%  Words/thread/sec: 20.56k  Alpha: 0.023323  Progress: 53.50%  Words/thread/sec: 20.60k  Alpha: 0.023249  Progress: 53.79%  Words/thread/sec: 20.51k  Alpha: 0.023105  Progress: 53.94%  Words/thread/sec: 20.55k  Alpha: 0.023032  Progress: 54.08%  Words/thread/sec: 20.60k  Alpha: 0.022962  Progress: 54.23%  Words/thread/sec: 20.66k  Alpha: 0.022886  Progress: 54.48%  Words/thread/sec: 20.54k  Alpha: 0.022760  Progress: 54.62%  Words/thread/sec: 20.59k  Alpha: 0.022689  Progress: 54.77%  Words/thread/sec: 20.64k  Alpha: 0.022615  Progress: 54.91%  Words/thread/sec: 20.60k  Alpha: 0.022547  Progress: 55.05%  Words/thread/sec: 20.52k  Alpha: 0.022474  Progress: 55.19%  Words/thread/sec: 20.57k  Alpha: 0.022405  Progress: 55.34%  Words/thread/sec: 20.62k  Alpha: 0.022332  Progress: 55.48%  Words/thread/sec: 20.58k  Alpha: 0.022260  Progress: 55.63%  Words/thread/sec: 20.51k  Alpha: 0.022185  Progress: 55.78%  Words/thread/sec: 20.56k  Alpha: 0.022110  Progress: 55.92%  Words/thread/sec: 20.61k  Alpha: 0.022038  Progress: 56.07%  Words/thread/sec: 20.57k  Alpha: 0.021963  Progress: 56.22%  Words/thread/sec: 20.50k  Alpha: 0.021891  Progress: 56.36%  Words/thread/sec: 20.55k  Alpha: 0.021819  Progress: 56.50%  Words/thread/sec: 20.59k  Alpha: 0.021748  Progress: 56.65%  Words/thread/sec: 20.56k  Alpha: 0.021677  Progress: 56.77%  Words/thread/sec: 20.51k  Alpha: 0.021613  Progress: 56.92%  Words/thread/sec: 20.53k  Alpha: 0.021542  Progress: 57.07%  Words/thread/sec: 20.59k  Alpha: 0.021467  Progress: 57.21%  Words/thread/sec: 20.54k  Alpha: 0.021393  Progress: 57.36%  Words/thread/sec: 20.49k  Alpha: 0.021322  Progress: 57.51%  Words/thread/sec: 20.53k  Alpha: 0.021247  Progress: 57.65%  Words/thread/sec: 20.58k  Alpha: 0.021175  Progress: 57.79%  Words/thread/sec: 20.53k  Alpha: 0.021104  Progress: 57.94%  Words/thread/sec: 20.52k  Alpha: 0.021031  Progress: 58.08%  Words/thread/sec: 20.51k  Alpha: 0.020959  Progress: 58.23%  Words/thread/sec: 20.57k  Alpha: 0.020885  Progress: 58.37%  Words/thread/sec: 20.52k  Alpha: 0.020816  Progress: 58.51%  Words/thread/sec: 20.54k  Alpha: 0.020746  Progress: 58.66%  Words/thread/sec: 20.50k  Alpha: 0.020671  Progress: 58.80%  Words/thread/sec: 20.55k  Alpha: 0.020598  Progress: 59.04%  Words/thread/sec: 20.54k  Alpha: 0.020478  Progress: 59.19%  Words/thread/sec: 20.47k  Alpha: 0.020405  Progress: 59.34%  Words/thread/sec: 20.52k  Alpha: 0.020332  Progress: 59.47%  Words/thread/sec: 20.56k  Alpha: 0.020263  Progress: 59.62%  Words/thread/sec: 20.53k  Alpha: 0.020192  Progress: 59.76%  Words/thread/sec: 20.46k  Alpha: 0.020122  Progress: 59.90%  Words/thread/sec: 20.51k  Alpha: 0.020049  Progress: 60.05%  Words/thread/sec: 20.55k  Alpha: 0.019975  Progress: 60.20%  Words/thread/sec: 20.52k  Alpha: 0.019900  Progress: 60.49%  Words/thread/sec: 20.49k  Alpha: 0.019753  Progress: 60.63%  Words/thread/sec: 20.48k  Alpha: 0.019683  Progress: 60.78%  Words/thread/sec: 20.53k  Alpha: 0.019609  Progress: 60.93%  Words/thread/sec: 20.56k  Alpha: 0.019537  Progress: 61.07%  Words/thread/sec: 20.46k  Alpha: 0.019464  Progress: 61.32%  Words/thread/sec: 20.49k  Alpha: 0.019342  Progress: 61.47%  Words/thread/sec: 20.53k  Alpha: 0.019267  Progress: 61.60%  Words/thread/sec: 20.45k  Alpha: 0.019199  Progress: 61.74%  Words/thread/sec: 20.46k  Alpha: 0.019128  Progress: 61.89%  Words/thread/sec: 20.46k  Alpha: 0.019055  Progress: 62.03%  Words/thread/sec: 20.50k  Alpha: 0.018985  Progress: 62.18%  Words/thread/sec: 20.43k  Alpha: 0.018911  Progress: 62.32%  Words/thread/sec: 20.45k  Alpha: 0.018839  Progress: 62.47%  Words/thread/sec: 20.45k  Alpha: 0.018765  Progress: 62.62%  Words/thread/sec: 20.49k  Alpha: 0.018690  Progress: 62.77%  Words/thread/sec: 20.43k  Alpha: 0.018615  Progress: 62.91%  Words/thread/sec: 20.45k  Alpha: 0.018544  Progress: 63.06%  Words/thread/sec: 20.45k  Alpha: 0.018472  Progress: 63.20%  Words/thread/sec: 20.49k  Alpha: 0.018400  Progress: 63.34%  Words/thread/sec: 20.42k  Alpha: 0.018329  Progress: 63.49%  Words/thread/sec: 20.44k  Alpha: 0.018253  Progress: 63.64%  Words/thread/sec: 20.44k  Alpha: 0.018179  Progress: 63.79%  Words/thread/sec: 20.48k  Alpha: 0.018107  Progress: 63.93%  Words/thread/sec: 20.41k  Alpha: 0.018034  Progress: 64.08%  Words/thread/sec: 20.43k  Alpha: 0.017960  Progress: 64.23%  Words/thread/sec: 20.43k  Alpha: 0.017886  Progress: 64.37%  Words/thread/sec: 20.47k  Alpha: 0.017814  Progress: 64.52%  Words/thread/sec: 20.41k  Alpha: 0.017738  Progress: 64.67%  Words/thread/sec: 20.45k  Alpha: 0.017666  Progress: 64.81%  Words/thread/sec: 20.42k  Alpha: 0.017594  Progress: 64.96%  Words/thread/sec: 20.46k  Alpha: 0.017519  Progress: 65.09%  Words/thread/sec: 20.42k  Alpha: 0.017453  Progress: 65.23%  Words/thread/sec: 20.43k  Alpha: 0.017384  Progress: 65.38%  Words/thread/sec: 20.39k  Alpha: 0.017309  Progress: 65.53%  Words/thread/sec: 20.43k  Alpha: 0.017237  Progress: 65.75%  Words/thread/sec: 20.38k  Alpha: 0.017127  Progress: 65.88%  Words/thread/sec: 20.36k  Alpha: 0.017059  Progress: 66.03%  Words/thread/sec: 20.39k  Alpha: 0.016986  Progress: 66.17%  Words/thread/sec: 20.43k  Alpha: 0.016914  Progress: 66.32%  Words/thread/sec: 20.37k  Alpha: 0.016841  Progress: 66.47%  Words/thread/sec: 20.35k  Alpha: 0.016767  Progress: 66.61%  Words/thread/sec: 20.38k  Alpha: 0.016697  Progress: 66.75%  Words/thread/sec: 20.42k  Alpha: 0.016623  Progress: 67.05%  Words/thread/sec: 20.40k  Alpha: 0.016477  Progress: 67.20%  Words/thread/sec: 20.37k  Alpha: 0.016402  Progress: 67.34%  Words/thread/sec: 20.34k  Alpha: 0.016332  Progress: 67.48%  Words/thread/sec: 20.37k  Alpha: 0.016258  Progress: 67.63%  Words/thread/sec: 20.37k  Alpha: 0.016186  Progress: 67.78%  Words/thread/sec: 20.35k  Alpha: 0.016112  Progress: 68.02%  Words/thread/sec: 20.35k  Alpha: 0.015991  Progress: 68.17%  Words/thread/sec: 20.39k  Alpha: 0.015916  Progress: 68.31%  Words/thread/sec: 20.33k  Alpha: 0.015843  Progress: 68.45%  Words/thread/sec: 20.34k  Alpha: 0.015775  Progress: 68.60%  Words/thread/sec: 20.34k  Alpha: 0.015702  Progress: 68.74%  Words/thread/sec: 20.38k  Alpha: 0.015632  Progress: 68.88%  Words/thread/sec: 20.31k  Alpha: 0.015559  Progress: 69.03%  Words/thread/sec: 20.32k  Alpha: 0.015486  Progress: 69.18%  Words/thread/sec: 20.32k  Alpha: 0.015412  Progress: 69.33%  Words/thread/sec: 20.36k  Alpha: 0.015336  Progress: 69.47%  Words/thread/sec: 20.29k  Alpha: 0.015265  Progress: 69.62%  Words/thread/sec: 20.30k  Alpha: 0.015190  Progress: 69.76%  Words/thread/sec: 20.30k  Alpha: 0.015119  Progress: 69.91%  Words/thread/sec: 20.34k  Alpha: 0.015047  Progress: 70.03%  Words/thread/sec: 20.30k  Alpha: 0.014983  Progress: 70.17%  Words/thread/sec: 20.28k  Alpha: 0.014913  Progress: 70.33%  Words/thread/sec: 20.29k  Alpha: 0.014837  Progress: 70.47%  Words/thread/sec: 20.32k  Alpha: 0.014766  Progress: 70.61%  Words/thread/sec: 20.29k  Alpha: 0.014693  Progress: 70.76%  Words/thread/sec: 20.28k  Alpha: 0.014620  Progress: 70.91%  Words/thread/sec: 20.28k  Alpha: 0.014546  Progress: 71.05%  Words/thread/sec: 20.32k  Alpha: 0.014475  Progress: 71.20%  Words/thread/sec: 20.32k  Alpha: 0.014401  Progress: 71.34%  Words/thread/sec: 20.28k  Alpha: 0.014329  Progress: 71.49%  Words/thread/sec: 20.27k  Alpha: 0.014257  Progress: 71.63%  Words/thread/sec: 20.31k  Alpha: 0.014183  Progress: 71.77%  Words/thread/sec: 20.34k  Alpha: 0.014113  Progress: 71.91%  Words/thread/sec: 20.26k  Alpha: 0.014043  Progress: 72.16%  Words/thread/sec: 20.28k  Alpha: 0.013921  Progress: 72.30%  Words/thread/sec: 20.31k  Alpha: 0.013849  Progress: 72.44%  Words/thread/sec: 20.24k  Alpha: 0.013780  Progress: 72.59%  Words/thread/sec: 20.26k  Alpha: 0.013707  Progress: 72.73%  Words/thread/sec: 20.26k  Alpha: 0.013635  Progress: 72.88%  Words/thread/sec: 20.29k  Alpha: 0.013562  Progress: 73.03%  Words/thread/sec: 20.23k  Alpha: 0.013487  Progress: 73.17%  Words/thread/sec: 20.25k  Alpha: 0.013415  Progress: 73.31%  Words/thread/sec: 20.25k  Alpha: 0.013347  Progress: 73.45%  Words/thread/sec: 20.28k  Alpha: 0.013273  Progress: 73.58%  Words/thread/sec: 20.25k  Alpha: 0.013209  Progress: 73.88%  Words/thread/sec: 20.28k  Alpha: 0.013062  Progress: 74.02%  Words/thread/sec: 20.21k  Alpha: 0.012992  Progress: 74.16%  Words/thread/sec: 20.24k  Alpha: 0.012918  Progress: 74.31%  Words/thread/sec: 20.26k  Alpha: 0.012843  Progress: 74.46%  Words/thread/sec: 20.25k  Alpha: 0.012771  Progress: 74.60%  Words/thread/sec: 20.19k  Alpha: 0.012700  Progress: 74.75%  Words/thread/sec: 20.22k  Alpha: 0.012625  Progress: 74.99%  Words/thread/sec: 20.27k  Alpha: 0.012504  Progress: 75.13%  Words/thread/sec: 20.18k  Alpha: 0.012435  Progress: 75.28%  Words/thread/sec: 20.21k  Alpha: 0.012362  Progress: 75.42%  Words/thread/sec: 20.24k  Alpha: 0.012291  Progress: 75.56%  Words/thread/sec: 20.27k  Alpha: 0.012218  Progress: 75.71%  Words/thread/sec: 20.17k  Alpha: 0.012145  Progress: 75.86%  Words/thread/sec: 20.20k  Alpha: 0.012071  Progress: 76.01%  Words/thread/sec: 20.23k  Alpha: 0.011996  Progress: 76.15%  Words/thread/sec: 20.25k  Alpha: 0.011925  Progress: 76.30%  Words/thread/sec: 20.15k  Alpha: 0.011850  Progress: 76.44%  Words/thread/sec: 20.18k  Alpha: 0.011779  Progress: 76.58%  Words/thread/sec: 20.21k  Alpha: 0.011708  Progress: 76.74%  Words/thread/sec: 20.23k  Alpha: 0.011631  Progress: 76.88%  Words/thread/sec: 20.14k  Alpha: 0.011559  Progress: 77.03%  Words/thread/sec: 20.18k  Alpha: 0.011484  Progress: 77.17%  Words/thread/sec: 20.20k  Alpha: 0.011413  Progress: 77.32%  Words/thread/sec: 20.22k  Alpha: 0.011341  Progress: 77.47%  Words/thread/sec: 20.14k  Alpha: 0.011267  Progress: 77.62%  Words/thread/sec: 20.17k  Alpha: 0.011192  Progress: 77.76%  Words/thread/sec: 20.21k  Alpha: 0.011119  Progress: 77.91%  Words/thread/sec: 20.24k  Alpha: 0.011047  Progress: 78.04%  Words/thread/sec: 20.15k  Alpha: 0.010978  Progress: 78.19%  Words/thread/sec: 20.17k  Alpha: 0.010907  Progress: 78.33%  Words/thread/sec: 20.20k  Alpha: 0.010834  Progress: 78.48%  Words/thread/sec: 20.23k  Alpha: 0.010759  Progress: 78.72%  Words/thread/sec: 20.14k  Alpha: 0.010642  Progress: 78.87%  Words/thread/sec: 20.18k  Alpha: 0.010567  Progress: 79.01%  Words/thread/sec: 20.20k  Alpha: 0.010494  Progress: 79.15%  Words/thread/sec: 20.19k  Alpha: 0.010425  Progress: 79.30%  Words/thread/sec: 20.12k  Alpha: 0.010352  Progress: 79.44%  Words/thread/sec: 20.16k  Alpha: 0.010279  Progress: 79.59%  Words/thread/sec: 20.18k  Alpha: 0.010206  Progress: 79.74%  Words/thread/sec: 20.17k  Alpha: 0.010131  Progress: 79.88%  Words/thread/sec: 20.12k  Alpha: 0.010060  Progress: 80.02%  Words/thread/sec: 20.15k  Alpha: 0.009990  Progress: 80.17%  Words/thread/sec: 20.17k  Alpha: 0.009917  Progress: 80.32%  Words/thread/sec: 20.17k  Alpha: 0.009841  Progress: 80.59%  Words/thread/sec: 20.17k  Alpha: 0.009705  Progress: 80.73%  Words/thread/sec: 20.12k  Alpha: 0.009635  Progress: 80.88%  Words/thread/sec: 20.15k  Alpha: 0.009560  Progress: 81.03%  Words/thread/sec: 20.18k  Alpha: 0.009486  Progress: 81.17%  Words/thread/sec: 20.15k  Alpha: 0.009415  Progress: 81.31%  Words/thread/sec: 20.10k  Alpha: 0.009345  Progress: 81.46%  Words/thread/sec: 20.13k  Alpha: 0.009272  Progress: 81.61%  Words/thread/sec: 20.16k  Alpha: 0.009197  Progress: 81.88%  Words/thread/sec: 20.09k  Alpha: 0.009062  Progress: 82.02%  Words/thread/sec: 20.12k  Alpha: 0.008990  Progress: 82.16%  Words/thread/sec: 20.15k  Alpha: 0.008920  Progress: 82.30%  Words/thread/sec: 20.17k  Alpha: 0.008852  Progress: 82.44%  Words/thread/sec: 20.08k  Alpha: 0.008778  Progress: 82.59%  Words/thread/sec: 20.11k  Alpha: 0.008707  Progress: 82.74%  Words/thread/sec: 20.14k  Alpha: 0.008632  Progress: 82.88%  Words/thread/sec: 20.16k  Alpha: 0.008559  Progress: 83.01%  Words/thread/sec: 20.08k  Alpha: 0.008495  Progress: 83.15%  Words/thread/sec: 20.09k  Alpha: 0.008424  Progress: 83.30%  Words/thread/sec: 20.12k  Alpha: 0.008352  Progress: 83.45%  Words/thread/sec: 20.13k  Alpha: 0.008277  Progress: 83.59%  Words/thread/sec: 20.06k  Alpha: 0.008205  Progress: 83.74%  Words/thread/sec: 20.08k  Alpha: 0.008130  Progress: 83.88%  Words/thread/sec: 20.11k  Alpha: 0.008058  Progress: 84.03%  Words/thread/sec: 20.13k  Alpha: 0.007987  Progress: 84.17%  Words/thread/sec: 20.08k  Alpha: 0.007914  Progress: 84.32%  Words/thread/sec: 20.08k  Alpha: 0.007840  Progress: 84.46%  Words/thread/sec: 20.10k  Alpha: 0.007768  Progress: 84.61%  Words/thread/sec: 20.12k  Alpha: 0.007694  Progress: 84.75%  Words/thread/sec: 20.09k  Alpha: 0.007625  Progress: 84.90%  Words/thread/sec: 20.06k  Alpha: 0.007552  Progress: 85.04%  Words/thread/sec: 20.09k  Alpha: 0.007478  Progress: 85.19%  Words/thread/sec: 20.10k  Alpha: 0.007406  Progress: 85.43%  Words/thread/sec: 20.04k  Alpha: 0.007284  Progress: 85.58%  Words/thread/sec: 20.06k  Alpha: 0.007212  Progress: 85.71%  Words/thread/sec: 20.09k  Alpha: 0.007143  Progress: 85.85%  Words/thread/sec: 20.11k  Alpha: 0.007073  Progress: 86.00%  Words/thread/sec: 20.03k  Alpha: 0.007001  Progress: 86.15%  Words/thread/sec: 20.05k  Alpha: 0.006927  Progress: 86.29%  Words/thread/sec: 20.08k  Alpha: 0.006853  Progress: 86.44%  Words/thread/sec: 20.11k  Alpha: 0.006780  Progress: 86.58%  Words/thread/sec: 20.02k  Alpha: 0.006710  Progress: 86.73%  Words/thread/sec: 20.04k  Alpha: 0.006637  Progress: 86.88%  Words/thread/sec: 20.07k  Alpha: 0.006562  Progress: 87.02%  Words/thread/sec: 20.09k  Alpha: 0.006490  Progress: 87.31%  Words/thread/sec: 20.02k  Alpha: 0.006344  Progress: 87.46%  Words/thread/sec: 20.04k  Alpha: 0.006270  Progress: 87.60%  Words/thread/sec: 20.05k  Alpha: 0.006200  Progress: 87.75%  Words/thread/sec: 20.08k  Alpha: 0.006126  Progress: 87.89%  Words/thread/sec: 20.02k  Alpha: 0.006054  Progress: 88.04%  Words/thread/sec: 20.04k  Alpha: 0.005982  Progress: 88.18%  Words/thread/sec: 20.05k  Alpha: 0.005911  Progress: 88.33%  Words/thread/sec: 20.07k  Alpha: 0.005835  Progress: 88.58%  Words/thread/sec: 20.03k  Alpha: 0.005712  Progress: 88.72%  Words/thread/sec: 20.03k  Alpha: 0.005639  Progress: 88.86%  Words/thread/sec: 20.05k  Alpha: 0.005568  Progress: 89.00%  Words/thread/sec: 20.04k  Alpha: 0.005500  Progress: 89.14%  Words/thread/sec: 20.01k  Alpha: 0.005429  Progress: 89.29%  Words/thread/sec: 20.01k  Alpha: 0.005355  Progress: 89.44%  Words/thread/sec: 20.03k  Alpha: 0.005280  Progress: 89.59%  Words/thread/sec: 20.03k  Alpha: 0.005207  Progress: 89.74%  Words/thread/sec: 20.00k  Alpha: 0.005131  Progress: 89.88%  Words/thread/sec: 20.01k  Alpha: 0.005060  Progress: 90.02%  Words/thread/sec: 20.03k  Alpha: 0.004988  Progress: 90.17%  Words/thread/sec: 20.02k  Alpha: 0.004913  Progress: 90.32%  Words/thread/sec: 20.00k  Alpha: 0.004838  Progress: 90.47%  Words/thread/sec: 20.01k  Alpha: 0.004764  Progress: 90.61%  Words/thread/sec: 20.03k  Alpha: 0.004693  Progress: 90.76%  Words/thread/sec: 20.01k  Alpha: 0.004622  Progress: 90.91%  Words/thread/sec: 20.01k  Alpha: 0.004545  Progress: 91.06%  Words/thread/sec: 19.99k  Alpha: 0.004471  Progress: 91.20%  Words/thread/sec: 20.01k  Alpha: 0.004398  Progress: 91.35%  Words/thread/sec: 20.00k  Alpha: 0.004324  Progress: 91.49%  Words/thread/sec: 20.01k  Alpha: 0.004257  Progress: 91.63%  Words/thread/sec: 19.98k  Alpha: 0.004185  Progress: 91.84%  Words/thread/sec: 20.02k  Alpha: 0.004078  Progress: 91.99%  Words/thread/sec: 20.01k  Alpha: 0.004007  Progress: 92.12%  Words/thread/sec: 19.98k  Alpha: 0.003938  Progress: 92.27%  Words/thread/sec: 19.99k  Alpha: 0.003863  Progress: 92.42%  Words/thread/sec: 20.01k  Alpha: 0.003790  Progress: 92.56%  Words/thread/sec: 20.00k  Alpha: 0.003721  Progress: 92.71%  Words/thread/sec: 19.97k  Alpha: 0.003646  Progress: 92.85%  Words/thread/sec: 19.98k  Alpha: 0.003574  Progress: 93.00%  Words/thread/sec: 20.00k  Alpha: 0.003500  Progress: 93.15%  Words/thread/sec: 19.99k  Alpha: 0.003427  Progress: 93.30%  Words/thread/sec: 19.95k  Alpha: 0.003352  Progress: 93.44%  Words/thread/sec: 19.96k  Alpha: 0.003282  Progress: 93.58%  Words/thread/sec: 19.98k  Alpha: 0.003209  Progress: 93.73%  Words/thread/sec: 19.98k  Alpha: 0.003137  Progress: 94.02%  Words/thread/sec: 19.98k  Alpha: 0.002990  Progress: 94.16%  Words/thread/sec: 19.95k  Alpha: 0.002920  Progress: 94.31%  Words/thread/sec: 19.98k  Alpha: 0.002846  Progress: 94.46%  Words/thread/sec: 20.00k  Alpha: 0.002771  Progress: 94.60%  Words/thread/sec: 19.97k  Alpha: 0.002699  Progress: 94.74%  Words/thread/sec: 19.94k  Alpha: 0.002629  Progress: 94.89%  Words/thread/sec: 19.96k  Alpha: 0.002557  Progress: 95.04%  Words/thread/sec: 19.99k  Alpha: 0.002482  Progress: 95.18%  Words/thread/sec: 19.96k  Alpha: 0.002410  Progress: 95.43%  Words/thread/sec: 19.95k  Alpha: 0.002287  Progress: 95.57%  Words/thread/sec: 19.97k  Alpha: 0.002216  Progress: 95.71%  Words/thread/sec: 19.94k  Alpha: 0.002145  Progress: 95.85%  Words/thread/sec: 19.96k  Alpha: 0.002077  Progress: 95.99%  Words/thread/sec: 19.94k  Alpha: 0.002003  Progress: 96.14%  Words/thread/sec: 19.96k  Alpha: 0.001928  Progress: 96.30%  Words/thread/sec: 19.94k  Alpha: 0.001852  Progress: 96.44%  Words/thread/sec: 19.96k  Alpha: 0.001779  Progress: 96.58%  Words/thread/sec: 19.93k  Alpha: 0.001708  Progress: 96.73%  Words/thread/sec: 19.95k  Alpha: 0.001637  Progress: 96.87%  Words/thread/sec: 19.92k  Alpha: 0.001564  Progress: 97.02%  Words/thread/sec: 19.95k  Alpha: 0.001489  Progress: 97.17%  Words/thread/sec: 19.92k  Alpha: 0.001414  Progress: 97.31%  Words/thread/sec: 19.94k  Alpha: 0.001343  Progress: 97.47%  Words/thread/sec: 19.93k  Alpha: 0.001267  Progress: 97.61%  Words/thread/sec: 19.94k  Alpha: 0.001196  Progress: 97.76%  Words/thread/sec: 19.92k  Alpha: 0.001121  Progress: 97.90%  Words/thread/sec: 19.94k  Alpha: 0.001048  Progress: 98.04%  Words/thread/sec: 19.94k  Alpha: 0.000982  Progress: 98.18%  Words/thread/sec: 19.93k  Alpha: 0.000909  Progress: 98.40%  Words/thread/sec: 19.93k  Alpha: 0.000802  Progress: 98.54%  Words/thread/sec: 19.95k  Alpha: 0.000728  Progress: 98.69%  Words/thread/sec: 19.94k  Alpha: 0.000657  Progress: 98.84%  Words/thread/sec: 19.92k  Alpha: 0.000581  Progress: 98.98%  Words/thread/sec: 19.95k  Alpha: 0.000509  Progress: 99.12%  Words/thread/sec: 19.93k  Alpha: 0.000439  Progress: 99.27%  Words/thread/sec: 19.92k  Alpha: 0.000367  Progress: 99.41%  Words/thread/sec: 19.94k  Alpha: 0.000294  Progress: 99.56%  Words/thread/sec: 19.93k  Alpha: 0.000220  Progress: 99.70%  Words/thread/sec: 19.92k  Alpha: 0.000151  Progress: 99.85%  Words/thread/sec: 19.94k  Alpha: 0.000077  Progress: 100.13%  Words/thread/sec: 19.96k  Alpha: 0.000005  Progress: 100.28%  Words/thread/sec: 19.96k  Alpha: 0.000005  Progress: 100.43%  Words/thread/sec: 19.96k  # started on Wed Mar  3 03:48:34 2021


 Performance counter stats for 'system wide':

S0-C0           1         108,882.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             11,918      context-switches          #    0.109 K/sec                  
S0-C0           1                523      cpu-migrations            #    0.005 K/sec                  
S0-C0           1            132,024      page-faults               #    0.001 M/sec                  
S0-C0           1      1,360,646,545      cycles                    #    0.012 GHz                    
S0-C0           1      3,559,064,783      instructions              #    2.62  insn per cycle         
S0-C0           1      1,519,018,465      branches                  #   13.951 M/sec                  
S0-C0           1         87,948,435      branch-misses             #    5.79% of all branches        
S0-C1           1         108,882.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1             11,334      context-switches          #    0.104 K/sec                  
S0-C1           1                494      cpu-migrations            #    0.005 K/sec                  
S0-C1           1                 15      page-faults               #    0.000 K/sec                  
S0-C1           1        968,913,393      cycles                    #    0.009 GHz                    
S0-C1           1      3,222,095,054      instructions              #    3.33  insn per cycle         
S0-C1           1      1,299,273,827      branches                  #   11.933 M/sec                  
S0-C1           1         82,460,605      branch-misses             #    6.35% of all branches        
S0-C2           1         108,882.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,144      context-switches          #    0.047 K/sec                  
S0-C2           1                511      cpu-migrations            #    0.005 K/sec                  
S0-C2           1                  7      page-faults               #    0.000 K/sec                  
S0-C2           1      3,330,283,738      cycles                    #    0.031 GHz                    
S0-C2           1      2,539,380,076      instructions              #    0.76  insn per cycle         
S0-C2           1      1,271,661,225      branches                  #   11.679 M/sec                  
S0-C2           1         79,543,853      branch-misses             #    6.26% of all branches        
S0-C3           1         108,882.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,732      context-switches          #    0.053 K/sec                  
S0-C3           1                493      cpu-migrations            #    0.005 K/sec                  
S0-C3           1                  7      page-faults               #    0.000 K/sec                  
S0-C3           1      3,241,592,813      cycles                    #    0.030 GHz                    
S0-C3           1      2,448,701,464      instructions              #    0.76  insn per cycle         
S0-C3           1      1,260,365,653      branches                  #   11.576 M/sec                  
S0-C3           1         79,681,866      branch-misses             #    6.32% of all branches        

     108.883502612 seconds time elapsed

================================================================================
perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/grep_perf_output_1614743425350342969.txt --per-core -a taskset -c 0-3 ./mpi_grep_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 03:50:25 2021


 Performance counter stats for 'system wide':

S0-C0           1              14.19 msec cpu-clock                 #    0.978 CPUs utilized          
S0-C0           1                 21      context-switches          #    0.001 M/sec                  
S0-C0           1                  1      cpu-migrations            #    0.070 K/sec                  
S0-C0           1                159      page-faults               #    0.011 M/sec                  
S0-C0           1          8,604,643      cycles                    #    0.606 GHz                    
S0-C0           1          2,208,598      instructions              #    0.26  insn per cycle         
S0-C0           1            271,394      branches                  #   19.120 M/sec                  
S0-C0           1             52,433      branch-misses             #   19.32% of all branches        
S0-C1           1              14.20 msec cpu-clock                 #    0.978 CPUs utilized          
S0-C1           1                 13      context-switches          #    0.916 K/sec                  
S0-C1           1                  2      cpu-migrations            #    0.141 K/sec                  
S0-C1           1                201      page-faults               #    0.014 M/sec                  
S0-C1           1         10,895,114      cycles                    #    0.767 GHz                    
S0-C1           1          3,559,709      instructions              #    0.33  insn per cycle         
S0-C1           1            430,797      branches                  #   30.343 M/sec                  
S0-C1           1             78,259      branch-misses             #   18.17% of all branches        
S0-C2           1              14.20 msec cpu-clock                 #    0.978 CPUs utilized          
S0-C2           1                 22      context-switches          #    0.002 M/sec                  
S0-C2           1                  2      cpu-migrations            #    0.141 K/sec                  
S0-C2           1                116      page-faults               #    0.008 M/sec                  
S0-C2           1          2,390,353      cycles                    #    0.168 GHz                    
S0-C2           1            770,349      instructions              #    0.32  insn per cycle         
S0-C2           1             95,375      branches                  #    6.717 M/sec                  
S0-C2           1             13,713      branch-misses             #   14.38% of all branches        
S0-C3           1              14.20 msec cpu-clock                 #    0.978 CPUs utilized          
S0-C3           1                 15      context-switches          #    0.001 M/sec                  
S0-C3           1                  3      cpu-migrations            #    0.211 K/sec                  
S0-C3           1                  0      page-faults               #    0.000 K/sec                  
S0-C3           1          1,076,919      cycles                    #    0.076 GHz                    
S0-C3           1            200,281      instructions              #    0.19  insn per cycle         
S0-C3           1             28,132      branches                  #    1.982 M/sec                  
S0-C3           1              6,922      branch-misses             #   24.61% of all branches        

       0.014512594 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/lda_perf_output_1614743425450872190.txt --per-core -a taskset -c 0-3 ./mpi_lda_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 03:50:25 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.44 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C0           1                 13      context-switches          #    0.001 M/sec                  
S0-C0           1                  1      cpu-migrations            #    0.080 K/sec                  
S0-C0           1                 97      page-faults               #    0.008 M/sec                  
S0-C0           1          2,595,955      cycles                    #    0.209 GHz                    
S0-C0           1            675,968      instructions              #    0.26  insn per cycle         
S0-C0           1             83,994      branches                  #    6.753 M/sec                  
S0-C0           1             14,129      branch-misses             #   16.82% of all branches        
S0-C1           1              12.44 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C1           1                  6      context-switches          #    0.482 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.080 K/sec                  
S0-C1           1                111      page-faults               #    0.009 M/sec                  
S0-C1           1          2,025,483      cycles                    #    0.163 GHz                    
S0-C1           1            668,143      instructions              #    0.33  insn per cycle         
S0-C1           1             81,895      branches                  #    6.583 M/sec                  
S0-C1           1             11,504      branch-misses             #   14.05% of all branches        
S0-C2           1              12.44 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C2           1                 17      context-switches          #    0.001 M/sec                  
S0-C2           1                  2      cpu-migrations            #    0.161 K/sec                  
S0-C2           1                  0      page-faults               #    0.000 K/sec                  
S0-C2           1          1,901,756      cycles                    #    0.153 GHz                    
S0-C2           1            342,450      instructions              #    0.18  insn per cycle         
S0-C2           1             44,055      branches                  #    3.542 M/sec                  
S0-C2           1             10,270      branch-misses             #   23.31% of all branches        
S0-C3           1              12.44 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C3           1                 11      context-switches          #    0.884 K/sec                  
S0-C3           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                250      page-faults               #    0.020 M/sec                  
S0-C3           1         13,252,515      cycles                    #    1.066 GHz                    
S0-C3           1          4,282,238      instructions              #    0.32  insn per cycle         
S0-C3           1            518,057      branches                  #   41.653 M/sec                  
S0-C3           1             88,798      branch-misses             #   17.14% of all branches        

       0.012748578 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/NaiveBayes_perf_output_1614743425544673119.txt --per-core -a taskset -c 0-3 ./mpi_naive_bayes_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 03:50:25 2021


 Performance counter stats for 'system wide':

S0-C0           1              53.98 msec cpu-clock                 #    0.994 CPUs utilized          
S0-C0           1                 66      context-switches          #    0.001 M/sec                  
S0-C0           1                  8      cpu-migrations            #    0.148 K/sec                  
S0-C0           1                278      page-faults               #    0.005 M/sec                  
S0-C0           1         17,538,364      cycles                    #    0.325 GHz                    
S0-C0           1          5,085,084      instructions              #    0.29  insn per cycle         
S0-C0           1            643,088      branches                  #   11.913 M/sec                  
S0-C0           1            118,865      branch-misses             #   18.48% of all branches        
S0-C1           1              53.98 msec cpu-clock                 #    0.994 CPUs utilized          
S0-C1           1                 53      context-switches          #    0.982 K/sec                  
S0-C1           1                  6      cpu-migrations            #    0.111 K/sec                  
S0-C1           1                308      page-faults               #    0.006 M/sec                  
S0-C1           1          9,374,645      cycles                    #    0.174 GHz                    
S0-C1           1          2,895,050      instructions              #    0.31  insn per cycle         
S0-C1           1            350,196      branches                  #    6.487 M/sec                  
S0-C1           1             55,113      branch-misses             #   15.74% of all branches        
S0-C2           1              53.98 msec cpu-clock                 #    0.994 CPUs utilized          
S0-C2           1                 41      context-switches          #    0.759 K/sec                  
S0-C2           1                  4      cpu-migrations            #    0.074 K/sec                  
S0-C2           1                464      page-faults               #    0.009 M/sec                  
S0-C2           1         16,147,281      cycles                    #    0.299 GHz                    
S0-C2           1          5,025,342      instructions              #    0.31  insn per cycle         
S0-C2           1            614,707      branches                  #   11.387 M/sec                  
S0-C2           1            113,777      branch-misses             #   18.51% of all branches        
S0-C3           1              53.98 msec cpu-clock                 #    0.994 CPUs utilized          
S0-C3           1                 67      context-switches          #    0.001 M/sec                  
S0-C3           1                  6      cpu-migrations            #    0.111 K/sec                  
S0-C3           1                586      page-faults               #    0.011 M/sec                  
S0-C3           1         34,386,781      cycles                    #    0.637 GHz                    
S0-C3           1         11,215,770      instructions              #    0.33  insn per cycle         
S0-C3           1          1,397,430      branches                  #   25.886 M/sec                  
S0-C3           1            248,483      branch-misses             #   17.78% of all branches        

       0.054309878 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/wordcounts_perf_output_1614743425680058657.txt --per-core -a taskset -c 0-3 ./mpi_wordcount_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 03:50:25 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.36 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C0           1                 10      context-switches          #    0.809 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.081 K/sec                  
S0-C0           1                 95      page-faults               #    0.008 M/sec                  
S0-C0           1          3,221,474      cycles                    #    0.261 GHz                    
S0-C0           1            742,804      instructions              #    0.23  insn per cycle         
S0-C0           1             91,887      branches                  #    7.432 M/sec                  
S0-C0           1             17,384      branch-misses             #   18.92% of all branches        
S0-C1           1              12.36 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C1           1                  8      context-switches          #    0.647 K/sec                  
S0-C1           1                  2      cpu-migrations            #    0.162 K/sec                  
S0-C1           1                107      page-faults               #    0.009 M/sec                  
S0-C1           1          2,204,733      cycles                    #    0.178 GHz                    
S0-C1           1            683,765      instructions              #    0.31  insn per cycle         
S0-C1           1             84,268      branches                  #    6.815 M/sec                  
S0-C1           1             12,514      branch-misses             #   14.85% of all branches        
S0-C2           1              12.36 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C2           1                 12      context-switches          #    0.971 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.081 K/sec                  
S0-C2           1                  0      page-faults               #    0.000 K/sec                  
S0-C2           1            781,422      cycles                    #    0.063 GHz                    
S0-C2           1            147,277      instructions              #    0.19  insn per cycle         
S0-C2           1             20,111      branches                  #    1.627 M/sec                  
S0-C2           1              4,335      branch-misses             #   21.56% of all branches        
S0-C3           1              12.36 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C3           1                 11      context-switches          #    0.890 K/sec                  
S0-C3           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                249      page-faults               #    0.020 M/sec                  
S0-C3           1         13,202,149      cycles                    #    1.068 GHz                    
S0-C3           1          4,285,141      instructions              #    0.32  insn per cycle         
S0-C3           1            518,509      branches                  #   41.949 M/sec                  
S0-C3           1             88,159      branch-misses             #   17.00% of all branches        

       0.012668192 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/kmeans_perf_output_1614743425773886125.txt --per-core -a taskset -c 0-3 ./mpi_kmeans_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 03:50:25 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.67 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C0           1                 14      context-switches          #    0.001 M/sec                  
S0-C0           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                102      page-faults               #    0.008 M/sec                  
S0-C0           1          3,104,808      cycles                    #    0.245 GHz                    
S0-C0           1            821,984      instructions              #    0.26  insn per cycle         
S0-C0           1            101,070      branches                  #    7.976 M/sec                  
S0-C0           1             17,549      branch-misses             #   17.36% of all branches        
S0-C1           1              12.67 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C1           1                 11      context-switches          #    0.868 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.079 K/sec                  
S0-C1           1                 59      page-faults               #    0.005 M/sec                  
S0-C1           1          2,925,456      cycles                    #    0.231 GHz                    
S0-C1           1            786,291      instructions              #    0.27  insn per cycle         
S0-C1           1             99,119      branches                  #    7.822 M/sec                  
S0-C1           1             15,863      branch-misses             #   16.00% of all branches        
S0-C2           1              12.67 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C2           1                 13      context-switches          #    0.001 M/sec                  
S0-C2           1                  4      cpu-migrations            #    0.316 K/sec                  
S0-C2           1                111      page-faults               #    0.009 M/sec                  
S0-C2           1          2,757,835      cycles                    #    0.218 GHz                    
S0-C2           1            788,603      instructions              #    0.29  insn per cycle         
S0-C2           1             97,925      branches                  #    7.730 M/sec                  
S0-C2           1             16,417      branch-misses             #   16.76% of all branches        
S0-C3           1              12.67 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                 14      context-switches          #    0.001 M/sec                  
S0-C3           1                  1      cpu-migrations            #    0.079 K/sec                  
S0-C3           1                193      page-faults               #    0.015 M/sec                  
S0-C3           1         11,862,645      cycles                    #    0.937 GHz                    
S0-C3           1          3,758,649      instructions              #    0.32  insn per cycle         
S0-C3           1            452,642      branches                  #   35.736 M/sec                  
S0-C3           1             81,040      branch-misses             #   17.90% of all branches        

       0.012989195 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/md5_perf_output_1614743425867091433.txt --per-core -a taskset -c 0-3 ./mpi_md5_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 03:50:25 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.70 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C0           1                 10      context-switches          #    0.788 K/sec                  
S0-C0           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                 97      page-faults               #    0.008 M/sec                  
S0-C0           1          2,570,710      cycles                    #    0.202 GHz                    
S0-C0           1            669,918      instructions              #    0.26  insn per cycle         
S0-C0           1             83,079      branches                  #    6.543 M/sec                  
S0-C0           1             13,436      branch-misses             #   16.17% of all branches        
S0-C1           1              12.70 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C1           1                 12      context-switches          #    0.945 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.079 K/sec                  
S0-C1           1                  0      page-faults               #    0.000 K/sec                  
S0-C1           1          1,130,510      cycles                    #    0.089 GHz                    
S0-C1           1            189,119      instructions              #    0.17  insn per cycle         
S0-C1           1             25,621      branches                  #    2.018 M/sec                  
S0-C1           1              6,110      branch-misses             #   23.85% of all branches        
S0-C2           1              12.70 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C2           1                  8      context-switches          #    0.630 K/sec                  
S0-C2           1                  2      cpu-migrations            #    0.158 K/sec                  
S0-C2           1                111      page-faults               #    0.009 M/sec                  
S0-C2           1          2,646,301      cycles                    #    0.208 GHz                    
S0-C2           1            752,503      instructions              #    0.28  insn per cycle         
S0-C2           1             92,361      branches                  #    7.274 M/sec                  
S0-C2           1             14,976      branch-misses             #   16.21% of all branches        
S0-C3           1              12.70 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C3           1                 13      context-switches          #    0.001 M/sec                  
S0-C3           1                  1      cpu-migrations            #    0.079 K/sec                  
S0-C3           1                251      page-faults               #    0.020 M/sec                  
S0-C3           1         13,003,807      cycles                    #    1.024 GHz                    
S0-C3           1          4,289,913      instructions              #    0.33  insn per cycle         
S0-C3           1            519,702      branches                  #   40.930 M/sec                  
S0-C3           1             89,354      branch-misses             #   17.19% of all branches        

       0.013013349 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/sort_perf_output_1614743425961140365.txt --per-core -a taskset -c 0-3 ./mpi_sort_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 03:50:26 2021


 Performance counter stats for 'system wide':

S0-C0           1              13.15 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                 17      context-switches          #    0.001 M/sec                  
S0-C0           1                  1      cpu-migrations            #    0.076 K/sec                  
S0-C0           1                 50      page-faults               #    0.004 M/sec                  
S0-C0           1          5,037,002      cycles                    #    0.383 GHz                    
S0-C0           1          1,250,308      instructions              #    0.25  insn per cycle         
S0-C0           1            157,051      branches                  #   11.940 M/sec                  
S0-C0           1             29,522      branch-misses             #   18.80% of all branches        
S0-C1           1              13.16 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C1           1                 11      context-switches          #    0.836 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.076 K/sec                  
S0-C1           1                199      page-faults               #    0.015 M/sec                  
S0-C1           1         10,052,583      cycles                    #    0.764 GHz                    
S0-C1           1          3,408,455      instructions              #    0.34  insn per cycle         
S0-C1           1            409,930      branches                  #   31.158 M/sec                  
S0-C1           1             70,540      branch-misses             #   17.21% of all branches        
S0-C2           1              13.15 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C2           1                  9      context-switches          #    0.684 K/sec                  
S0-C2           1                  3      cpu-migrations            #    0.228 K/sec                  
S0-C2           1                108      page-faults               #    0.008 M/sec                  
S0-C2           1          2,040,623      cycles                    #    0.155 GHz                    
S0-C2           1            686,626      instructions              #    0.34  insn per cycle         
S0-C2           1             85,068      branches                  #    6.467 M/sec                  
S0-C2           1             12,531      branch-misses             #   14.73% of all branches        
S0-C3           1              13.16 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                 14      context-switches          #    0.001 M/sec                  
S0-C3           1                  2      cpu-migrations            #    0.152 K/sec                  
S0-C3           1                 96      page-faults               #    0.007 M/sec                  
S0-C3           1          2,331,648      cycles                    #    0.177 GHz                    
S0-C3           1            678,122      instructions              #    0.29  insn per cycle         
S0-C3           1             83,891      branches                  #    6.377 M/sec                  
S0-C3           1             14,046      branch-misses             #   16.74% of all branches        

       0.013491891 seconds time elapsed

================================================================================
perf stat -o sqlite_4_threads.txt  --per-core -a taskset -c 0-3 ./sqlite_benchmark 4
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index......................    0.101s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.101s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.101s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.103s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.145s
 120 - 13000 unordered INSERTS with one index/PK...................    0.145s
 120 - 13000 unordered INSERTS with one index/PK...................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.148s
 120 - 13000 unordered INSERTS with one index/PK...................    0.196s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.196s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.199s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.201s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.206s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.207s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.202s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.203s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.328s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.327s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.339s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.340s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.172s
 150 - CREATE INDEX five times.....................................    0.173s
 150 - CREATE INDEX five times.....................................    0.174s
 150 - CREATE INDEX five times.....................................    0.175s
 150 - CREATE INDEX five times.....................................    0.219s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.218s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.219s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.219s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.107s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.106s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.105s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.105s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.106s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.226s
 180 - 13000 INSERTS with three indexes............................    0.225s
 180 - 13000 INSERTS with three indexes............................    0.225s
 180 - 13000 INSERTS with three indexes............................    0.226s
 180 - 13000 INSERTS with three indexes............................    0.247s
 190 - DELETE and REFILL one table.................................    0.244s
 190 - DELETE and REFILL one table.................................    0.245s
 190 - DELETE and REFILL one table.................................    0.247s
 190 - DELETE and REFILL one table.................................    0.254s
 200 - VACUUM......................................................    0.253s
 200 - VACUUM......................................................    0.252s
 200 - VACUUM......................................................    0.257s
 200 - VACUUM......................................................    0.385s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.385s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.385s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.394s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.094s
 240 - 13000 UPDATES of individual rows............................    0.095s
 240 - 13000 UPDATES of individual rows............................    0.094s
 240 - 13000 UPDATES of individual rows............................    0.096s
 240 - 13000 UPDATES of individual rows............................    0.162s
 250 - One big UPDATE of the whole 13000-row table.................    0.162s
 250 - One big UPDATE of the whole 13000-row table.................    0.162s
 250 - One big UPDATE of the whole 13000-row table.................    0.165s
 250 - One big UPDATE of the whole 13000-row table.................    0.046s
 260 - Query added column after filling............................    0.045s
 260 - Query added column after filling............................    0.046s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.049s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.232s
 280 - 13000 DELETEs of individual rows............................    0.233s
 280 - 13000 DELETEs of individual rows............................    0.234s
 280 - 13000 DELETEs of individual rows............................    0.242s
 280 - 13000 DELETEs of individual rows............................    0.213s
 290 - Refill two 13000-row tables using REPLACE...................    0.213s
 290 - Refill two 13000-row tables using REPLACE...................    0.214s
 290 - Refill two 13000-row tables using REPLACE...................    0.222s
 290 - Refill two 13000-row tables using REPLACE...................    0.610s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.608s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.612s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.621s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.276s
 310 - 2600 four-ways joins........................................    0.277s
 310 - 2600 four-ways joins........................................    0.279s
 310 - 2600 four-ways joins........................................    0.287s
 310 - 2600 four-ways joins........................................    0.484s
 320 - subquery in result set......................................    0.487s
 320 - subquery in result set......................................    0.487s
 320 - subquery in result set......................................    0.485s
 320 - subquery in result set......................................    0.947s
 400 - 26000 REPLACE ops on an IPK.................................    0.947s
 400 - 26000 REPLACE ops on an IPK.................................    0.961s
 400 - 26000 REPLACE ops on an IPK.................................    0.973s
 400 - 26000 REPLACE ops on an IPK.................................    0.321s
 410 - 26000 SELECTS on an IPK.....................................    0.321s
 410 - 26000 SELECTS on an IPK.....................................    0.326s
 410 - 26000 SELECTS on an IPK.....................................    0.331s
 410 - 26000 SELECTS on an IPK.....................................    0.207s
 500 - 26000 REPLACE on TEXT PK....................................    0.207s
 500 - 26000 REPLACE on TEXT PK....................................    0.205s
 500 - 26000 REPLACE on TEXT PK....................................    0.208s
 500 - 26000 REPLACE on TEXT PK....................................    0.329s
 510 - 26000 SELECTS on a TEXT PK..................................    0.329s
 510 - 26000 SELECTS on a TEXT PK..................................    0.328s
 510 - 26000 SELECTS on a TEXT PK..................................    0.338s
 510 - 26000 SELECTS on a TEXT PK..................................    0.362s
 520 - 26000 SELECT DISTINCT.......................................    0.364s
 520 - 26000 SELECT DISTINCT.......................................    0.361s
 520 - 26000 SELECT DISTINCT.......................................    0.368s
 520 - 26000 SELECT DISTINCT.......................................    0.247s
 980 - PRAGMA integrity_check......................................    0.248s
 980 - PRAGMA integrity_check......................................    0.248s
 980 - PRAGMA integrity_check......................................    0.254s
 980 - PRAGMA integrity_check......................................    0.488s
 990 - ANALYZE.....................................................    0.490s
 990 - ANALYZE.....................................................    0.485s
 990 - ANALYZE.....................................................    0.071s
       TOTAL.......................................................    7.915s
   0.072s
       TOTAL.......................................................    7.925s
   0.071s
       TOTAL.......................................................    7.934s
   0.479s
 990 - ANALYZE.....................................................    0.072s
       TOTAL.......................................................    8.029s
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
# started on Wed Mar  3 03:50:26 2021


 Performance counter stats for 'system wide':

S0-C0           1           8,120.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,379      context-switches          #    0.170 K/sec                  
S0-C0           1                107      cpu-migrations            #    0.013 K/sec                  
S0-C0           1              1,782      page-faults               #    0.219 K/sec                  
S0-C0           1      1,568,727,287      cycles                    #    0.193 GHz                    
S0-C0           1        625,130,035      instructions              #    0.40  insn per cycle         
S0-C0           1        610,094,237      branches                  #   75.129 M/sec                  
S0-C0           1         86,829,383      branch-misses             #   14.23% of all branches        
S0-C1           1           8,120.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                570      context-switches          #    0.070 K/sec                  
S0-C1           1                 88      cpu-migrations            #    0.011 K/sec                  
S0-C1           1              1,843      page-faults               #    0.227 K/sec                  
S0-C1           1      1,414,072,442      cycles                    #    0.174 GHz                    
S0-C1           1        598,361,937      instructions              #    0.42  insn per cycle         
S0-C1           1        606,575,564      branches                  #   74.695 M/sec                  
S0-C1           1         86,343,855      branch-misses             #   14.23% of all branches        
S0-C2           1           8,120.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                654      context-switches          #    0.081 K/sec                  
S0-C2           1                 86      cpu-migrations            #    0.011 K/sec                  
S0-C2           1              1,972      page-faults               #    0.243 K/sec                  
S0-C2           1      1,427,740,887      cycles                    #    0.176 GHz                    
S0-C2           1        600,751,637      instructions              #    0.42  insn per cycle         
S0-C2           1        606,875,028      branches                  #   74.732 M/sec                  
S0-C2           1         86,314,829      branch-misses             #   14.22% of all branches        
S0-C3           1           8,120.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,747      context-switches          #    0.215 K/sec                  
S0-C3           1                114      cpu-migrations            #    0.014 K/sec                  
S0-C3           1              1,944      page-faults               #    0.239 K/sec                  
S0-C3           1      1,447,625,095      cycles                    #    0.178 GHz                    
S0-C3           1        611,956,830      instructions              #    0.42  insn per cycle         
S0-C3           1        608,357,194      branches                  #   74.915 M/sec                  
S0-C3           1         86,698,092      branch-misses             #   14.25% of all branches        

       8.121074503 seconds time elapsed

================================================================================
perf stat -o go_word2vec_4_threads.txt  --per-core -a taskset -c 0-3 ./go_word2vec.sh 4
/home/mendel/sd_card/i-benchmarks/golang/bin
Save trained vectors to example/word_vectors_sg.txt
# started on Wed Mar  3 03:50:34 2021


 Performance counter stats for 'system wide':

S0-C0           1          40,669.04 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              9,384      context-switches          #    0.231 K/sec                  
S0-C0           1                 65      cpu-migrations            #    0.002 K/sec                  
S0-C0           1              7,275      page-faults               #    0.179 K/sec                  
S0-C0           1      1,186,185,471      cycles                    #    0.029 GHz                    
S0-C0           1      1,980,019,979      instructions              #    1.67  insn per cycle         
S0-C0           1      2,147,683,647      branches                  #   52.809 M/sec                  
S0-C0           1         58,131,461      branch-misses             #    2.71% of all branches        
S0-C1           1          40,669.04 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              8,496      context-switches          #    0.209 K/sec                  
S0-C1           1                 48      cpu-migrations            #    0.001 K/sec                  
S0-C1           1             12,844      page-faults               #    0.316 K/sec                  
S0-C1           1      3,138,213,443      cycles                    #    0.077 GHz                    
S0-C1           1        296,387,156      instructions              #    0.09  insn per cycle         
S0-C1           1      2,000,396,647      branches                  #   49.187 M/sec                  
S0-C1           1         44,623,431      branch-misses             #    2.23% of all branches        
S0-C2           1          40,669.04 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,832      context-switches          #    0.143 K/sec                  
S0-C2           1                 46      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                474      page-faults               #    0.012 K/sec                  
S0-C2           1      1,277,171,599      cycles                    #    0.031 GHz                    
S0-C2           1      3,274,131,695      instructions              #    2.56  insn per cycle         
S0-C2           1      1,885,745,477      branches                  #   46.368 M/sec                  
S0-C2           1         33,936,601      branch-misses             #    1.80% of all branches        
S0-C3           1          40,669.04 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,540      context-switches          #    0.136 K/sec                  
S0-C3           1                 37      cpu-migrations            #    0.001 K/sec                  
S0-C3           1             13,493      page-faults               #    0.332 K/sec                  
S0-C3           1      1,502,990,130      cycles                    #    0.037 GHz                    
S0-C3           1      2,186,566,318      instructions              #    1.45  insn per cycle         
S0-C3           1      2,161,968,147      branches                  #   53.160 M/sec                  
S0-C3           1         53,620,791      branch-misses             #    2.48% of all branches        

      40.669709682 seconds time elapsed

================================================================================
================================================================================
Running run_forest_importances_faces test
perf stat -o ../output/run_forest_importances_faces.log --per-core -a taskset -c 0-3 ./run_forest_importances_faces.sh -n 4

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.709s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.727s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.754s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.758s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 03:51:15 2021


 Performance counter stats for 'system wide':

S0-C0           1          22,863.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,563      context-switches          #    0.375 K/sec                  
S0-C0           1                386      cpu-migrations            #    0.017 K/sec                  
S0-C0           1             40,772      page-faults               #    0.002 M/sec                  
S0-C0           1      1,902,620,060      cycles                    #    0.083 GHz                    
S0-C0           1      2,385,137,585      instructions              #    1.25  insn per cycle         
S0-C0           1        735,802,515      branches                  #   32.182 M/sec                  
S0-C0           1        184,948,431      branch-misses             #   25.14% of all branches        
S0-C1           1          22,863.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,013      context-switches          #    0.307 K/sec                  
S0-C1           1                286      cpu-migrations            #    0.013 K/sec                  
S0-C1           1             38,854      page-faults               #    0.002 M/sec                  
S0-C1           1      2,047,125,755      cycles                    #    0.090 GHz                    
S0-C1           1      2,472,565,456      instructions              #    1.21  insn per cycle         
S0-C1           1        747,099,835      branches                  #   32.676 M/sec                  
S0-C1           1        186,090,864      branch-misses             #   24.91% of all branches        
S0-C2           1          22,863.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              6,856      context-switches          #    0.300 K/sec                  
S0-C2           1                254      cpu-migrations            #    0.011 K/sec                  
S0-C2           1             40,261      page-faults               #    0.002 M/sec                  
S0-C2           1      2,049,362,750      cycles                    #    0.090 GHz                    
S0-C2           1      2,451,881,334      instructions              #    1.20  insn per cycle         
S0-C2           1        744,211,918      branches                  #   32.550 M/sec                  
S0-C2           1        186,153,873      branch-misses             #   25.01% of all branches        
S0-C3           1          22,863.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,213      context-switches          #    0.315 K/sec                  
S0-C3           1                207      cpu-migrations            #    0.009 K/sec                  
S0-C3           1             40,200      page-faults               #    0.002 M/sec                  
S0-C3           1      2,007,412,744      cycles                    #    0.088 GHz                    
S0-C3           1      2,444,753,734      instructions              #    1.22  insn per cycle         
S0-C3           1        744,044,332      branches                  #   32.542 M/sec                  
S0-C3           1        185,451,673      branch-misses             #   24.92% of all branches        

      22.864335985 seconds time elapsed

================================================================================
Running run_multioutput_face_completion test
perf stat -o ../output/run_multioutput_face_completion.log --per-core -a taskset -c 0-3 ./run_multioutput_face_completion.sh -n 4

==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.


/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 03:51:38 2021


 Performance counter stats for 'system wide':

S0-C0           1          59,927.44 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             21,855      context-switches          #    0.365 K/sec                  
S0-C0           1                110      cpu-migrations            #    0.002 K/sec                  
S0-C0           1            119,772      page-faults               #    0.002 M/sec                  
S0-C0           1        943,583,701      cycles                    #    0.016 GHz                    
S0-C0           1      3,889,578,368      instructions              #    4.12  insn per cycle         
S0-C0           1      1,569,379,278      branches                  #   26.188 M/sec                  
S0-C0           1        153,507,428      branch-misses             #    9.78% of all branches        
S0-C1           1          59,927.45 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,470      context-switches          #    0.058 K/sec                  
S0-C1           1                125      cpu-migrations            #    0.002 K/sec                  
S0-C1           1            120,148      page-faults               #    0.002 M/sec                  
S0-C1           1      4,233,634,120      cycles                    #    0.071 GHz                    
S0-C1           1      3,771,636,067      instructions              #    0.89  insn per cycle         
S0-C1           1      1,549,887,144      branches                  #   25.863 M/sec                  
S0-C1           1        147,800,525      branch-misses             #    9.54% of all branches        
S0-C2           1          59,927.44 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,839      context-switches          #    0.064 K/sec                  
S0-C2           1                135      cpu-migrations            #    0.002 K/sec                  
S0-C2           1            120,392      page-faults               #    0.002 M/sec                  
S0-C2           1      4,152,789,872      cycles                    #    0.069 GHz                    
S0-C2           1      3,695,097,482      instructions              #    0.89  insn per cycle         
S0-C2           1      1,541,466,388      branches                  #   25.722 M/sec                  
S0-C2           1        148,049,286      branch-misses             #    9.60% of all branches        
S0-C3           1          59,927.45 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,109      context-switches          #    0.085 K/sec                  
S0-C3           1                129      cpu-migrations            #    0.002 K/sec                  
S0-C3           1            120,652      page-faults               #    0.002 M/sec                  
S0-C3           1      4,079,388,021      cycles                    #    0.068 GHz                    
S0-C3           1      3,740,270,883      instructions              #    0.92  insn per cycle         
S0-C3           1      1,547,651,679      branches                  #   25.825 M/sec                  
S0-C3           1        148,315,005      branch-misses             #    9.58% of all branches        

      59.928279356 seconds time elapsed

================================================================================
Running run_logistic_path test
perf stat -o ../output/run_logistic_path.log --per-core -a taskset -c 0-3 ./run_logistic_path.sh -n 4

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 35.669s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 36.181s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 36.311s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 36.912s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 03:52:38 2021


 Performance counter stats for 'system wide':

S0-C0           1          44,643.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,119      context-switches          #    0.182 K/sec                  
S0-C0           1                 61      cpu-migrations            #    0.001 K/sec                  
S0-C0           1             24,336      page-faults               #    0.545 K/sec                  
S0-C0           1      2,733,464,612      cycles                    #    0.061 GHz                    
S0-C0           1      4,132,657,954      instructions              #    1.51  insn per cycle         
S0-C0           1      2,618,569,342      branches                  #   58.655 M/sec                  
S0-C0           1        436,049,065      branch-misses             #   16.65% of all branches        
S0-C1           1          44,643.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,050      context-switches          #    0.068 K/sec                  
S0-C1           1                 70      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             20,354      page-faults               #    0.456 K/sec                  
S0-C1           1      1,483,221,653      cycles                    #    0.033 GHz                    
S0-C1           1      4,060,083,461      instructions              #    2.74  insn per cycle         
S0-C1           1      2,606,022,458      branches                  #   58.373 M/sec                  
S0-C1           1        434,169,824      branch-misses             #   16.66% of all branches        
S0-C2           1          44,643.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,008      context-switches          #    0.067 K/sec                  
S0-C2           1                 62      cpu-migrations            #    0.001 K/sec                  
S0-C2           1             23,926      page-faults               #    0.536 K/sec                  
S0-C2           1      2,088,335,138      cycles                    #    0.047 GHz                    
S0-C2           1      4,128,824,444      instructions              #    1.98  insn per cycle         
S0-C2           1      2,617,132,128      branches                  #   58.622 M/sec                  
S0-C2           1        436,223,643      branch-misses             #   16.67% of all branches        
S0-C3           1          44,643.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,241      context-switches          #    0.073 K/sec                  
S0-C3           1                 65      cpu-migrations            #    0.001 K/sec                  
S0-C3           1             27,464      page-faults               #    0.615 K/sec                  
S0-C3           1      2,081,329,852      cycles                    #    0.047 GHz                    
S0-C3           1            687,476      instructions              #    0.00  insn per cycle         
S0-C3           1      2,641,573,240      branches                  #   59.170 M/sec                  
S0-C3           1        438,817,843      branch-misses             #   16.61% of all branches        

      44.644661251 seconds time elapsed

================================================================================
Running run_plot_svm_nonlinear test
perf stat -o ../output/run_plot_svm_nonlinear.log --per-core -a taskset -c 0-3 ./run_plot_svm_nonlinear.sh -n 4

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 03:53:23 2021


 Performance counter stats for 'system wide':

S0-C0           1          16,276.11 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              2,654      context-switches          #    0.163 K/sec                  
S0-C0           1                 52      cpu-migrations            #    0.003 K/sec                  
S0-C0           1             27,811      page-faults               #    0.002 M/sec                  
S0-C0           1      1,138,393,283      cycles                    #    0.070 GHz                    
S0-C0           1         18,148,164      instructions              #    0.02  insn per cycle         
S0-C0           1        892,760,714      branches                  #   54.851 M/sec                  
S0-C0           1         77,989,603      branch-misses             #    8.74% of all branches        
S0-C1           1          16,276.11 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,503      context-switches          #    0.092 K/sec                  
S0-C1           1                 66      cpu-migrations            #    0.004 K/sec                  
S0-C1           1             30,943      page-faults               #    0.002 M/sec                  
S0-C1           1      1,146,042,024      cycles                    #    0.070 GHz                    
S0-C1           1         53,638,407      instructions              #    0.05  insn per cycle         
S0-C1           1        896,922,938      branches                  #   55.107 M/sec                  
S0-C1           1         79,135,164      branch-misses             #    8.82% of all branches        
S0-C2           1          16,276.11 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,475      context-switches          #    0.091 K/sec                  
S0-C2           1                 81      cpu-migrations            #    0.005 K/sec                  
S0-C2           1             28,012      page-faults               #    0.002 M/sec                  
S0-C2           1        848,964,289      cycles                    #    0.052 GHz                    
S0-C2           1         17,120,521      instructions              #    0.02  insn per cycle         
S0-C2           1        893,074,971      branches                  #   54.870 M/sec                  
S0-C2           1         77,614,587      branch-misses             #    8.69% of all branches        
S0-C3           1          16,276.11 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,540      context-switches          #    0.095 K/sec                  
S0-C3           1                 74      cpu-migrations            #    0.005 K/sec                  
S0-C3           1             27,351      page-faults               #    0.002 M/sec                  
S0-C3           1        860,059,422      cycles                    #    0.053 GHz                    
S0-C3           1         40,356,617      instructions              #    0.05  insn per cycle         
S0-C3           1        896,185,046      branches                  #   55.061 M/sec                  
S0-C3           1         77,523,336      branch-misses             #    8.65% of all branches        

      16.276618503 seconds time elapsed

================================================================================
Running run_plot_theilsen test
perf stat -o ../output/run_plot_theilsen.log --per-core -a taskset -c 0-3 ./run_plot_theilsen.sh -n 4

====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 03:53:39 2021


 Performance counter stats for 'system wide':

S0-C0           1          37,810.33 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,188      context-switches          #    0.164 K/sec                  
S0-C0           1                 72      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             44,069      page-faults               #    0.001 M/sec                  
S0-C0           1        197,419,456      cycles                    #    0.005 GHz                    
S0-C0           1        940,501,908      instructions              #    4.76  insn per cycle         
S0-C0           1      1,122,873,843      branches                  #   29.698 M/sec                  
S0-C0           1        332,256,648      branch-misses             #   29.59% of all branches        
S0-C1           1          37,810.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,345      context-switches          #    0.062 K/sec                  
S0-C1           1                 81      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             44,895      page-faults               #    0.001 M/sec                  
S0-C1           1        199,019,889      cycles                    #    0.005 GHz                    
S0-C1           1        980,591,099      instructions              #    4.93  insn per cycle         
S0-C1           1      1,127,441,356      branches                  #   29.818 M/sec                  
S0-C1           1        329,259,615      branch-misses             #   29.20% of all branches        
S0-C2           1          37,810.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,298      context-switches          #    0.061 K/sec                  
S0-C2           1                 77      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             45,397      page-faults               #    0.001 M/sec                  
S0-C2           1        191,882,729      cycles                    #    0.005 GHz                    
S0-C2           1      1,007,363,667      instructions              #    5.25  insn per cycle         
S0-C2           1      1,129,825,032      branches                  #   29.881 M/sec                  
S0-C2           1        332,757,593      branch-misses             #   29.45% of all branches        
S0-C3           1          37,810.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,331      context-switches          #    0.062 K/sec                  
S0-C3           1                 82      cpu-migrations            #    0.002 K/sec                  
S0-C3           1             44,468      page-faults               #    0.001 M/sec                  
S0-C3           1        300,731,933      cycles                    #    0.008 GHz                    
S0-C3           1      1,032,553,829      instructions              #    3.43  insn per cycle         
S0-C3           1      1,132,532,899      branches                  #   29.953 M/sec                  
S0-C3           1        332,721,984      branch-misses             #   29.38% of all branches        

      37.810857382 seconds time elapsed

================================================================================
================================================================================
perf stat -o 099_go.log --per-core -a taskset -c 0-3 ./spec95_099_go.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 03:54:17 2021


 Performance counter stats for 'system wide':

S0-C0           1          55,734.45 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              4,845      context-switches          #    0.087 K/sec                  
S0-C0           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                262      page-faults               #    0.005 K/sec                  
S0-C0           1      2,395,404,314      cycles                    #    0.043 GHz                    
S0-C0           1      1,354,606,727      instructions              #    0.57  insn per cycle         
S0-C0           1      2,633,204,086      branches                  #   47.246 M/sec                  
S0-C0           1      1,080,871,380      branch-misses             #   41.05% of all branches        
S0-C1           1          55,734.45 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              6,791      context-switches          #    0.122 K/sec                  
S0-C1           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                440      page-faults               #    0.008 K/sec                  
S0-C1           1      2,476,059,438      cycles                    #    0.044 GHz                    
S0-C1           1      1,360,028,890      instructions              #    0.55  insn per cycle         
S0-C1           1      2,633,535,067      branches                  #   47.251 M/sec                  
S0-C1           1      1,081,409,080      branch-misses             #   41.06% of all branches        
S0-C2           1          55,734.45 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,103      context-switches          #    0.038 K/sec                  
S0-C2           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                313      page-faults               #    0.006 K/sec                  
S0-C2           1      1,884,018,138      cycles                    #    0.034 GHz                    
S0-C2           1      1,325,791,954      instructions              #    0.70  insn per cycle         
S0-C2           1      2,629,175,654      branches                  #   47.173 M/sec                  
S0-C2           1      1,079,807,245      branch-misses             #   41.07% of all branches        
S0-C3           1          55,734.45 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,762      context-switches          #    0.050 K/sec                  
S0-C3           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                506      page-faults               #    0.009 K/sec                  
S0-C3           1      2,634,246,732      cycles                    #    0.047 GHz                    
S0-C3           1      1,333,246,216      instructions              #    0.51  insn per cycle         
S0-C3           1      2,630,367,917      branches                  #   47.195 M/sec                  
S0-C3           1      1,080,100,467      branch-misses             #   41.06% of all branches        

      55.734919568 seconds time elapsed

================================================================================
perf stat -o 101_tomcatv.log --per-core -a taskset -c 0-3 ./spec95_101_tomcatv.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 03:55:13 2021


 Performance counter stats for 'system wide':

S0-C0           1          85,510.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,558      context-switches          #    0.088 K/sec                  
S0-C0           1                 34      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              3,985      page-faults               #    0.047 K/sec                  
S0-C0           1      4,235,120,087      cycles                    #    0.050 GHz                    
S0-C0           1      3,231,945,323      instructions              #    0.76  insn per cycle         
S0-C0           1        852,309,559      branches                  #    9.967 M/sec                  
S0-C0           1         31,656,429      branch-misses             #    3.71% of all branches        
S0-C1           1          85,510.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,993      context-switches          #    0.047 K/sec                  
S0-C1           1                 16      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              3,785      page-faults               #    0.044 K/sec                  
S0-C1           1         93,329,632      cycles                    #    0.001 GHz                    
S0-C1           1      3,174,289,896      instructions              #   34.01  insn per cycle         
S0-C1           1        844,270,584      branches                  #    9.873 M/sec                  
S0-C1           1         29,753,454      branch-misses             #    3.52% of all branches        
S0-C2           1          85,510.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             10,080      context-switches          #    0.118 K/sec                  
S0-C2           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              3,876      page-faults               #    0.045 K/sec                  
S0-C2           1        329,673,697      cycles                    #    0.004 GHz                    
S0-C2           1      3,219,419,111      instructions              #    9.77  insn per cycle         
S0-C2           1        850,022,516      branches                  #    9.941 M/sec                  
S0-C2           1         30,903,659      branch-misses             #    3.64% of all branches        
S0-C3           1          85,510.52 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,541      context-switches          #    0.053 K/sec                  
S0-C3           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              3,956      page-faults               #    0.046 K/sec                  
S0-C3           1        179,883,786      cycles                    #    0.002 GHz                    
S0-C3           1      3,185,788,751      instructions              #   17.71  insn per cycle         
S0-C3           1        846,053,237      branches                  #    9.894 M/sec                  
S0-C3           1         30,115,116      branch-misses             #    3.56% of all branches        

      85.511192978 seconds time elapsed

================================================================================
perf stat -o 102_swim.log --per-core -a taskset -c 0-3 ./spec95_102_swim.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 03:56:38 2021


 Performance counter stats for 'system wide':

S0-C0           1          70,515.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             22,231      context-switches          #    0.315 K/sec                  
S0-C0           1                 28      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              3,884      page-faults               #    0.055 K/sec                  
S0-C0           1        670,227,111      cycles                    #    0.010 GHz                    
S0-C0           1      1,958,445,360      instructions              #    2.92  insn per cycle         
S0-C0           1        209,667,465      branches                  #    2.973 M/sec                  
S0-C0           1          9,130,500      branch-misses             #    4.35% of all branches        
S0-C1           1          70,515.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,542      context-switches          #    0.050 K/sec                  
S0-C1           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              3,907      page-faults               #    0.055 K/sec                  
S0-C1           1      4,142,940,327      cycles                    #    0.059 GHz                    
S0-C1           1      1,764,602,891      instructions              #    0.43  insn per cycle         
S0-C1           1        182,938,453      branches                  #    2.594 M/sec                  
S0-C1           1          3,366,274      branch-misses             #    1.84% of all branches        
S0-C2           1          70,515.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,122      context-switches          #    0.044 K/sec                  
S0-C2           1                 33      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              3,878      page-faults               #    0.055 K/sec                  
S0-C2           1      3,950,761,916      cycles                    #    0.056 GHz                    
S0-C2           1      1,761,395,046      instructions              #    0.45  insn per cycle         
S0-C2           1        182,521,744      branches                  #    2.588 M/sec                  
S0-C2           1          3,298,319      branch-misses             #    1.81% of all branches        
S0-C3           1          70,515.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,776      context-switches          #    0.054 K/sec                  
S0-C3           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              3,927      page-faults               #    0.056 K/sec                  
S0-C3           1      3,915,810,083      cycles                    #    0.056 GHz                    
S0-C3           1      1,767,577,354      instructions              #    0.45  insn per cycle         
S0-C3           1        183,643,447      branches                  #    2.604 M/sec                  
S0-C3           1          3,427,504      branch-misses             #    1.87% of all branches        

      70.516093182 seconds time elapsed

================================================================================
perf stat -o 103_su2cor.log --per-core -a taskset -c 0-3 ./spec95_103_su2cor.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 03:57:49 2021


 Performance counter stats for 'system wide':

S0-C0           1         123,673.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             33,409      context-switches          #    0.270 K/sec                  
S0-C0           1                 49      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,256      page-faults               #    0.051 K/sec                  
S0-C0           1      1,396,686,002      cycles                    #    0.011 GHz                    
S0-C0           1        175,452,385      instructions              #    0.13  insn per cycle         
S0-C0           1      1,231,469,275      branches                  #    9.957 M/sec                  
S0-C0           1        115,524,684      branch-misses             #    9.38% of all branches        
S0-C1           1         123,673.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              6,527      context-switches          #    0.053 K/sec                  
S0-C1           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,216      page-faults               #    0.050 K/sec                  
S0-C1           1        404,568,287      cycles                    #    0.003 GHz                    
S0-C1           1      4,230,958,716      instructions              #   10.46  insn per cycle         
S0-C1           1      1,194,863,295      branches                  #    9.661 M/sec                  
S0-C1           1        107,384,753      branch-misses             #    8.99% of all branches        
S0-C2           1         123,673.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,691      context-switches          #    0.038 K/sec                  
S0-C2           1                 31      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,288      page-faults               #    0.051 K/sec                  
S0-C2           1        329,703,072      cycles                    #    0.003 GHz                    
S0-C2           1      4,189,366,844      instructions              #   12.71  insn per cycle         
S0-C2           1      1,192,575,707      branches                  #    9.643 M/sec                  
S0-C2           1        106,876,314      branch-misses             #    8.96% of all branches        
S0-C3           1         123,673.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,287      context-switches          #    0.059 K/sec                  
S0-C3           1                 31      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,161      page-faults               #    0.050 K/sec                  
S0-C3           1        166,697,099      cycles                    #    0.001 GHz                    
S0-C3           1      4,163,963,171      instructions              #   24.98  insn per cycle         
S0-C3           1      1,193,097,203      branches                  #    9.647 M/sec                  
S0-C3           1        107,367,303      branch-misses             #    9.00% of all branches        

     123.674335915 seconds time elapsed

================================================================================
perf stat -o 104_hydro2d.log --per-core -a taskset -c 0-3 ./spec95_104_hydro2d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 03:59:53 2021


 Performance counter stats for 'system wide':

S0-C0           1         107,930.56 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             12,801      context-switches          #    0.119 K/sec                  
S0-C0           1                 24      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,391      page-faults               #    0.022 K/sec                  
S0-C0           1      3,510,855,749      cycles                    #    0.033 GHz                    
S0-C0           1      1,423,000,981      instructions              #    0.41  insn per cycle         
S0-C0           1      2,618,586,266      branches                  #   24.262 M/sec                  
S0-C0           1         22,754,986      branch-misses             #    0.87% of all branches        
S0-C1           1         107,930.56 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,526      context-switches          #    0.051 K/sec                  
S0-C1           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,512      page-faults               #    0.023 K/sec                  
S0-C1           1      3,034,119,664      cycles                    #    0.028 GHz                    
S0-C1           1      1,411,807,730      instructions              #    0.47  insn per cycle         
S0-C1           1      2,611,663,638      branches                  #   24.198 M/sec                  
S0-C1           1         19,704,572      branch-misses             #    0.75% of all branches        
S0-C2           1         107,930.56 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,687      context-switches          #    0.043 K/sec                  
S0-C2           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,578      page-faults               #    0.024 K/sec                  
S0-C2           1      3,029,113,915      cycles                    #    0.028 GHz                    
S0-C2           1      1,406,265,160      instructions              #    0.46  insn per cycle         
S0-C2           1      2,610,933,889      branches                  #   24.191 M/sec                  
S0-C2           1         19,539,251      branch-misses             #    0.75% of all branches        
S0-C3           1         107,930.56 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             11,687      context-switches          #    0.108 K/sec                  
S0-C3           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,344      page-faults               #    0.022 K/sec                  
S0-C3           1      3,708,686,689      cycles                    #    0.034 GHz                    
S0-C3           1      1,546,480,376      instructions              #    0.42  insn per cycle         
S0-C3           1      2,625,280,250      branches                  #   24.324 M/sec                  
S0-C3           1         21,026,702      branch-misses             #    0.80% of all branches        

     107.931677943 seconds time elapsed

================================================================================
perf stat -o 107_mgrid.log --per-core -a taskset -c 0-3 ./spec95_107_mgrid.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:01:41 2021


 Performance counter stats for 'system wide':

S0-C0           1         113,148.26 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             15,888      context-switches          #    0.140 K/sec                  
S0-C0           1                 78      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              2,048      page-faults               #    0.018 K/sec                  
S0-C0           1      1,893,428,988      cycles                    #    0.017 GHz                    
S0-C0           1        331,301,648      instructions              #    0.17  insn per cycle         
S0-C0           1        736,689,043      branches                  #    6.511 M/sec                  
S0-C0           1         39,804,450      branch-misses             #    5.40% of all branches        
S0-C1           1         113,148.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,309      context-switches          #    0.047 K/sec                  
S0-C1           1                 51      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,193      page-faults               #    0.019 K/sec                  
S0-C1           1      1,238,104,697      cycles                    #    0.011 GHz                    
S0-C1           1        175,603,009      instructions              #    0.14  insn per cycle         
S0-C1           1        714,453,572      branches                  #    6.314 M/sec                  
S0-C1           1         34,886,244      branch-misses             #    4.88% of all branches        
S0-C2           1         113,148.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,572      context-switches          #    0.049 K/sec                  
S0-C2           1                 40      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,270      page-faults               #    0.020 K/sec                  
S0-C2           1      1,290,140,394      cycles                    #    0.011 GHz                    
S0-C2           1        178,625,201      instructions              #    0.14  insn per cycle         
S0-C2           1        714,877,323      branches                  #    6.318 M/sec                  
S0-C2           1         34,987,107      branch-misses             #    4.89% of all branches        
S0-C3           1         113,148.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             16,709      context-switches          #    0.148 K/sec                  
S0-C3           1                 53      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,145      page-faults               #    0.019 K/sec                  
S0-C3           1      1,694,047,208      cycles                    #    0.015 GHz                    
S0-C3           1        260,360,337      instructions              #    0.15  insn per cycle         
S0-C3           1        726,032,486      branches                  #    6.417 M/sec                  
S0-C3           1         37,464,563      branch-misses             #    5.16% of all branches        

     113.149457834 seconds time elapsed

================================================================================
perf stat -o 110_applu.log --per-core -a taskset -c 0-3 ./spec95_110_applu.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:03:35 2021


 Performance counter stats for 'system wide':

S0-C0           1          92,605.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,948      context-switches          #    0.086 K/sec                  
S0-C0           1                 20      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              7,668      page-faults               #    0.083 K/sec                  
S0-C0           1      3,726,674,526      cycles                    #    0.040 GHz                    
S0-C0           1        440,659,854      instructions              #    0.12  insn per cycle         
S0-C0           1        351,877,650      branches                  #    3.800 M/sec                  
S0-C0           1         19,489,531      branch-misses             #    5.54% of all branches        
S0-C1           1          92,605.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              9,742      context-switches          #    0.105 K/sec                  
S0-C1           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              7,567      page-faults               #    0.082 K/sec                  
S0-C1           1      3,726,507,463      cycles                    #    0.040 GHz                    
S0-C1           1        434,457,544      instructions              #    0.12  insn per cycle         
S0-C1           1        350,530,829      branches                  #    3.785 M/sec                  
S0-C1           1         19,038,578      branch-misses             #    5.43% of all branches        
S0-C2           1          92,605.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,149      context-switches          #    0.045 K/sec                  
S0-C2           1                 16      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              7,705      page-faults               #    0.083 K/sec                  
S0-C2           1      3,715,130,567      cycles                    #    0.040 GHz                    
S0-C2           1        394,839,484      instructions              #    0.11  insn per cycle         
S0-C2           1        345,453,291      branches                  #    3.730 M/sec                  
S0-C2           1         17,937,512      branch-misses             #    5.19% of all branches        
S0-C3           1          92,605.16 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,856      context-switches          #    0.052 K/sec                  
S0-C3           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              7,722      page-faults               #    0.083 K/sec                  
S0-C3           1      3,724,511,122      cycles                    #    0.040 GHz                    
S0-C3           1        405,618,373      instructions              #    0.11  insn per cycle         
S0-C3           1        347,239,368      branches                  #    3.750 M/sec                  
S0-C3           1         18,188,836      branch-misses             #    5.24% of all branches        

      92.606263436 seconds time elapsed

================================================================================
perf stat -o 125_turb3d.log --per-core -a taskset -c 0-3 ./spec95_125_turb3d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:05:07 2021


 Performance counter stats for 'system wide':

S0-C0           1         122,384.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             11,537      context-switches          #    0.094 K/sec                  
S0-C0           1                 17      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,656      page-faults               #    0.054 K/sec                  
S0-C0           1      3,417,334,570      cycles                    #    0.028 GHz                    
S0-C0           1      1,905,315,433      instructions              #    0.56  insn per cycle         
S0-C0           1      3,577,663,461      branches                  #   29.233 M/sec                  
S0-C0           1        292,874,366      branch-misses             #    8.19% of all branches        
S0-C1           1         122,384.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,109      context-switches          #    0.034 K/sec                  
S0-C1           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,710      page-faults               #    0.055 K/sec                  
S0-C1           1      2,890,820,604      cycles                    #    0.024 GHz                    
S0-C1           1      1,835,440,035      instructions              #    0.63  insn per cycle         
S0-C1           1      3,567,889,511      branches                  #   29.153 M/sec                  
S0-C1           1        288,056,200      branch-misses             #    8.07% of all branches        
S0-C2           1         122,384.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,917      context-switches          #    0.032 K/sec                  
S0-C2           1                 14      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,682      page-faults               #    0.055 K/sec                  
S0-C2           1      2,990,392,075      cycles                    #    0.024 GHz                    
S0-C2           1      1,834,225,658      instructions              #    0.61  insn per cycle         
S0-C2           1      3,567,681,444      branches                  #   29.151 M/sec                  
S0-C2           1        287,929,547      branch-misses             #    8.07% of all branches        
S0-C3           1         122,384.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             15,275      context-switches          #    0.125 K/sec                  
S0-C3           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,546      page-faults               #    0.053 K/sec                  
S0-C3           1      3,263,981,772      cycles                    #    0.027 GHz                    
S0-C3           1      1,911,593,006      instructions              #    0.59  insn per cycle         
S0-C3           1      3,578,367,387      branches                  #   29.239 M/sec                  
S0-C3           1        290,812,096      branch-misses             #    8.13% of all branches        

     122.385715004 seconds time elapsed

================================================================================
perf stat -o 126_gcc.log --per-core -a taskset -c 0-3 ./spec95_126_gcc.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:07:10 2021


 Performance counter stats for 'system wide':

S0-C0           1           9,387.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,020      context-switches          #    0.109 K/sec                  
S0-C0           1                 28      cpu-migrations            #    0.003 K/sec                  
S0-C0           1              4,192      page-faults               #    0.447 K/sec                  
S0-C0           1      3,540,098,344      cycles                    #    0.377 GHz                    
S0-C0           1      3,338,909,976      instructions              #    0.94  insn per cycle         
S0-C0           1        457,519,933      branches                  #   48.738 M/sec                  
S0-C0           1        117,064,308      branch-misses             #   25.59% of all branches        
S0-C1           1           9,387.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                966      context-switches          #    0.103 K/sec                  
S0-C1           1                 17      cpu-migrations            #    0.002 K/sec                  
S0-C1           1              5,214      page-faults               #    0.555 K/sec                  
S0-C1           1        136,145,212      cycles                    #    0.015 GHz                    
S0-C1           1      3,700,717,132      instructions              #   27.18  insn per cycle         
S0-C1           1        506,431,720      branches                  #   53.949 M/sec                  
S0-C1           1        130,834,081      branch-misses             #   25.83% of all branches        
S0-C2           1           9,387.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                768      context-switches          #    0.082 K/sec                  
S0-C2           1                 25      cpu-migrations            #    0.003 K/sec                  
S0-C2           1              4,156      page-faults               #    0.443 K/sec                  
S0-C2           1      2,735,316,224      cycles                    #    0.291 GHz                    
S0-C2           1      2,942,619,813      instructions              #    1.08  insn per cycle         
S0-C2           1        402,405,203      branches                  #   42.867 M/sec                  
S0-C2           1        101,768,533      branch-misses             #   25.29% of all branches        
S0-C3           1           9,387.29 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                729      context-switches          #    0.078 K/sec                  
S0-C3           1                 16      cpu-migrations            #    0.002 K/sec                  
S0-C3           1              4,459      page-faults               #    0.475 K/sec                  
S0-C3           1      3,620,227,653      cycles                    #    0.386 GHz                    
S0-C3           1      3,360,137,021      instructions              #    0.93  insn per cycle         
S0-C3           1        461,378,277      branches                  #   49.149 M/sec                  
S0-C3           1        118,533,787      branch-misses             #   25.69% of all branches        

       9.387688393 seconds time elapsed

================================================================================
perf stat -o 129_compress.log --per-core -a taskset -c 0-3 ./spec95_129_compress.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:07:20 2021


 Performance counter stats for 'system wide':

S0-C0           1         182,634.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             29,653      context-switches          #    0.162 K/sec                  
S0-C0           1                 53      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              9,163      page-faults               #    0.050 K/sec                  
S0-C0           1        814,845,797      cycles                    #    0.004 GHz                    
S0-C0           1      1,406,866,877      instructions              #    1.73  insn per cycle         
S0-C0           1      3,691,208,960      branches                  #   20.211 M/sec                  
S0-C0           1        619,906,313      branch-misses             #   16.79% of all branches        
S0-C1           1         182,634.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1             21,841      context-switches          #    0.120 K/sec                  
S0-C1           1                 24      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              9,288      page-faults               #    0.051 K/sec                  
S0-C1           1        113,193,280      cycles                    #    0.001 GHz                    
S0-C1           1      1,266,420,658      instructions              #   11.19  insn per cycle         
S0-C1           1      3,670,596,735      branches                  #   20.098 M/sec                  
S0-C1           1        615,438,511      branch-misses             #   16.77% of all branches        
S0-C2           1         182,634.21 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              8,128      context-switches          #    0.045 K/sec                  
S0-C2           1                 36      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,163      page-faults               #    0.050 K/sec                  
S0-C2           1      3,296,290,132      cycles                    #    0.018 GHz                    
S0-C2           1      1,173,668,372      instructions              #    0.36  insn per cycle         
S0-C2           1      3,658,628,109      branches                  #   20.033 M/sec                  
S0-C2           1        612,663,765      branch-misses             #   16.75% of all branches        
S0-C3           1         182,634.20 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              8,412      context-switches          #    0.046 K/sec                  
S0-C3           1                 29      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,298      page-faults               #    0.051 K/sec                  
S0-C3           1        256,249,971      cycles                    #    0.001 GHz                    
S0-C3           1      1,186,353,149      instructions              #    4.63  insn per cycle         
S0-C3           1      3,661,116,029      branches                  #   20.046 M/sec                  
S0-C3           1        612,961,381      branch-misses             #   16.74% of all branches        

     182.635873808 seconds time elapsed

================================================================================
perf stat -o 130_li.log --per-core -a taskset -c 0-3 ./spec95_130_li.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:10:23 2021


 Performance counter stats for 'system wide':

S0-C0           1         100,342.24 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             16,345      context-switches          #    0.163 K/sec                  
S0-C0           1                 38      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                365      page-faults               #    0.004 K/sec                  
S0-C0           1      2,767,538,171      cycles                    #    0.028 GHz                    
S0-C0           1      1,084,855,570      instructions              #    0.39  insn per cycle         
S0-C0           1      1,835,724,000      branches                  #   18.295 M/sec                  
S0-C0           1      1,044,280,002      branch-misses             #   56.89% of all branches        
S0-C1           1         100,342.24 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,750      context-switches          #    0.047 K/sec                  
S0-C1           1                 27      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                489      page-faults               #    0.005 K/sec                  
S0-C1           1      2,639,411,508      cycles                    #    0.026 GHz                    
S0-C1           1        987,792,439      instructions              #    0.37  insn per cycle         
S0-C1           1      1,822,702,842      branches                  #   18.165 M/sec                  
S0-C1           1      1,040,206,622      branch-misses             #   57.07% of all branches        
S0-C2           1         100,342.24 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,480      context-switches          #    0.035 K/sec                  
S0-C2           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                328      page-faults               #    0.003 K/sec                  
S0-C2           1      2,636,837,299      cycles                    #    0.026 GHz                    
S0-C2           1        980,739,606      instructions              #    0.37  insn per cycle         
S0-C2           1      1,821,741,967      branches                  #   18.155 M/sec                  
S0-C2           1      1,039,794,356      branch-misses             #   57.08% of all branches        
S0-C3           1         100,342.25 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,970      context-switches          #    0.050 K/sec                  
S0-C3           1                 26      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                479      page-faults               #    0.005 K/sec                  
S0-C3           1      2,624,716,252      cycles                    #    0.026 GHz                    
S0-C3           1        993,184,170      instructions              #    0.38  insn per cycle         
S0-C3           1      1,823,800,299      branches                  #   18.176 M/sec                  
S0-C3           1      1,040,471,702      branch-misses             #   57.05% of all branches        

     100.343373648 seconds time elapsed

================================================================================
perf stat -o 132_ijpeg.log --per-core -a taskset -c 0-3 ./spec95_132_ijpeg.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:12:04 2021


 Performance counter stats for 'system wide':

S0-C0           1          26,876.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,328      context-switches          #    0.235 K/sec                  
S0-C0           1                 30      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              2,368      page-faults               #    0.088 K/sec                  
S0-C0           1      1,755,726,689      cycles                    #    0.065 GHz                    
S0-C0           1      3,743,550,702      instructions              #    2.13  insn per cycle         
S0-C0           1      1,068,789,129      branches                  #   39.766 M/sec                  
S0-C0           1        189,663,350      branch-misses             #   17.75% of all branches        
S0-C1           1          26,876.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,655      context-switches          #    0.062 K/sec                  
S0-C1           1                 14      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              2,766      page-faults               #    0.103 K/sec                  
S0-C1           1      2,736,938,288      cycles                    #    0.102 GHz                    
S0-C1           1        245,527,112      instructions              #    0.09  insn per cycle         
S0-C1           1      1,116,074,390      branches                  #   41.526 M/sec                  
S0-C1           1        202,087,412      branch-misses             #   18.11% of all branches        
S0-C2           1          26,876.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,062      context-switches          #    0.040 K/sec                  
S0-C2           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              3,158      page-faults               #    0.117 K/sec                  
S0-C2           1      2,815,078,647      cycles                    #    0.105 GHz                    
S0-C2           1        297,963,027      instructions              #    0.11  insn per cycle         
S0-C2           1      1,125,081,746      branches                  #   41.861 M/sec                  
S0-C2           1        201,927,166      branch-misses             #   17.95% of all branches        
S0-C3           1          26,876.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,824      context-switches          #    0.291 K/sec                  
S0-C3           1                 30      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              2,452      page-faults               #    0.091 K/sec                  
S0-C3           1      3,512,249,996      cycles                    #    0.131 GHz                    
S0-C3           1      1,855,777,583      instructions              #    0.53  insn per cycle         
S0-C3           1        969,811,247      branches                  #   36.084 M/sec                  
S0-C3           1        165,855,122      branch-misses             #   17.10% of all branches        

      26.877208276 seconds time elapsed

================================================================================
perf stat -o 134_perl.log --per-core -a taskset -c 0-3 ./spec95_134_perl.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:12:31 2021


 Performance counter stats for 'system wide':

S0-C0           1          35,578.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             12,270      context-switches          #    0.345 K/sec                  
S0-C0           1                 31      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              9,303      page-faults               #    0.261 K/sec                  
S0-C0           1        494,270,919      cycles                    #    0.014 GHz                    
S0-C0           1        900,162,553      instructions              #    1.82  insn per cycle         
S0-C0           1      2,740,253,764      branches                  #   77.020 M/sec                  
S0-C0           1        481,028,282      branch-misses             #   17.55% of all branches        
S0-C1           1          35,578.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,881      context-switches          #    0.165 K/sec                  
S0-C1           1                 29      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              9,377      page-faults               #    0.264 K/sec                  
S0-C1           1        309,448,891      cycles                    #    0.009 GHz                    
S0-C1           1        826,826,674      instructions              #    2.67  insn per cycle         
S0-C1           1      2,729,603,047      branches                  #   76.721 M/sec                  
S0-C1           1        478,422,250      branch-misses             #   17.53% of all branches        
S0-C2           1          35,578.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,347      context-switches          #    0.038 K/sec                  
S0-C2           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,165      page-faults               #    0.258 K/sec                  
S0-C2           1        648,220,746      cycles                    #    0.018 GHz                    
S0-C2           1        795,081,376      instructions              #    1.23  insn per cycle         
S0-C2           1      2,725,524,216      branches                  #   76.606 M/sec                  
S0-C2           1        477,208,996      branch-misses             #   17.51% of all branches        
S0-C3           1          35,578.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,190      context-switches          #    0.062 K/sec                  
S0-C3           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,262      page-faults               #    0.260 K/sec                  
S0-C3           1        430,616,825      cycles                    #    0.012 GHz                    
S0-C3           1        802,137,697      instructions              #    1.86  insn per cycle         
S0-C3           1      2,726,606,111      branches                  #   76.637 M/sec                  
S0-C3           1        491,768,767      branch-misses             #   18.04% of all branches        

      35.579035042 seconds time elapsed

================================================================================
perf stat -o 141_apsi.log --per-core -a taskset -c 0-3 ./spec95_141_apsi.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:13:07 2021


 Performance counter stats for 'system wide':

S0-C0           1          77,855.72 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,189      context-switches          #    0.092 K/sec                  
S0-C0           1                 37      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              1,100      page-faults               #    0.014 K/sec                  
S0-C0           1      3,045,375,272      cycles                    #    0.039 GHz                    
S0-C0           1      2,107,078,815      instructions              #    0.69  insn per cycle         
S0-C0           1        873,795,512      branches                  #   11.223 M/sec                  
S0-C0           1         40,645,558      branch-misses             #    4.65% of all branches        
S0-C1           1          77,855.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,852      context-switches          #    0.062 K/sec                  
S0-C1           1                 30      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              1,039      page-faults               #    0.013 K/sec                  
S0-C1           1      3,142,900,658      cycles                    #    0.040 GHz                    
S0-C1           1      2,070,847,030      instructions              #    0.66  insn per cycle         
S0-C1           1        868,681,105      branches                  #   11.158 M/sec                  
S0-C1           1         39,239,118      branch-misses             #    4.52% of all branches        
S0-C2           1          77,855.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,961      context-switches          #    0.064 K/sec                  
S0-C2           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              1,097      page-faults               #    0.014 K/sec                  
S0-C2           1      3,213,874,132      cycles                    #    0.041 GHz                    
S0-C2           1      2,089,011,244      instructions              #    0.65  insn per cycle         
S0-C2           1        870,809,318      branches                  #   11.185 M/sec                  
S0-C2           1         39,614,265      branch-misses             #    4.55% of all branches        
S0-C3           1          77,855.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,560      context-switches          #    0.071 K/sec                  
S0-C3           1                 33      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                933      page-faults               #    0.012 K/sec                  
S0-C3           1      2,201,844,114      cycles                    #    0.028 GHz                    
S0-C3           1      2,078,489,830      instructions              #    0.94  insn per cycle         
S0-C3           1        870,036,204      branches                  #   11.175 M/sec                  
S0-C3           1         39,505,190      branch-misses             #    4.54% of all branches        

      77.856694522 seconds time elapsed

================================================================================
perf stat -o 145_fpppp.log --per-core -a taskset -c 0-3 ./spec95_145_fpppp.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:14:25 2021


 Performance counter stats for 'system wide':

S0-C0           1         183,939.16 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             11,873      context-switches          #    0.065 K/sec                  
S0-C0           1                 34      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                436      page-faults               #    0.002 K/sec                  
S0-C0           1      3,815,340,129      cycles                    #    0.021 GHz                    
S0-C0           1      3,774,251,727      instructions              #    0.99  insn per cycle         
S0-C0           1      1,277,528,708      branches                  #    6.945 M/sec                  
S0-C0           1        123,769,895      branch-misses             #    9.69% of all branches        
S0-C1           1         183,939.16 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1             11,692      context-switches          #    0.064 K/sec                  
S0-C1           1                 23      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                478      page-faults               #    0.003 K/sec                  
S0-C1           1        465,246,125      cycles                    #    0.003 GHz                    
S0-C1           1      3,710,881,181      instructions              #    7.98  insn per cycle         
S0-C1           1      1,268,673,175      branches                  #    6.897 M/sec                  
S0-C1           1        121,918,251      branch-misses             #    9.61% of all branches        
S0-C2           1         183,939.16 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             18,573      context-switches          #    0.101 K/sec                  
S0-C2           1                 14      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                292      page-faults               #    0.002 K/sec                  
S0-C2           1        111,033,272      cycles                    #    0.001 GHz                    
S0-C2           1      3,774,918,062      instructions              #   34.00  insn per cycle         
S0-C2           1      1,276,750,286      branches                  #    6.941 M/sec                  
S0-C2           1        124,237,441      branch-misses             #    9.73% of all branches        
S0-C3           1         183,939.15 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             11,358      context-switches          #    0.062 K/sec                  
S0-C3           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                632      page-faults               #    0.003 K/sec                  
S0-C3           1        507,451,537      cycles                    #    0.003 GHz                    
S0-C3           1      3,728,297,992      instructions              #    7.35  insn per cycle         
S0-C3           1      1,271,693,808      branches                  #    6.914 M/sec                  
S0-C3           1        122,319,725      branch-misses             #    9.62% of all branches        

     183.940978040 seconds time elapsed

================================================================================
perf stat -o 146_wave5.log --per-core -a taskset -c 0-3 ./spec95_146_wave5.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:17:29 2021


 Performance counter stats for 'system wide':

S0-C0           1          81,056.18 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             15,503      context-switches          #    0.191 K/sec                  
S0-C0           1                 52      cpu-migrations            #    0.001 K/sec                  
S0-C0           1             10,566      page-faults               #    0.130 K/sec                  
S0-C0           1      4,120,372,885      cycles                    #    0.051 GHz                    
S0-C0           1      2,686,457,816      instructions              #    0.65  insn per cycle         
S0-C0           1      1,344,638,578      branches                  #   16.589 M/sec                  
S0-C0           1         20,618,125      branch-misses             #    1.53% of all branches        
S0-C1           1          81,056.18 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,942      context-switches          #    0.061 K/sec                  
S0-C1           1                 45      cpu-migrations            #    0.001 K/sec                  
S0-C1           1             10,629      page-faults               #    0.131 K/sec                  
S0-C1           1      3,624,984,280      cycles                    #    0.045 GHz                    
S0-C1           1      2,539,447,953      instructions              #    0.70  insn per cycle         
S0-C1           1      1,323,883,501      branches                  #   16.333 M/sec                  
S0-C1           1         16,341,884      branch-misses             #    1.23% of all branches        
S0-C2           1          81,056.19 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              9,205      context-switches          #    0.114 K/sec                  
S0-C2           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C2           1             10,529      page-faults               #    0.130 K/sec                  
S0-C2           1      2,752,185,293      cycles                    #    0.034 GHz                    
S0-C2           1      2,570,587,212      instructions              #    0.93  insn per cycle         
S0-C2           1      1,327,864,067      branches                  #   16.382 M/sec                  
S0-C2           1         17,411,637      branch-misses             #    1.31% of all branches        
S0-C3           1          81,056.18 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,217      context-switches          #    0.052 K/sec                  
S0-C3           1                 24      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             10,656      page-faults               #    0.131 K/sec                  
S0-C3           1      3,932,888,005      cycles                    #    0.049 GHz                    
S0-C3           1      2,542,798,109      instructions              #    0.65  insn per cycle         
S0-C3           1      1,324,655,760      branches                  #   16.342 M/sec                  
S0-C3           1         16,394,638      branch-misses             #    1.24% of all branches        

      81.057170023 seconds time elapsed

================================================================================
perf stat -o 147_vortex.log --per-core -a taskset -c 0-3 ./spec95_147_vortex.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 04:18:50 2021


 Performance counter stats for 'system wide':

S0-C0           1         109,800.54 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              9,967      context-switches          #    0.091 K/sec                  
S0-C0           1                 89      cpu-migrations            #    0.001 K/sec                  
S0-C0           1             11,892      page-faults               #    0.108 K/sec                  
S0-C0           1      4,247,602,762      cycles                    #    0.039 GHz                    
S0-C0           1      3,488,376,242      instructions              #    0.82  insn per cycle         
S0-C0           1      1,549,249,310      branches                  #   14.110 M/sec                  
S0-C0           1        391,609,246      branch-misses             #   25.28% of all branches        
S0-C1           1         109,800.54 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1             12,540      context-switches          #    0.114 K/sec                  
S0-C1           1                 62      cpu-migrations            #    0.001 K/sec                  
S0-C1           1             12,013      page-faults               #    0.109 K/sec                  
S0-C1           1      1,486,110,756      cycles                    #    0.014 GHz                    
S0-C1           1      3,481,338,408      instructions              #    2.34  insn per cycle         
S0-C1           1      1,547,706,687      branches                  #   14.096 M/sec                  
S0-C1           1        391,884,988      branch-misses             #   25.32% of all branches        
S0-C2           1         109,800.54 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,662      context-switches          #    0.042 K/sec                  
S0-C2           1                 55      cpu-migrations            #    0.001 K/sec                  
S0-C2           1             11,870      page-faults               #    0.108 K/sec                  
S0-C2           1        752,515,360      cycles                    #    0.007 GHz                    
S0-C2           1      3,426,503,037      instructions              #    4.55  insn per cycle         
S0-C2           1      1,540,541,502      branches                  #   14.030 M/sec                  
S0-C2           1        389,228,628      branch-misses             #   25.27% of all branches        
S0-C3           1         109,800.54 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              6,194      context-switches          #    0.056 K/sec                  
S0-C3           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             12,110      page-faults               #    0.110 K/sec                  
S0-C3           1      1,079,757,841      cycles                    #    0.010 GHz                    
S0-C3           1      3,440,337,641      instructions              #    3.19  insn per cycle         
S0-C3           1      1,542,965,703      branches                  #   14.052 M/sec                  
S0-C3           1        385,963,120      branch-misses             #   25.01% of all branches        

     109.801739384 seconds time elapsed

================================================================================
perf stat -o aes_benchmark.log --per-core -a taskset -c 0-3 ./aes_benchmark 4
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
# started on Wed Mar  3 04:20:40 2021


 Performance counter stats for 'system wide':

S0-C0           1           7,416.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,048      context-switches          #    0.141 K/sec                  
S0-C0           1                  5      cpu-migrations            #    0.001 K/sec                  
S0-C0           1                438      page-faults               #    0.059 K/sec                  
S0-C0           1      4,088,042,371      cycles                    #    0.551 GHz                    
S0-C0           1      3,441,940,833      instructions              #    0.84  insn per cycle         
S0-C0           1        178,764,098      branches                  #   24.103 M/sec                  
S0-C0           1          3,227,271      branch-misses             #    1.81% of all branches        
S0-C1           1           7,416.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                399      context-switches          #    0.054 K/sec                  
S0-C1           1                  7      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                445      page-faults               #    0.060 K/sec                  
S0-C1           1      4,064,665,412      cycles                    #    0.548 GHz                    
S0-C1           1      3,434,919,469      instructions              #    0.85  insn per cycle         
S0-C1           1        177,851,241      branches                  #   23.980 M/sec                  
S0-C1           1          2,998,262      branch-misses             #    1.69% of all branches        
S0-C2           1           7,416.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                484      context-switches          #    0.065 K/sec                  
S0-C2           1                  6      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                390      page-faults               #    0.053 K/sec                  
S0-C2           1      4,064,467,797      cycles                    #    0.548 GHz                    
S0-C2           1      3,434,926,191      instructions              #    0.85  insn per cycle         
S0-C2           1        177,866,682      branches                  #   23.982 M/sec                  
S0-C2           1          2,996,090      branch-misses             #    1.68% of all branches        
S0-C3           1           7,416.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                529      context-switches          #    0.071 K/sec                  
S0-C3           1                  3      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                388      page-faults               #    0.052 K/sec                  
S0-C3           1      4,065,023,005      cycles                    #    0.548 GHz                    
S0-C3           1      3,435,118,821      instructions              #    0.85  insn per cycle         
S0-C3           1        177,913,372      branches                  #   23.988 M/sec                  
S0-C3           1          3,013,453      branch-misses             #    1.69% of all branches        

       7.417067451 seconds time elapsed

================================================================================
This benchmark has been compiled to use 16 threads. You have to repcompile it if you want to use different number of threads. See ../install/setup.sh for details.
================================================================================
================================================================================
Printing results
File: NaiveBayes_perf_output_1614743425544673119.txt
instructions: 24221246
=(5085084+2895050+5025342+11215770)
frequencies: 0.359
=(0.325+0.174+0.299+0.637)/4
ipcs:0.31
=1*(0.29+0.31+0.31+0.33)/4

File: md5_perf_output_1614743425867091433.txt
instructions: 5901453
=(669918+189119+752503+4289913)
frequencies: 0.381
=(0.202+0.089+0.208+1.024)/4
ipcs:0.26
=1*(0.26+0.17+0.28+0.33)/4

File: grep_perf_output_1614743425350342969.txt
instructions: 6738937
=(2208598+3559709+770349+200281)
frequencies: 0.404
=(0.606+0.767+0.168+0.076)/4
ipcs:0.28
=1*(0.26+0.33+0.32+0.19)/4

File: kmeans_perf_output_1614743425773886125.txt
instructions: 6155527
=(821984+786291+788603+3758649)
frequencies: 0.408
=(0.245+0.231+0.218+0.937)/4
ipcs:0.29
=1*(0.26+0.27+0.29+0.32)/4

File: sqlite_4_threads.txt
instructions: 2436200439
=(625130035+598361937+600751637+611956830)
frequencies: 0.180
=(0.193+0.174+0.176+0.178)/4
ipcs:0.41
=1*(0.40+0.42+0.42+0.42)/4

File: word2vec_perf_output_no_branch_1614743222987951735.txt
instructions: 11769241377
=(3559064783+3222095054+2539380076+2448701464)
frequencies: 0.020
=(0.012+0.009+0.031+0.030)/4
ipcs:1.87
=1*(2.62+3.33+0.76+0.76)/4

File: wordcounts_perf_output_1614743425680058657.txt
instructions: 5858987
=(742804+683765+147277+4285141)
frequencies: 0.393
=(0.261+0.178+0.063+1.068)/4
ipcs:0.26
=1*(0.23+0.31+0.19+0.32)/4

File: go_word2vec_4_threads.txt
instructions: 7737105148
=(1980019979+296387156+3274131695+2186566318)
frequencies: 0.044
=(0.029+0.077+0.031+0.037)/4
ipcs:1.44
=1*(1.67+0.09+2.56+1.45)/4

File: word2vec_perf_output_1614743222983589991.txt
instructions: 10405318638
=(2247928633+2121606683+3918389028+2117394294)
frequencies: 0.026
=(0.032+0.023+0.022+0.025)/4
ipcs:1.15
=1*(0.76+0.99+1.92+0.94)/4

File: lda_perf_output_1614743425450872190.txt
instructions: 5968799
=(675968+668143+342450+4282238)
frequencies: 0.398
=(0.209+0.163+0.153+1.066)/4
ipcs:0.27
=1*(0.26+0.33+0.18+0.32)/4

File: sort_perf_output_1614743425961140365.txt
instructions: 6023511
=(1250308+3408455+686626+678122)
frequencies: 0.370
=(0.383+0.764+0.155+0.177)/4
ipcs:0.31
=1*(0.25+0.34+0.34+0.29)/4

================================================================================
Finished running benchmarks
================================================================================
