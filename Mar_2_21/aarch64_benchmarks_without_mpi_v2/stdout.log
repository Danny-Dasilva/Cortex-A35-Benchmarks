Architecture:        aarch64
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A35
Stepping:            r0p1
CPU max MHz:         1300.0000
CPU min MHz:         598.0000
BogoMIPS:            26.00
Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
================================================================================
/home/mendel/sd_card/i-benchmarks/word2vec/bin
perf stat -o ../data/word2vec_perf_output_1614768173215379749.txt --per-core -a taskset -c 0-3 ./word2vec -train ../data/text8_1.7mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_1.7mb
100K200KVocab size: 5847
Words in train file: 252418
Alpha: 0.050000  Progress: 0.28%  Words/thread/sec: 3.51k  Alpha: 0.049862  Progress: 0.58%  Words/thread/sec: 5.85k  Alpha: 0.049711  Progress: 0.88%  Words/thread/sec: 8.94k  Alpha: 0.049558  Progress: 1.19%  Words/thread/sec: 11.95k  Alpha: 0.049407  Progress: 1.45%  Words/thread/sec: 8.12k  Alpha: 0.049275  Progress: 1.72%  Words/thread/sec: 8.68k  Alpha: 0.049275  Progress: 1.98%  Words/thread/sec: 10.01k  Alpha: 0.049008  Progress: 2.30%  Words/thread/sec: 10.58k  Alpha: 0.048852  Progress: 2.56%  Words/thread/sec: 8.64k  Alpha: 0.048718  Progress: 2.84%  Words/thread/sec: 9.55k  Alpha: 0.048581  Progress: 3.16%  Words/thread/sec: 10.61k  Alpha: 0.048421  Progress: 3.43%  Words/thread/sec: 10.87k  Alpha: 0.048284  Progress: 3.70%  Words/thread/sec: 9.35k  Alpha: 0.048148  Progress: 3.97%  Words/thread/sec: 9.56k  Alpha: 0.048015  Progress: 4.29%  Words/thread/sec: 10.32k  Alpha: 0.047855  Progress: 4.60%  Words/thread/sec: 11.04k  Alpha: 0.047701  Progress: 4.87%  Words/thread/sec: 9.45k  Alpha: 0.047701  Progress: 5.17%  Words/thread/sec: 10.04k  Alpha: 0.047413  Progress: 5.49%  Words/thread/sec: 10.29k  Alpha: 0.047253  Progress: 5.81%  Words/thread/sec: 10.86k  Alpha: 0.047096  Progress: 6.99%  Words/thread/sec: 10.10k  Alpha: 0.046504  Progress: 7.30%  Words/thread/sec: 10.24k  Alpha: 0.046350  Progress: 7.60%  Words/thread/sec: 10.65k  Alpha: 0.046199  Progress: 7.90%  Words/thread/sec: 11.06k  Alpha: 0.046049  Progress: 8.17%  Words/thread/sec: 10.34k  Alpha: 0.045915  Progress: 8.44%  Words/thread/sec: 10.38k  Alpha: 0.045782  Progress: 8.70%  Words/thread/sec: 10.70k  Alpha: 0.045649  Progress: 9.02%  Words/thread/sec: 10.85k  Alpha: 0.045492  Progress: 9.28%  Words/thread/sec: 10.43k  Alpha: 0.045359  Progress: 9.56%  Words/thread/sec: 10.48k  Alpha: 0.045359  Progress: 9.82%  Words/thread/sec: 10.77k  Alpha: 0.045089  Progress: 10.09%  Words/thread/sec: 10.85k  Alpha: 0.044953  Progress: 10.37%  Words/thread/sec: 10.48k  Alpha: 0.044816  Progress: 10.64%  Words/thread/sec: 10.33k  Alpha: 0.044682  Progress: 10.95%  Words/thread/sec: 10.63k  Alpha: 0.044527  Progress: 11.27%  Words/thread/sec: 10.93k  Alpha: 0.044367  Progress: 11.57%  Words/thread/sec: 10.44k  Alpha: 0.044213  Progress: 11.85%  Words/thread/sec: 10.50k  Alpha: 0.044076  Progress: 12.16%  Words/thread/sec: 10.60k  Alpha: 0.043918  Progress: 12.48%  Words/thread/sec: 10.86k  Alpha: 0.043759  Progress: 13.71%  Words/thread/sec: 10.50k  Alpha: 0.043143  Progress: 14.02%  Words/thread/sec: 10.57k  Alpha: 0.042992  Progress: 14.33%  Words/thread/sec: 10.80k  Alpha: 0.042837  Progress: 14.63%  Words/thread/sec: 11.01k  Alpha: 0.042686  Progress: 14.90%  Words/thread/sec: 10.59k  Alpha: 0.042552  Progress: 15.16%  Words/thread/sec: 10.64k  Alpha: 0.042418  Progress: 15.43%  Words/thread/sec: 10.81k  Alpha: 0.042286  Progress: 15.74%  Words/thread/sec: 10.89k  Alpha: 0.042130  Progress: 16.01%  Words/thread/sec: 10.64k  Alpha: 0.041996  Progress: 16.28%  Words/thread/sec: 10.68k  Alpha: 0.041858  Progress: 16.55%  Words/thread/sec: 10.84k  Alpha: 0.041726  Progress: 16.82%  Words/thread/sec: 10.90k  Alpha: 0.041589  Progress: 17.10%  Words/thread/sec: 10.67k  Alpha: 0.041451  Progress: 17.36%  Words/thread/sec: 10.57k  Alpha: 0.041318  Progress: 17.68%  Words/thread/sec: 10.76k  Alpha: 0.041162  Progress: 18.00%  Words/thread/sec: 10.94k  Alpha: 0.041001  Progress: 18.31%  Words/thread/sec: 10.64k  Alpha: 0.040846  Progress: 18.57%  Words/thread/sec: 10.67k  Alpha: 0.040713  Progress: 18.84%  Words/thread/sec: 10.82k  Alpha: 0.040579  Progress: 19.16%  Words/thread/sec: 10.86k  Alpha: 0.040422  Progress: 20.44%  Words/thread/sec: 10.65k  Alpha: 0.039780  Progress: 20.74%  Words/thread/sec: 10.70k  Alpha: 0.039630  Progress: 21.05%  Words/thread/sec: 10.86k  Alpha: 0.039475  Progress: 21.35%  Words/thread/sec: 10.98k  Alpha: 0.039325  Progress: 21.62%  Words/thread/sec: 10.72k  Alpha: 0.039191  Progress: 21.89%  Words/thread/sec: 10.75k  Alpha: 0.039056  Progress: 22.20%  Words/thread/sec: 10.78k  Alpha: 0.038902  Progress: 22.51%  Words/thread/sec: 10.90k  Alpha: 0.038743  Progress: 22.79%  Words/thread/sec: 10.67k  Alpha: 0.038606  Progress: 23.11%  Words/thread/sec: 10.82k  Alpha: 0.038446  Progress: 23.38%  Words/thread/sec: 10.84k  Alpha: 0.038310  Progress: 23.65%  Words/thread/sec: 10.93k  Alpha: 0.038177  Progress: 23.92%  Words/thread/sec: 10.70k  Alpha: 0.038041  Progress: 24.23%  Words/thread/sec: 10.75k  Alpha: 0.037884  Progress: 24.50%  Words/thread/sec: 10.86k  Alpha: 0.037749  Progress: 24.77%  Words/thread/sec: 10.95k  Alpha: 0.037613  Progress: 25.04%  Words/thread/sec: 10.65k  Alpha: 0.037478  Progress: 25.35%  Words/thread/sec: 10.77k  Alpha: 0.037324  Progress: 25.67%  Words/thread/sec: 10.81k  Alpha: 0.037165  Progress: 25.98%  Words/thread/sec: 10.91k  Alpha: 0.037008  Progress: 27.17%  Words/thread/sec: 10.73k  Alpha: 0.036413  Progress: 27.47%  Words/thread/sec: 10.78k  Alpha: 0.036263  Progress: 27.78%  Words/thread/sec: 10.88k  Alpha: 0.036108  Progress: 28.08%  Words/thread/sec: 10.96k  Alpha: 0.035958  Progress: 28.35%  Words/thread/sec: 10.78k  Alpha: 0.035825  Progress: 28.62%  Words/thread/sec: 10.81k  Alpha: 0.035690  Progress: 28.89%  Words/thread/sec: 10.85k  Alpha: 0.035556  Progress: 29.20%  Words/thread/sec: 10.92k  Alpha: 0.035401  Progress: 29.46%  Words/thread/sec: 10.79k  Alpha: 0.035269  Progress: 29.74%  Words/thread/sec: 10.83k  Alpha: 0.035131  Progress: 30.00%  Words/thread/sec: 10.87k  Alpha: 0.034998  Progress: 30.27%  Words/thread/sec: 10.92k  Alpha: 0.034864  Progress: 30.55%  Words/thread/sec: 10.80k  Alpha: 0.034725  Progress: 30.86%  Words/thread/sec: 10.77k  Alpha: 0.034570  Progress: 31.12%  Words/thread/sec: 10.84k  Alpha: 0.034438  Progress: 31.44%  Words/thread/sec: 10.92k  Alpha: 0.034278  Progress: 31.75%  Words/thread/sec: 10.78k  Alpha: 0.034123  Progress: 32.03%  Words/thread/sec: 10.81k  Alpha: 0.033987  Progress: 32.34%  Words/thread/sec: 10.82k  Alpha: 0.033829  Progress: 32.66%  Words/thread/sec: 10.89k  Alpha: 0.033672  Progress: 33.89%  Words/thread/sec: 10.78k  Alpha: 0.033054  Progress: 34.19%  Words/thread/sec: 10.82k  Alpha: 0.032903  Progress: 34.50%  Words/thread/sec: 10.89k  Alpha: 0.032749  Progress: 34.81%  Words/thread/sec: 10.96k  Alpha: 0.032597  Progress: 35.07%  Words/thread/sec: 10.82k  Alpha: 0.032463  Progress: 35.34%  Words/thread/sec: 10.85k  Alpha: 0.032330  Progress: 35.61%  Words/thread/sec: 10.87k  Alpha: 0.032195  Progress: 35.92%  Words/thread/sec: 10.93k  Alpha: 0.032040  Progress: 36.19%  Words/thread/sec: 10.83k  Alpha: 0.031907  Progress: 36.46%  Words/thread/sec: 10.86k  Alpha: 0.031771  Progress: 36.72%  Words/thread/sec: 10.88k  Alpha: 0.031638  Progress: 37.00%  Words/thread/sec: 10.93k  Alpha: 0.031502  Progress: 37.27%  Words/thread/sec: 10.83k  Alpha: 0.031363  Progress: 37.59%  Words/thread/sec: 10.82k  Alpha: 0.031207  Progress: 37.85%  Words/thread/sec: 10.90k  Alpha: 0.031074  Progress: 38.12%  Words/thread/sec: 10.94k  Alpha: 0.030941  Progress: 38.43%  Words/thread/sec: 10.80k  Alpha: 0.030786  Progress: 38.70%  Words/thread/sec: 10.83k  Alpha: 0.030652  Progress: 38.96%  Words/thread/sec: 10.90k  Alpha: 0.030518  Progress: 39.23%  Words/thread/sec: 10.95k  Alpha: 0.030386  Progress: 39.76%  Words/thread/sec: 10.82k  Alpha: 0.030120  Progress: 40.62%  Words/thread/sec: 10.81k  Alpha: 0.029688  Progress: 40.93%  Words/thread/sec: 10.86k  Alpha: 0.029537  Progress: 41.23%  Words/thread/sec: 10.91k  Alpha: 0.029383  Progress: 41.54%  Words/thread/sec: 10.95k  Alpha: 0.029232  Progress: 41.81%  Words/thread/sec: 10.84k  Alpha: 0.029097  Progress: 42.07%  Words/thread/sec: 10.88k  Alpha: 0.028964  Progress: 42.34%  Words/thread/sec: 10.88k  Alpha: 0.028830  Progress: 42.65%  Words/thread/sec: 10.94k  Alpha: 0.028675  Progress: 42.92%  Words/thread/sec: 10.85k  Alpha: 0.028542  Progress: 43.19%  Words/thread/sec: 10.89k  Alpha: 0.028404  Progress: 43.46%  Words/thread/sec: 10.89k  Alpha: 0.028272  Progress: 43.73%  Words/thread/sec: 10.94k  Alpha: 0.028137  Progress: 44.00%  Words/thread/sec: 10.85k  Alpha: 0.027998  Progress: 44.31%  Words/thread/sec: 10.85k  Alpha: 0.027843  Progress: 44.58%  Words/thread/sec: 10.88k  Alpha: 0.027709  Progress: 44.91%  Words/thread/sec: 10.93k  Alpha: 0.027547  Progress: 45.21%  Words/thread/sec: 10.83k  Alpha: 0.027393  Progress: 45.48%  Words/thread/sec: 10.87k  Alpha: 0.027258  Progress: 45.80%  Words/thread/sec: 10.87k  Alpha: 0.027101  Progress: 46.11%  Words/thread/sec: 10.90k  Alpha: 0.026943  Progress: 47.34%  Words/thread/sec: 10.83k  Alpha: 0.026330  Progress: 47.64%  Words/thread/sec: 10.87k  Alpha: 0.026180  Progress: 47.95%  Words/thread/sec: 10.91k  Alpha: 0.026025  Progress: 48.25%  Words/thread/sec: 10.95k  Alpha: 0.025874  Progress: 48.52%  Words/thread/sec: 10.85k  Alpha: 0.025739  Progress: 48.79%  Words/thread/sec: 10.89k  Alpha: 0.025606  Progress: 49.05%  Words/thread/sec: 10.88k  Alpha: 0.025473  Progress: 49.37%  Words/thread/sec: 10.94k  Alpha: 0.025317  Progress: 49.63%  Words/thread/sec: 10.86k  Alpha: 0.025184  Progress: 49.90%  Words/thread/sec: 10.90k  Alpha: 0.025049  Progress: 50.17%  Words/thread/sec: 10.89k  Alpha: 0.024915  Progress: 50.44%  Words/thread/sec: 10.94k  Alpha: 0.024779  Progress: 50.72%  Words/thread/sec: 10.86k  Alpha: 0.024641  Progress: 51.03%  Words/thread/sec: 10.86k  Alpha: 0.024486  Progress: 51.29%  Words/thread/sec: 10.90k  Alpha: 0.024354  Progress: 51.56%  Words/thread/sec: 10.94k  Alpha: 0.024221  Progress: 51.87%  Words/thread/sec: 10.83k  Alpha: 0.024065  Progress: 52.14%  Words/thread/sec: 10.87k  Alpha: 0.023931  Progress: 52.41%  Words/thread/sec: 10.91k  Alpha: 0.023796  Progress: 52.73%  Words/thread/sec: 10.92k  Alpha: 0.023637  Progress: 53.25%  Words/thread/sec: 10.86k  Alpha: 0.023373  Progress: 54.06%  Words/thread/sec: 10.84k  Alpha: 0.022971  Progress: 54.36%  Words/thread/sec: 10.88k  Alpha: 0.022822  Progress: 54.66%  Words/thread/sec: 10.92k  Alpha: 0.022668  Progress: 54.97%  Words/thread/sec: 10.94k  Alpha: 0.022516  Progress: 55.23%  Words/thread/sec: 10.86k  Alpha: 0.022383  Progress: 55.50%  Words/thread/sec: 10.90k  Alpha: 0.022251  Progress: 55.76%  Words/thread/sec: 10.89k  Alpha: 0.022118  Progress: 56.08%  Words/thread/sec: 10.94k  Alpha: 0.021961  Progress: 56.35%  Words/thread/sec: 10.85k  Alpha: 0.021825  Progress: 56.67%  Words/thread/sec: 10.89k  Alpha: 0.021666  Progress: 56.94%  Words/thread/sec: 10.91k  Alpha: 0.021531  Progress: 57.21%  Words/thread/sec: 10.95k  Alpha: 0.021397  Progress: 57.48%  Words/thread/sec: 10.84k  Alpha: 0.021262  Progress: 57.79%  Words/thread/sec: 10.88k  Alpha: 0.021106  Progress: 58.05%  Words/thread/sec: 10.90k  Alpha: 0.020973  Progress: 58.38%  Words/thread/sec: 10.93k  Alpha: 0.020812  Progress: 58.64%  Words/thread/sec: 10.84k  Alpha: 0.020678  Progress: 58.95%  Words/thread/sec: 10.87k  Alpha: 0.020524  Progress: 59.26%  Words/thread/sec: 10.89k  Alpha: 0.020368  Progress: 59.58%  Words/thread/sec: 10.92k  Alpha: 0.020210  Progress: 60.77%  Words/thread/sec: 10.85k  Alpha: 0.019614  Progress: 61.07%  Words/thread/sec: 10.89k  Alpha: 0.019464  Progress: 61.38%  Words/thread/sec: 10.92k  Alpha: 0.019310  Progress: 61.68%  Words/thread/sec: 10.95k  Alpha: 0.019158  Progress: 61.95%  Words/thread/sec: 10.87k  Alpha: 0.019024  Progress: 62.22%  Words/thread/sec: 10.91k  Alpha: 0.018890  Progress: 62.49%  Words/thread/sec: 10.90k  Alpha: 0.018757  Progress: 62.80%  Words/thread/sec: 10.94k  Alpha: 0.018602  Progress: 63.07%  Words/thread/sec: 10.87k  Alpha: 0.018464  Progress: 63.39%  Words/thread/sec: 10.89k  Alpha: 0.018303  Progress: 63.66%  Words/thread/sec: 10.91k  Alpha: 0.018171  Progress: 63.93%  Words/thread/sec: 10.95k  Alpha: 0.018036  Progress: 64.20%  Words/thread/sec: 10.85k  Alpha: 0.017900  Progress: 64.51%  Words/thread/sec: 10.89k  Alpha: 0.017746  Progress: 64.78%  Words/thread/sec: 10.91k  Alpha: 0.017612  Progress: 65.10%  Words/thread/sec: 10.94k  Alpha: 0.017451  Progress: 65.36%  Words/thread/sec: 10.86k  Alpha: 0.017318  Progress: 65.67%  Words/thread/sec: 10.88k  Alpha: 0.017164  Progress: 65.94%  Words/thread/sec: 10.92k  Alpha: 0.017032  Progress: 66.25%  Words/thread/sec: 10.91k  Alpha: 0.016874  Progress: 67.49%  Words/thread/sec: 10.86k  Alpha: 0.016253  Progress: 67.79%  Words/thread/sec: 10.90k  Alpha: 0.016103  Progress: 68.10%  Words/thread/sec: 10.92k  Alpha: 0.015948  Progress: 68.40%  Words/thread/sec: 10.95k  Alpha: 0.015798  Progress: 68.67%  Words/thread/sec: 10.87k  Alpha: 0.015663  Progress: 68.94%  Words/thread/sec: 10.91k  Alpha: 0.015529  Progress: 69.21%  Words/thread/sec: 10.91k  Alpha: 0.015396  Progress: 69.52%  Words/thread/sec: 10.94k  Alpha: 0.015241  Progress: 69.79%  Words/thread/sec: 10.88k  Alpha: 0.015104  Progress: 70.12%  Words/thread/sec: 10.90k  Alpha: 0.014942  Progress: 70.38%  Words/thread/sec: 10.92k  Alpha: 0.014809  Progress: 70.65%  Words/thread/sec: 10.94k  Alpha: 0.014674  Progress: 70.92%  Words/thread/sec: 10.86k  Alpha: 0.014538  Progress: 71.23%  Words/thread/sec: 10.90k  Alpha: 0.014384  Progress: 71.50%  Words/thread/sec: 10.93k  Alpha: 0.014251  Progress: 71.76%  Words/thread/sec: 10.95k  Alpha: 0.014118  Progress: 72.04%  Words/thread/sec: 10.86k  Alpha: 0.013982  Progress: 72.30%  Words/thread/sec: 10.88k  Alpha: 0.013849  Progress: 72.61%  Words/thread/sec: 10.92k  Alpha: 0.013696  Progress: 72.92%  Words/thread/sec: 10.93k  Alpha: 0.013538  Progress: 73.45%  Words/thread/sec: 10.89k  Alpha: 0.013273  Progress: 74.21%  Words/thread/sec: 10.87k  Alpha: 0.012895  Progress: 74.51%  Words/thread/sec: 10.90k  Alpha: 0.012744  Progress: 74.82%  Words/thread/sec: 10.92k  Alpha: 0.012591  Progress: 75.12%  Words/thread/sec: 10.94k  Alpha: 0.012441  Progress: 75.39%  Words/thread/sec: 10.89k  Alpha: 0.012305  Progress: 75.66%  Words/thread/sec: 10.91k  Alpha: 0.012172  Progress: 75.92%  Words/thread/sec: 10.90k  Alpha: 0.012038  Progress: 76.23%  Words/thread/sec: 10.94k  Alpha: 0.011884  Progress: 76.50%  Words/thread/sec: 10.89k  Alpha: 0.011751  Progress: 76.77%  Words/thread/sec: 10.92k  Alpha: 0.011613  Progress: 77.04%  Words/thread/sec: 10.91k  Alpha: 0.011480  Progress: 77.31%  Words/thread/sec: 10.94k  Alpha: 0.011344  Progress: 77.59%  Words/thread/sec: 10.89k  Alpha: 0.011204  Progress: 77.90%  Words/thread/sec: 10.90k  Alpha: 0.011049  Progress: 78.17%  Words/thread/sec: 10.92k  Alpha: 0.010916  Progress: 78.44%  Words/thread/sec: 10.94k  Alpha: 0.010782  Progress: 78.75%  Words/thread/sec: 10.87k  Alpha: 0.010625  Progress: 79.02%  Words/thread/sec: 10.90k  Alpha: 0.010491  Progress: 79.29%  Words/thread/sec: 10.92k  Alpha: 0.010357  Progress: 79.60%  Words/thread/sec: 10.93k  Alpha: 0.010200  Progress: 80.38%  Words/thread/sec: 10.92k  Alpha: 0.009810  Progress: 80.93%  Words/thread/sec: 10.91k  Alpha: 0.009535  Progress: 81.23%  Words/thread/sec: 10.91k  Alpha: 0.009385  Progress: 81.53%  Words/thread/sec: 10.92k  Alpha: 0.009233  Progress: 81.84%  Words/thread/sec: 10.94k  Alpha: 0.009082  Progress: 82.10%  Words/thread/sec: 10.92k  Alpha: 0.008948  Progress: 82.37%  Words/thread/sec: 10.92k  Alpha: 0.008815  Progress: 82.64%  Words/thread/sec: 10.91k  Alpha: 0.008680  Progress: 82.95%  Words/thread/sec: 10.94k  Alpha: 0.008526  Progress: 83.22%  Words/thread/sec: 10.92k  Alpha: 0.008391  Progress: 83.49%  Words/thread/sec: 10.92k  Alpha: 0.008255  Progress: 83.76%  Words/thread/sec: 10.91k  Alpha: 0.008122  Progress: 84.03%  Words/thread/sec: 10.94k  Alpha: 0.007985  Progress: 84.31%  Words/thread/sec: 10.92k  Alpha: 0.007847  Progress: 84.62%  Words/thread/sec: 10.90k  Alpha: 0.007691  Progress: 84.88%  Words/thread/sec: 10.91k  Alpha: 0.007558  Progress: 85.21%  Words/thread/sec: 10.93k  Alpha: 0.007396  Progress: 85.52%  Words/thread/sec: 10.91k  Alpha: 0.007240  Progress: 85.79%  Words/thread/sec: 10.91k  Alpha: 0.007105  Progress: 86.11%  Words/thread/sec: 10.90k  Alpha: 0.006946  Progress: 86.42%  Words/thread/sec: 10.92k  Alpha: 0.006789  Progress: 87.65%  Words/thread/sec: 10.91k  Alpha: 0.006176  Progress: 87.95%  Words/thread/sec: 10.91k  Alpha: 0.006025  Progress: 88.26%  Words/thread/sec: 10.92k  Alpha: 0.005870  Progress: 88.57%  Words/thread/sec: 10.95k  Alpha: 0.005717  Progress: 88.83%  Words/thread/sec: 10.92k  Alpha: 0.005584  Progress: 89.10%  Words/thread/sec: 10.92k  Alpha: 0.005450  Progress: 89.36%  Words/thread/sec: 10.91k  Alpha: 0.005318  Progress: 89.68%  Words/thread/sec: 10.94k  Alpha: 0.005162  Progress: 89.94%  Words/thread/sec: 10.93k  Alpha: 0.005029  Progress: 90.22%  Words/thread/sec: 10.92k  Alpha: 0.004892  Progress: 90.48%  Words/thread/sec: 10.92k  Alpha: 0.004758  Progress: 90.76%  Words/thread/sec: 10.94k  Alpha: 0.004622  Progress: 91.03%  Words/thread/sec: 10.93k  Alpha: 0.004484  Progress: 91.34%  Words/thread/sec: 10.90k  Alpha: 0.004328  Progress: 91.61%  Words/thread/sec: 10.92k  Alpha: 0.004196  Progress: 91.87%  Words/thread/sec: 10.94k  Alpha: 0.004063  Progress: 92.18%  Words/thread/sec: 10.91k  Alpha: 0.003908  Progress: 92.46%  Words/thread/sec: 10.91k  Alpha: 0.003772  Progress: 92.72%  Words/thread/sec: 10.92k  Alpha: 0.003640  Progress: 93.04%  Words/thread/sec: 10.93k  Alpha: 0.003481  Progress: 93.83%  Words/thread/sec: 10.93k  Alpha: 0.003086  Progress: 94.38%  Words/thread/sec: 10.91k  Alpha: 0.002812  Progress: 94.68%  Words/thread/sec: 10.91k  Alpha: 0.002662  Progress: 94.98%  Words/thread/sec: 10.92k  Alpha: 0.002508  Progress: 95.29%  Words/thread/sec: 10.95k  Alpha: 0.002355  Progress: 95.56%  Words/thread/sec: 10.93k  Alpha: 0.002220  Progress: 95.83%  Words/thread/sec: 10.92k  Alpha: 0.002086  Progress: 96.09%  Words/thread/sec: 10.91k  Alpha: 0.001953  Progress: 96.41%  Words/thread/sec: 10.94k  Alpha: 0.001797  Progress: 96.72%  Words/thread/sec: 10.91k  Alpha: 0.001638  Progress: 97.00%  Words/thread/sec: 10.93k  Alpha: 0.001500  Progress: 97.27%  Words/thread/sec: 10.92k  Alpha: 0.001367  Progress: 97.54%  Words/thread/sec: 10.94k  Alpha: 0.001231  Progress: 97.81%  Words/thread/sec: 10.91k  Alpha: 0.001095  Progress: 98.12%  Words/thread/sec: 10.91k  Alpha: 0.000939  Progress: 98.39%  Words/thread/sec: 10.92k  Alpha: 0.000806  Progress: 98.71%  Words/thread/sec: 10.94k  Alpha: 0.000646  Progress: 99.02%  Words/thread/sec: 10.90k  Alpha: 0.000492  Progress: 99.29%  Words/thread/sec: 10.92k  Alpha: 0.000357  Progress: 99.61%  Words/thread/sec: 10.91k  Alpha: 0.000197  Progress: 99.92%  Words/thread/sec: 10.93k  # started on Wed Mar  3 10:42:53 2021


 Performance counter stats for 'system wide':

S0-C0           1          91,115.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              9,411      context-switches          #    0.103 K/sec                  
S0-C0           1                274      cpu-migrations            #    0.003 K/sec                  
S0-C0           1                  7      page-faults               #    0.000 K/sec                  
S0-C0           1      2,068,863,245      cycles                    #    0.023 GHz                    
S0-C0           1      2,130,909,828      instructions              #    1.03  insn per cycle         
S0-C0           1      4,151,806,447      branches                  #   45.566 M/sec                  
S0-C0           1         62,437,182      branch-misses             #    1.50% of all branches        
S0-C1           1          91,115.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,702      context-switches          #    0.052 K/sec                  
S0-C1           1                238      cpu-migrations            #    0.003 K/sec                  
S0-C1           1            130,127      page-faults               #    0.001 M/sec                  
S0-C1           1      1,538,041,313      cycles                    #    0.017 GHz                    
S0-C1           1      3,714,311,045      instructions              #    2.41  insn per cycle         
S0-C1           1      4,238,642,874      branches                  #   46.520 M/sec                  
S0-C1           1         64,350,672      branch-misses             #    1.52% of all branches        
S0-C2           1          91,115.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,193      context-switches          #    0.057 K/sec                  
S0-C2           1                248      cpu-migrations            #    0.003 K/sec                  
S0-C2           1                 16      page-faults               #    0.000 K/sec                  
S0-C2           1      2,138,542,026      cycles                    #    0.023 GHz                    
S0-C2           1      2,337,778,534      instructions              #    1.09  insn per cycle         
S0-C2           1      4,169,441,858      branches                  #   45.760 M/sec                  
S0-C2           1         62,604,047      branch-misses             #    1.50% of all branches        
S0-C3           1          91,115.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              9,940      context-switches          #    0.109 K/sec                  
S0-C3           1                244      cpu-migrations            #    0.003 K/sec                  
S0-C3           1                  7      page-faults               #    0.000 K/sec                  
S0-C3           1      1,936,505,645      cycles                    #    0.021 GHz                    
S0-C3           1      2,088,304,187      instructions              #    1.08  insn per cycle         
S0-C3           1      4,146,184,588      branches                  #   45.505 M/sec                  
S0-C3           1         62,195,299      branch-misses             #    1.50% of all branches        

      91.116155679 seconds time elapsed

perf stat -o ../data/word2vec_perf_output_no_branch_1614768173219404463.txt --per-core -a taskset -c 0-3 ./word2vec_no-guess-branch-probability -train ../data/text8_3.3mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_3.3mb
100K200K300K400K500KVocab size: 9546
Words in train file: 524166
Alpha: 0.050000  Progress: 0.14%  Words/thread/sec: 5.95k  Alpha: 0.049858  Progress: 0.42%  Words/thread/sec: 18.19k  Alpha: 0.050000  Progress: 0.28%  Words/thread/sec: 12.28k  Alpha: 0.049789  Progress: 0.56%  Words/thread/sec: 24.17k  Alpha: 0.049719  Progress: 0.71%  Words/thread/sec: 14.07k  Alpha: 0.049643  Progress: 0.86%  Words/thread/sec: 16.86k  Alpha: 0.049572  Progress: 1.00%  Words/thread/sec: 19.73k  Alpha: 0.049572  Progress: 1.15%  Words/thread/sec: 22.62k  Alpha: 0.049424  Progress: 1.28%  Words/thread/sec: 17.32k  Alpha: 0.049361  Progress: 1.42%  Words/thread/sec: 18.14k  Alpha: 0.049290  Progress: 1.57%  Words/thread/sec: 20.04k  Alpha: 0.049215  Progress: 1.72%  Words/thread/sec: 21.89k  Alpha: 0.049142  Progress: 1.87%  Words/thread/sec: 18.40k  Alpha: 0.049067  Progress: 2.01%  Words/thread/sec: 19.02k  Alpha: 0.049067  Progress: 2.16%  Words/thread/sec: 20.43k  Alpha: 0.048918  Progress: 2.31%  Words/thread/sec: 21.74k  Alpha: 0.048847  Progress: 2.45%  Words/thread/sec: 18.99k  Alpha: 0.048777  Progress: 2.59%  Words/thread/sec: 19.40k  Alpha: 0.048777  Progress: 2.73%  Words/thread/sec: 20.48k  Alpha: 0.048634  Progress: 2.88%  Words/thread/sec: 21.55k  Alpha: 0.048560  Progress: 3.03%  Words/thread/sec: 19.36k  Alpha: 0.048486  Progress: 3.17%  Words/thread/sec: 19.67k  Alpha: 0.048416  Progress: 3.32%  Words/thread/sec: 20.60k  Alpha: 0.048341  Progress: 3.46%  Words/thread/sec: 21.45k  Alpha: 0.048269  Progress: 3.60%  Words/thread/sec: 19.58k  Alpha: 0.048199  Progress: 3.75%  Words/thread/sec: 19.88k  Alpha: 0.048127  Progress: 3.90%  Words/thread/sec: 20.65k  Alpha: 0.048052  Progress: 4.03%  Words/thread/sec: 21.34k  Alpha: 0.047983  Progress: 4.19%  Words/thread/sec: 19.79k  Alpha: 0.047907  Progress: 4.34%  Words/thread/sec: 20.05k  Alpha: 0.047832  Progress: 4.48%  Words/thread/sec: 20.71k  Alpha: 0.047759  Progress: 4.63%  Words/thread/sec: 21.35k  Alpha: 0.047687  Progress: 4.77%  Words/thread/sec: 19.97k  Alpha: 0.047615  Progress: 4.92%  Words/thread/sec: 20.18k  Alpha: 0.047542  Progress: 5.07%  Words/thread/sec: 20.75k  Alpha: 0.047467  Progress: 5.21%  Words/thread/sec: 21.32k  Alpha: 0.047394  Progress: 5.36%  Words/thread/sec: 20.46k  Alpha: 0.047321  Progress: 5.51%  Words/thread/sec: 20.30k  Alpha: 0.047247  Progress: 5.65%  Words/thread/sec: 20.79k  Alpha: 0.047175  Progress: 5.80%  Words/thread/sec: 21.33k  Alpha: 0.047101  Progress: 5.94%  Words/thread/sec: 20.85k  Alpha: 0.047032  Progress: 6.08%  Words/thread/sec: 20.35k  Alpha: 0.046958  Progress: 6.22%  Words/thread/sec: 20.79k  Alpha: 0.046888  Progress: 6.37%  Words/thread/sec: 21.26k  Alpha: 0.046816  Progress: 6.84%  Words/thread/sec: 20.99k  Alpha: 0.046578  Progress: 6.99%  Words/thread/sec: 20.82k  Alpha: 0.046504  Progress: 7.13%  Words/thread/sec: 21.21k  Alpha: 0.046434  Progress: 7.27%  Words/thread/sec: 21.31k  Alpha: 0.046365  Progress: 7.42%  Words/thread/sec: 20.97k  Alpha: 0.046290  Progress: 7.57%  Words/thread/sec: 20.83k  Alpha: 0.046215  Progress: 7.71%  Words/thread/sec: 21.20k  Alpha: 0.046145  Progress: 7.86%  Words/thread/sec: 21.31k  Alpha: 0.046072  Progress: 8.01%  Words/thread/sec: 21.00k  Alpha: 0.045997  Progress: 8.15%  Words/thread/sec: 20.84k  Alpha: 0.045927  Progress: 8.29%  Words/thread/sec: 21.19k  Alpha: 0.045854  Progress: 8.44%  Words/thread/sec: 21.30k  Alpha: 0.045780  Progress: 8.59%  Words/thread/sec: 21.00k  Alpha: 0.045706  Progress: 8.74%  Words/thread/sec: 20.87k  Alpha: 0.045631  Progress: 8.89%  Words/thread/sec: 21.21k  Alpha: 0.045557  Progress: 9.03%  Words/thread/sec: 21.31k  Alpha: 0.045486  Progress: 9.17%  Words/thread/sec: 21.00k  Alpha: 0.045414  Progress: 9.31%  Words/thread/sec: 20.88k  Alpha: 0.045343  Progress: 9.46%  Words/thread/sec: 21.17k  Alpha: 0.045271  Progress: 9.60%  Words/thread/sec: 21.27k  Alpha: 0.045198  Progress: 9.75%  Words/thread/sec: 21.00k  Alpha: 0.045126  Progress: 9.89%  Words/thread/sec: 20.88k  Alpha: 0.045055  Progress: 10.04%  Words/thread/sec: 21.17k  Alpha: 0.044979  Progress: 10.18%  Words/thread/sec: 21.25k  Alpha: 0.044909  Progress: 10.33%  Words/thread/sec: 20.99k  Alpha: 0.044837  Progress: 10.47%  Words/thread/sec: 20.88k  Alpha: 0.044764  Progress: 10.62%  Words/thread/sec: 21.16k  Alpha: 0.044690  Progress: 10.76%  Words/thread/sec: 21.23k  Alpha: 0.044621  Progress: 10.89%  Words/thread/sec: 21.14k  Alpha: 0.044557  Progress: 11.03%  Words/thread/sec: 20.86k  Alpha: 0.044483  Progress: 11.18%  Words/thread/sec: 21.11k  Alpha: 0.044410  Progress: 11.33%  Words/thread/sec: 21.19k  Alpha: 0.044337  Progress: 11.47%  Words/thread/sec: 21.13k  Alpha: 0.044265  Progress: 11.62%  Words/thread/sec: 20.88k  Alpha: 0.044192  Progress: 11.77%  Words/thread/sec: 21.11k  Alpha: 0.044116  Progress: 11.91%  Words/thread/sec: 21.20k  Alpha: 0.044044  Progress: 12.06%  Words/thread/sec: 21.31k  Alpha: 0.043971  Progress: 12.20%  Words/thread/sec: 20.90k  Alpha: 0.043898  Progress: 12.35%  Words/thread/sec: 21.11k  Alpha: 0.043826  Progress: 12.49%  Words/thread/sec: 21.20k  Alpha: 0.043756  Progress: 12.64%  Words/thread/sec: 21.43k  Alpha: 0.043682  Progress: 12.88%  Words/thread/sec: 21.05k  Alpha: 0.043561  Progress: 13.02%  Words/thread/sec: 21.25k  Alpha: 0.043491  Progress: 13.16%  Words/thread/sec: 21.32k  Alpha: 0.043419  Progress: 13.44%  Words/thread/sec: 21.33k  Alpha: 0.043278  Progress: 13.69%  Words/thread/sec: 21.11k  Alpha: 0.043154  Progress: 13.83%  Words/thread/sec: 21.28k  Alpha: 0.043084  Progress: 13.98%  Words/thread/sec: 21.26k  Alpha: 0.043009  Progress: 14.12%  Words/thread/sec: 21.44k  Alpha: 0.042942  Progress: 14.27%  Words/thread/sec: 21.10k  Alpha: 0.042866  Progress: 14.41%  Words/thread/sec: 21.26k  Alpha: 0.042796  Progress: 14.56%  Words/thread/sec: 21.25k  Alpha: 0.042720  Progress: 14.70%  Words/thread/sec: 21.43k  Alpha: 0.042648  Progress: 14.85%  Words/thread/sec: 21.10k  Alpha: 0.042577  Progress: 14.99%  Words/thread/sec: 21.26k  Alpha: 0.042504  Progress: 15.14%  Words/thread/sec: 21.24k  Alpha: 0.042430  Progress: 15.29%  Words/thread/sec: 21.42k  Alpha: 0.042355  Progress: 15.44%  Words/thread/sec: 21.12k  Alpha: 0.042280  Progress: 15.59%  Words/thread/sec: 21.27k  Alpha: 0.042206  Progress: 15.73%  Words/thread/sec: 21.25k  Alpha: 0.042135  Progress: 15.87%  Words/thread/sec: 21.40k  Alpha: 0.042064  Progress: 16.01%  Words/thread/sec: 21.11k  Alpha: 0.041993  Progress: 16.16%  Words/thread/sec: 21.25k  Alpha: 0.041921  Progress: 16.30%  Words/thread/sec: 21.23k  Alpha: 0.041849  Progress: 16.45%  Words/thread/sec: 21.38k  Alpha: 0.041775  Progress: 16.59%  Words/thread/sec: 21.10k  Alpha: 0.041704  Progress: 16.74%  Words/thread/sec: 21.25k  Alpha: 0.041629  Progress: 16.89%  Words/thread/sec: 21.23k  Alpha: 0.041557  Progress: 17.03%  Words/thread/sec: 21.37k  Alpha: 0.041486  Progress: 17.17%  Words/thread/sec: 21.11k  Alpha: 0.041413  Progress: 17.32%  Words/thread/sec: 21.23k  Alpha: 0.041339  Progress: 17.45%  Words/thread/sec: 21.33k  Alpha: 0.041275  Progress: 17.59%  Words/thread/sec: 21.32k  Alpha: 0.041206  Progress: 17.74%  Words/thread/sec: 21.08k  Alpha: 0.041131  Progress: 17.88%  Words/thread/sec: 21.20k  Alpha: 0.041059  Progress: 18.03%  Words/thread/sec: 21.31k  Alpha: 0.040987  Progress: 18.17%  Words/thread/sec: 21.32k  Alpha: 0.040913  Progress: 18.32%  Words/thread/sec: 21.08k  Alpha: 0.040841  Progress: 18.47%  Words/thread/sec: 21.25k  Alpha: 0.040767  Progress: 18.62%  Words/thread/sec: 21.37k  Alpha: 0.040692  Progress: 18.76%  Words/thread/sec: 21.32k  Alpha: 0.040620  Progress: 18.90%  Words/thread/sec: 21.19k  Alpha: 0.040551  Progress: 19.04%  Words/thread/sec: 21.24k  Alpha: 0.040478  Progress: 19.19%  Words/thread/sec: 21.35k  Alpha: 0.040405  Progress: 19.34%  Words/thread/sec: 21.30k  Alpha: 0.040331  Progress: 19.58%  Words/thread/sec: 21.19k  Alpha: 0.040211  Progress: 19.72%  Words/thread/sec: 21.28k  Alpha: 0.040141  Progress: 19.86%  Words/thread/sec: 21.27k  Alpha: 0.040072  Progress: 20.00%  Words/thread/sec: 21.38k  Alpha: 0.040000  Progress: 20.39%  Words/thread/sec: 21.22k  Alpha: 0.040000  Progress: 20.54%  Words/thread/sec: 21.38k  Alpha: 0.039730  Progress: 20.68%  Words/thread/sec: 21.46k  Alpha: 0.039659  Progress: 20.82%  Words/thread/sec: 21.31k  Alpha: 0.039591  Progress: 20.97%  Words/thread/sec: 21.22k  Alpha: 0.039515  Progress: 21.12%  Words/thread/sec: 21.36k  Alpha: 0.039440  Progress: 21.26%  Words/thread/sec: 21.45k  Alpha: 0.039369  Progress: 21.41%  Words/thread/sec: 21.31k  Alpha: 0.039297  Progress: 21.55%  Words/thread/sec: 21.21k  Alpha: 0.039227  Progress: 21.69%  Words/thread/sec: 21.35k  Alpha: 0.039153  Progress: 21.84%  Words/thread/sec: 21.43k  Alpha: 0.039080  Progress: 21.99%  Words/thread/sec: 21.31k  Alpha: 0.039005  Progress: 22.14%  Words/thread/sec: 21.22k  Alpha: 0.038931  Progress: 22.28%  Words/thread/sec: 21.34k  Alpha: 0.038859  Progress: 22.43%  Words/thread/sec: 21.44k  Alpha: 0.038785  Progress: 22.57%  Words/thread/sec: 21.30k  Alpha: 0.038715  Progress: 22.71%  Words/thread/sec: 21.21k  Alpha: 0.038643  Progress: 22.86%  Words/thread/sec: 21.33k  Alpha: 0.038571  Progress: 23.00%  Words/thread/sec: 21.42k  Alpha: 0.038499  Progress: 23.15%  Words/thread/sec: 21.29k  Alpha: 0.038426  Progress: 23.29%  Words/thread/sec: 21.19k  Alpha: 0.038355  Progress: 23.43%  Words/thread/sec: 21.31k  Alpha: 0.038283  Progress: 23.58%  Words/thread/sec: 21.41k  Alpha: 0.038208  Progress: 23.73%  Words/thread/sec: 21.28k  Alpha: 0.038137  Progress: 23.85%  Words/thread/sec: 21.25k  Alpha: 0.038073  Progress: 24.00%  Words/thread/sec: 21.30k  Alpha: 0.038001  Progress: 24.15%  Words/thread/sec: 21.38k  Alpha: 0.037926  Progress: 24.29%  Words/thread/sec: 21.26k  Alpha: 0.037857  Progress: 24.43%  Words/thread/sec: 21.24k  Alpha: 0.037785  Progress: 24.58%  Words/thread/sec: 21.30k  Alpha: 0.037711  Progress: 24.72%  Words/thread/sec: 21.36k  Alpha: 0.037638  Progress: 24.87%  Words/thread/sec: 21.25k  Alpha: 0.037565  Progress: 25.02%  Words/thread/sec: 21.32k  Alpha: 0.037492  Progress: 25.16%  Words/thread/sec: 21.30k  Alpha: 0.037420  Progress: 25.31%  Words/thread/sec: 21.36k  Alpha: 0.037344  Progress: 25.45%  Words/thread/sec: 21.27k  Alpha: 0.037275  Progress: 25.59%  Words/thread/sec: 21.37k  Alpha: 0.037203  Progress: 25.74%  Words/thread/sec: 21.29k  Alpha: 0.037130  Progress: 25.89%  Words/thread/sec: 21.35k  Alpha: 0.037057  Progress: 26.13%  Words/thread/sec: 21.32k  Alpha: 0.036936  Progress: 26.27%  Words/thread/sec: 21.24k  Alpha: 0.036863  Progress: 26.41%  Words/thread/sec: 21.33k  Alpha: 0.036795  Progress: 26.55%  Words/thread/sec: 21.41k  Alpha: 0.036725  Progress: 26.76%  Words/thread/sec: 21.35k  Alpha: 0.036618  Progress: 26.98%  Words/thread/sec: 21.32k  Alpha: 0.036508  Progress: 27.23%  Words/thread/sec: 21.38k  Alpha: 0.036383  Progress: 27.38%  Words/thread/sec: 21.44k  Alpha: 0.036312  Progress: 27.53%  Words/thread/sec: 21.28k  Alpha: 0.036237  Progress: 27.66%  Words/thread/sec: 21.36k  Alpha: 0.036169  Progress: 27.81%  Words/thread/sec: 21.38k  Alpha: 0.036093  Progress: 27.96%  Words/thread/sec: 21.43k  Alpha: 0.036022  Progress: 28.10%  Words/thread/sec: 21.28k  Alpha: 0.035948  Progress: 28.25%  Words/thread/sec: 21.36k  Alpha: 0.035875  Progress: 28.39%  Words/thread/sec: 21.37k  Alpha: 0.035804  Progress: 28.54%  Words/thread/sec: 21.42k  Alpha: 0.035731  Progress: 28.68%  Words/thread/sec: 21.27k  Alpha: 0.035658  Progress: 28.83%  Words/thread/sec: 21.36k  Alpha: 0.035583  Progress: 28.98%  Words/thread/sec: 21.37k  Alpha: 0.035509  Progress: 29.13%  Words/thread/sec: 21.42k  Alpha: 0.035434  Progress: 29.28%  Words/thread/sec: 21.27k  Alpha: 0.035362  Progress: 29.42%  Words/thread/sec: 21.35k  Alpha: 0.035291  Progress: 29.56%  Words/thread/sec: 21.36k  Alpha: 0.035220  Progress: 29.70%  Words/thread/sec: 21.41k  Alpha: 0.035148  Progress: 29.85%  Words/thread/sec: 21.26k  Alpha: 0.035077  Progress: 29.99%  Words/thread/sec: 21.34k  Alpha: 0.035003  Progress: 30.14%  Words/thread/sec: 21.35k  Alpha: 0.034932  Progress: 30.29%  Words/thread/sec: 21.40k  Alpha: 0.034857  Progress: 30.41%  Words/thread/sec: 21.31k  Alpha: 0.034793  Progress: 30.56%  Words/thread/sec: 21.32k  Alpha: 0.034722  Progress: 30.70%  Words/thread/sec: 21.34k  Alpha: 0.034650  Progress: 30.85%  Words/thread/sec: 21.38k  Alpha: 0.034576  Progress: 30.99%  Words/thread/sec: 21.31k  Alpha: 0.034504  Progress: 31.13%  Words/thread/sec: 21.31k  Alpha: 0.034434  Progress: 31.28%  Words/thread/sec: 21.33k  Alpha: 0.034359  Progress: 31.43%  Words/thread/sec: 21.37k  Alpha: 0.034287  Progress: 31.57%  Words/thread/sec: 21.37k  Alpha: 0.034214  Progress: 31.72%  Words/thread/sec: 21.31k  Alpha: 0.034141  Progress: 31.86%  Words/thread/sec: 21.33k  Alpha: 0.034068  Progress: 32.01%  Words/thread/sec: 21.37k  Alpha: 0.033993  Progress: 32.15%  Words/thread/sec: 21.43k  Alpha: 0.033924  Progress: 32.30%  Words/thread/sec: 21.30k  Alpha: 0.033852  Progress: 32.53%  Words/thread/sec: 21.38k  Alpha: 0.033733  Progress: 32.68%  Words/thread/sec: 21.42k  Alpha: 0.033660  Progress: 32.81%  Words/thread/sec: 21.31k  Alpha: 0.033596  Progress: 32.95%  Words/thread/sec: 21.37k  Alpha: 0.033527  Progress: 33.09%  Words/thread/sec: 21.36k  Alpha: 0.033454  Progress: 33.23%  Words/thread/sec: 21.39k  Alpha: 0.033383  Progress: 33.45%  Words/thread/sec: 21.34k  Alpha: 0.033277  Progress: 33.67%  Words/thread/sec: 21.45k  Alpha: 0.033166  Progress: 33.81%  Words/thread/sec: 21.32k  Alpha: 0.033093  Progress: 34.08%  Words/thread/sec: 21.42k  Alpha: 0.032960  Progress: 34.23%  Words/thread/sec: 21.43k  Alpha: 0.032884  Progress: 34.37%  Words/thread/sec: 21.30k  Alpha: 0.032816  Progress: 34.52%  Words/thread/sec: 21.39k  Alpha: 0.032741  Progress: 34.66%  Words/thread/sec: 21.41k  Alpha: 0.032671  Progress: 34.81%  Words/thread/sec: 21.42k  Alpha: 0.032597  Progress: 34.95%  Words/thread/sec: 21.30k  Alpha: 0.032524  Progress: 35.09%  Words/thread/sec: 21.39k  Alpha: 0.032454  Progress: 35.24%  Words/thread/sec: 21.41k  Alpha: 0.032380  Progress: 35.38%  Words/thread/sec: 21.42k  Alpha: 0.032309  Progress: 35.53%  Words/thread/sec: 21.30k  Alpha: 0.032234  Progress: 35.68%  Words/thread/sec: 21.38k  Alpha: 0.032159  Progress: 35.83%  Words/thread/sec: 21.41k  Alpha: 0.032085  Progress: 35.97%  Words/thread/sec: 21.42k  Alpha: 0.032013  Progress: 36.12%  Words/thread/sec: 21.30k  Alpha: 0.031942  Progress: 36.26%  Words/thread/sec: 21.38k  Alpha: 0.031871  Progress: 36.40%  Words/thread/sec: 21.39k  Alpha: 0.031799  Progress: 36.54%  Words/thread/sec: 21.40k  Alpha: 0.031728  Progress: 36.69%  Words/thread/sec: 21.29k  Alpha: 0.031657  Progress: 36.83%  Words/thread/sec: 21.37k  Alpha: 0.031583  Progress: 36.98%  Words/thread/sec: 21.39k  Alpha: 0.031508  Progress: 37.11%  Words/thread/sec: 21.45k  Alpha: 0.031444  Progress: 37.26%  Words/thread/sec: 21.28k  Alpha: 0.031372  Progress: 37.40%  Words/thread/sec: 21.35k  Alpha: 0.031301  Progress: 37.55%  Words/thread/sec: 21.37k  Alpha: 0.031227  Progress: 37.69%  Words/thread/sec: 21.44k  Alpha: 0.031154  Progress: 37.84%  Words/thread/sec: 21.28k  Alpha: 0.031080  Progress: 37.98%  Words/thread/sec: 21.35k  Alpha: 0.031011  Progress: 38.12%  Words/thread/sec: 21.41k  Alpha: 0.030938  Progress: 38.27%  Words/thread/sec: 21.44k  Alpha: 0.030866  Progress: 38.41%  Words/thread/sec: 21.29k  Alpha: 0.030796  Progress: 38.55%  Words/thread/sec: 21.35k  Alpha: 0.030724  Progress: 38.70%  Words/thread/sec: 21.42k  Alpha: 0.030651  Progress: 38.85%  Words/thread/sec: 21.44k  Alpha: 0.030575  Progress: 39.09%  Words/thread/sec: 21.32k  Alpha: 0.030456  Progress: 39.23%  Words/thread/sec: 21.39k  Alpha: 0.030383  Progress: 39.38%  Words/thread/sec: 21.40k  Alpha: 0.030311  Progress: 39.52%  Words/thread/sec: 21.41k  Alpha: 0.030242  Progress: 39.66%  Words/thread/sec: 21.31k  Alpha: 0.030169  Progress: 39.81%  Words/thread/sec: 21.38k  Alpha: 0.030094  Progress: 39.95%  Words/thread/sec: 21.40k  Alpha: 0.030024  Progress: 40.10%  Words/thread/sec: 21.41k  Alpha: 0.029950  Progress: 40.39%  Words/thread/sec: 21.37k  Alpha: 0.029807  Progress: 40.51%  Words/thread/sec: 21.37k  Alpha: 0.029743  Progress: 40.66%  Words/thread/sec: 21.42k  Alpha: 0.029669  Progress: 40.80%  Words/thread/sec: 21.43k  Alpha: 0.029599  Progress: 41.05%  Words/thread/sec: 21.34k  Alpha: 0.029474  Progress: 41.20%  Words/thread/sec: 21.39k  Alpha: 0.029399  Progress: 41.34%  Words/thread/sec: 21.41k  Alpha: 0.029330  Progress: 41.48%  Words/thread/sec: 21.47k  Alpha: 0.029260  Progress: 41.62%  Words/thread/sec: 21.33k  Alpha: 0.029189  Progress: 41.76%  Words/thread/sec: 21.38k  Alpha: 0.029118  Progress: 41.91%  Words/thread/sec: 21.40k  Alpha: 0.029045  Progress: 42.06%  Words/thread/sec: 21.46k  Alpha: 0.028972  Progress: 42.20%  Words/thread/sec: 21.33k  Alpha: 0.028899  Progress: 42.35%  Words/thread/sec: 21.38k  Alpha: 0.028824  Progress: 42.50%  Words/thread/sec: 21.40k  Alpha: 0.028750  Progress: 42.65%  Words/thread/sec: 21.46k  Alpha: 0.028676  Progress: 42.79%  Words/thread/sec: 21.33k  Alpha: 0.028605  Progress: 42.93%  Words/thread/sec: 21.38k  Alpha: 0.028533  Progress: 43.08%  Words/thread/sec: 21.39k  Alpha: 0.028462  Progress: 43.22%  Words/thread/sec: 21.45k  Alpha: 0.028391  Progress: 43.37%  Words/thread/sec: 21.32k  Alpha: 0.028316  Progress: 43.51%  Words/thread/sec: 21.37k  Alpha: 0.028244  Progress: 43.66%  Words/thread/sec: 21.38k  Alpha: 0.028171  Progress: 43.81%  Words/thread/sec: 21.45k  Alpha: 0.028096  Progress: 43.95%  Words/thread/sec: 21.32k  Alpha: 0.028023  Progress: 44.10%  Words/thread/sec: 21.37k  Alpha: 0.027951  Progress: 44.24%  Words/thread/sec: 21.38k  Alpha: 0.027880  Progress: 44.39%  Words/thread/sec: 21.44k  Alpha: 0.027805  Progress: 44.54%  Words/thread/sec: 21.36k  Alpha: 0.027732  Progress: 44.68%  Words/thread/sec: 21.37k  Alpha: 0.027658  Progress: 44.82%  Words/thread/sec: 21.38k  Alpha: 0.027589  Progress: 44.97%  Words/thread/sec: 21.43k  Alpha: 0.027516  Progress: 45.11%  Words/thread/sec: 21.40k  Alpha: 0.027447  Progress: 45.25%  Words/thread/sec: 21.36k  Alpha: 0.027375  Progress: 45.40%  Words/thread/sec: 21.37k  Alpha: 0.027301  Progress: 45.55%  Words/thread/sec: 21.43k  Alpha: 0.027225  Progress: 45.79%  Words/thread/sec: 21.34k  Alpha: 0.027106  Progress: 45.93%  Words/thread/sec: 21.37k  Alpha: 0.027037  Progress: 46.07%  Words/thread/sec: 21.41k  Alpha: 0.026965  Progress: 46.21%  Words/thread/sec: 21.46k  Alpha: 0.026893  Progress: 46.36%  Words/thread/sec: 21.33k  Alpha: 0.026819  Progress: 46.51%  Words/thread/sec: 21.37k  Alpha: 0.026745  Progress: 46.66%  Words/thread/sec: 21.41k  Alpha: 0.026670  Progress: 46.80%  Words/thread/sec: 21.46k  Alpha: 0.026600  Progress: 47.10%  Words/thread/sec: 21.37k  Alpha: 0.026452  Progress: 47.24%  Words/thread/sec: 21.40k  Alpha: 0.026381  Progress: 47.39%  Words/thread/sec: 21.44k  Alpha: 0.026307  Progress: 47.53%  Words/thread/sec: 21.43k  Alpha: 0.026237  Progress: 47.78%  Words/thread/sec: 21.41k  Alpha: 0.026112  Progress: 47.93%  Words/thread/sec: 21.42k  Alpha: 0.026037  Progress: 48.07%  Words/thread/sec: 21.41k  Alpha: 0.025966  Progress: 48.21%  Words/thread/sec: 21.44k  Alpha: 0.025897  Progress: 48.35%  Words/thread/sec: 21.40k  Alpha: 0.025826  Progress: 48.49%  Words/thread/sec: 21.40k  Alpha: 0.025755  Progress: 48.63%  Words/thread/sec: 21.40k  Alpha: 0.025683  Progress: 48.78%  Words/thread/sec: 21.43k  Alpha: 0.025611  Progress: 48.92%  Words/thread/sec: 21.40k  Alpha: 0.025538  Progress: 49.07%  Words/thread/sec: 21.40k  Alpha: 0.025463  Progress: 49.22%  Words/thread/sec: 21.40k  Alpha: 0.025389  Progress: 49.37%  Words/thread/sec: 21.43k  Alpha: 0.025315  Progress: 49.51%  Words/thread/sec: 21.40k  Alpha: 0.025244  Progress: 49.66%  Words/thread/sec: 21.40k  Alpha: 0.025172  Progress: 49.80%  Words/thread/sec: 21.39k  Alpha: 0.025100  Progress: 49.94%  Words/thread/sec: 21.42k  Alpha: 0.025028  Progress: 50.10%  Words/thread/sec: 21.39k  Alpha: 0.024952  Progress: 50.24%  Words/thread/sec: 21.40k  Alpha: 0.024881  Progress: 50.39%  Words/thread/sec: 21.39k  Alpha: 0.024806  Progress: 50.53%  Words/thread/sec: 21.42k  Alpha: 0.024733  Progress: 50.68%  Words/thread/sec: 21.39k  Alpha: 0.024660  Progress: 50.83%  Words/thread/sec: 21.39k  Alpha: 0.024587  Progress: 50.97%  Words/thread/sec: 21.38k  Alpha: 0.024513  Progress: 51.12%  Words/thread/sec: 21.42k  Alpha: 0.024441  Progress: 51.27%  Words/thread/sec: 21.43k  Alpha: 0.024366  Progress: 51.42%  Words/thread/sec: 21.39k  Alpha: 0.024291  Progress: 51.56%  Words/thread/sec: 21.38k  Alpha: 0.024219  Progress: 51.70%  Words/thread/sec: 21.42k  Alpha: 0.024150  Progress: 51.83%  Words/thread/sec: 21.46k  Alpha: 0.024084  Progress: 51.98%  Words/thread/sec: 21.38k  Alpha: 0.024012  Progress: 52.20%  Words/thread/sec: 21.40k  Alpha: 0.023900  Progress: 52.35%  Words/thread/sec: 21.44k  Alpha: 0.023827  Progress: 52.48%  Words/thread/sec: 21.36k  Alpha: 0.023758  Progress: 52.63%  Words/thread/sec: 21.41k  Alpha: 0.023685  Progress: 52.77%  Words/thread/sec: 21.40k  Alpha: 0.023613  Progress: 52.92%  Words/thread/sec: 21.43k  Alpha: 0.023540  Progress: 53.07%  Words/thread/sec: 21.36k  Alpha: 0.023466  Progress: 53.22%  Words/thread/sec: 21.41k  Alpha: 0.023392  Progress: 53.35%  Words/thread/sec: 21.39k  Alpha: 0.023323  Progress: 53.50%  Words/thread/sec: 21.43k  Alpha: 0.023249  Progress: 53.80%  Words/thread/sec: 21.42k  Alpha: 0.023101  Progress: 53.94%  Words/thread/sec: 21.38k  Alpha: 0.023028  Progress: 54.09%  Words/thread/sec: 21.42k  Alpha: 0.022956  Progress: 54.23%  Words/thread/sec: 21.42k  Alpha: 0.022886  Progress: 54.38%  Words/thread/sec: 21.41k  Alpha: 0.022812  Progress: 54.63%  Words/thread/sec: 21.42k  Alpha: 0.022686  Progress: 54.77%  Words/thread/sec: 21.40k  Alpha: 0.022615  Progress: 54.91%  Words/thread/sec: 21.39k  Alpha: 0.022547  Progress: 55.05%  Words/thread/sec: 21.44k  Alpha: 0.022475  Progress: 55.19%  Words/thread/sec: 21.41k  Alpha: 0.022405  Progress: 55.34%  Words/thread/sec: 21.39k  Alpha: 0.022332  Progress: 55.48%  Words/thread/sec: 21.39k  Alpha: 0.022260  Progress: 55.62%  Words/thread/sec: 21.44k  Alpha: 0.022188  Progress: 55.77%  Words/thread/sec: 21.41k  Alpha: 0.022113  Progress: 55.92%  Words/thread/sec: 21.39k  Alpha: 0.022038  Progress: 56.07%  Words/thread/sec: 21.39k  Alpha: 0.021963  Progress: 56.22%  Words/thread/sec: 21.44k  Alpha: 0.021892  Progress: 56.36%  Words/thread/sec: 21.40k  Alpha: 0.021820  Progress: 56.50%  Words/thread/sec: 21.39k  Alpha: 0.021748  Progress: 56.63%  Words/thread/sec: 21.41k  Alpha: 0.021684  Progress: 56.77%  Words/thread/sec: 21.43k  Alpha: 0.021613  Progress: 56.92%  Words/thread/sec: 21.39k  Alpha: 0.021542  Progress: 57.07%  Words/thread/sec: 21.38k  Alpha: 0.021467  Progress: 57.21%  Words/thread/sec: 21.40k  Alpha: 0.021395  Progress: 57.36%  Words/thread/sec: 21.43k  Alpha: 0.021322  Progress: 57.50%  Words/thread/sec: 21.39k  Alpha: 0.021250  Progress: 57.65%  Words/thread/sec: 21.38k  Alpha: 0.021177  Progress: 57.80%  Words/thread/sec: 21.43k  Alpha: 0.021102  Progress: 57.94%  Words/thread/sec: 21.42k  Alpha: 0.021031  Progress: 58.09%  Words/thread/sec: 21.39k  Alpha: 0.020957  Progress: 58.23%  Words/thread/sec: 21.41k  Alpha: 0.020887  Progress: 58.37%  Words/thread/sec: 21.42k  Alpha: 0.020815  Progress: 58.51%  Words/thread/sec: 21.41k  Alpha: 0.020746  Progress: 58.75%  Words/thread/sec: 21.41k  Alpha: 0.020627  Progress: 58.90%  Words/thread/sec: 21.40k  Alpha: 0.020551  Progress: 59.04%  Words/thread/sec: 21.39k  Alpha: 0.020478  Progress: 59.18%  Words/thread/sec: 21.44k  Alpha: 0.020410  Progress: 59.33%  Words/thread/sec: 21.41k  Alpha: 0.020336  Progress: 59.47%  Words/thread/sec: 21.39k  Alpha: 0.020263  Progress: 59.62%  Words/thread/sec: 21.39k  Alpha: 0.020192  Progress: 59.77%  Words/thread/sec: 21.44k  Alpha: 0.020117  Progress: 59.91%  Words/thread/sec: 21.40k  Alpha: 0.020044  Progress: 60.05%  Words/thread/sec: 21.39k  Alpha: 0.019975  Progress: 60.27%  Words/thread/sec: 21.41k  Alpha: 0.019864  Progress: 60.42%  Words/thread/sec: 21.46k  Alpha: 0.019789  Progress: 60.64%  Words/thread/sec: 21.38k  Alpha: 0.019679  Progress: 60.78%  Words/thread/sec: 21.38k  Alpha: 0.019608  Progress: 60.93%  Words/thread/sec: 21.43k  Alpha: 0.019534  Progress: 61.07%  Words/thread/sec: 21.47k  Alpha: 0.019464  Progress: 61.32%  Words/thread/sec: 21.41k  Alpha: 0.019338  Progress: 61.47%  Words/thread/sec: 21.41k  Alpha: 0.019267  Progress: 61.61%  Words/thread/sec: 21.45k  Alpha: 0.019196  Progress: 61.74%  Words/thread/sec: 21.41k  Alpha: 0.019128  Progress: 61.89%  Words/thread/sec: 21.40k  Alpha: 0.019057  Progress: 62.03%  Words/thread/sec: 21.40k  Alpha: 0.018985  Progress: 62.17%  Words/thread/sec: 21.44k  Alpha: 0.018913  Progress: 62.32%  Words/thread/sec: 21.40k  Alpha: 0.018839  Progress: 62.47%  Words/thread/sec: 21.40k  Alpha: 0.018764  Progress: 62.61%  Words/thread/sec: 21.40k  Alpha: 0.018693  Progress: 62.76%  Words/thread/sec: 21.44k  Alpha: 0.018619  Progress: 62.91%  Words/thread/sec: 21.40k  Alpha: 0.018544  Progress: 63.06%  Words/thread/sec: 21.40k  Alpha: 0.018472  Progress: 63.21%  Words/thread/sec: 21.40k  Alpha: 0.018396  Progress: 63.35%  Words/thread/sec: 21.43k  Alpha: 0.018324  Progress: 63.49%  Words/thread/sec: 21.40k  Alpha: 0.018253  Progress: 63.64%  Words/thread/sec: 21.40k  Alpha: 0.018182  Progress: 63.78%  Words/thread/sec: 21.40k  Alpha: 0.018109  Progress: 63.93%  Words/thread/sec: 21.43k  Alpha: 0.018034  Progress: 64.08%  Words/thread/sec: 21.40k  Alpha: 0.017960  Progress: 64.22%  Words/thread/sec: 21.39k  Alpha: 0.017888  Progress: 64.38%  Words/thread/sec: 21.43k  Alpha: 0.017812  Progress: 64.52%  Words/thread/sec: 21.43k  Alpha: 0.017738  Progress: 64.67%  Words/thread/sec: 21.40k  Alpha: 0.017666  Progress: 64.80%  Words/thread/sec: 21.41k  Alpha: 0.017600  Progress: 64.95%  Words/thread/sec: 21.44k  Alpha: 0.017526  Progress: 65.09%  Words/thread/sec: 21.42k  Alpha: 0.017453  Progress: 65.30%  Words/thread/sec: 21.41k  Alpha: 0.017349  Progress: 65.45%  Words/thread/sec: 21.41k  Alpha: 0.017277  Progress: 65.60%  Words/thread/sec: 21.39k  Alpha: 0.017201  Progress: 65.74%  Words/thread/sec: 21.43k  Alpha: 0.017132  Progress: 65.88%  Words/thread/sec: 21.41k  Alpha: 0.017059  Progress: 66.03%  Words/thread/sec: 21.41k  Alpha: 0.016986  Progress: 66.17%  Words/thread/sec: 21.39k  Alpha: 0.016914  Progress: 66.32%  Words/thread/sec: 21.42k  Alpha: 0.016839  Progress: 66.47%  Words/thread/sec: 21.40k  Alpha: 0.016767  Progress: 66.61%  Words/thread/sec: 21.40k  Alpha: 0.016693  Progress: 66.75%  Words/thread/sec: 21.39k  Alpha: 0.016623  Progress: 66.90%  Words/thread/sec: 21.42k  Alpha: 0.016548  Progress: 67.12%  Words/thread/sec: 21.43k  Alpha: 0.016438  Progress: 67.34%  Words/thread/sec: 21.38k  Alpha: 0.016328  Progress: 67.49%  Words/thread/sec: 21.42k  Alpha: 0.016254  Progress: 67.63%  Words/thread/sec: 21.41k  Alpha: 0.016184  Progress: 67.78%  Words/thread/sec: 21.44k  Alpha: 0.016112  Progress: 67.93%  Words/thread/sec: 21.38k  Alpha: 0.016037  Progress: 68.07%  Words/thread/sec: 21.42k  Alpha: 0.015965  Progress: 68.31%  Words/thread/sec: 21.44k  Alpha: 0.015843  Progress: 68.45%  Words/thread/sec: 21.38k  Alpha: 0.015775  Progress: 68.59%  Words/thread/sec: 21.41k  Alpha: 0.015705  Progress: 68.74%  Words/thread/sec: 21.44k  Alpha: 0.015632  Progress: 68.88%  Words/thread/sec: 21.43k  Alpha: 0.015559  Progress: 69.03%  Words/thread/sec: 21.37k  Alpha: 0.015486  Progress: 69.18%  Words/thread/sec: 21.40k  Alpha: 0.015410  Progress: 69.32%  Words/thread/sec: 21.44k  Alpha: 0.015339  Progress: 69.47%  Words/thread/sec: 21.43k  Alpha: 0.015265  Progress: 69.60%  Words/thread/sec: 21.37k  Alpha: 0.015201  Progress: 69.75%  Words/thread/sec: 21.41k  Alpha: 0.015127  Progress: 69.89%  Words/thread/sec: 21.44k  Alpha: 0.015055  Progress: 70.03%  Words/thread/sec: 21.42k  Alpha: 0.014983  Progress: 70.18%  Words/thread/sec: 21.37k  Alpha: 0.014911  Progress: 70.32%  Words/thread/sec: 21.40k  Alpha: 0.014840  Progress: 70.46%  Words/thread/sec: 21.44k  Alpha: 0.014769  Progress: 70.61%  Words/thread/sec: 21.42k  Alpha: 0.014693  Progress: 70.76%  Words/thread/sec: 21.40k  Alpha: 0.014619  Progress: 70.91%  Words/thread/sec: 21.40k  Alpha: 0.014546  Progress: 71.05%  Words/thread/sec: 21.43k  Alpha: 0.014474  Progress: 71.20%  Words/thread/sec: 21.41k  Alpha: 0.014401  Progress: 71.34%  Words/thread/sec: 21.42k  Alpha: 0.014331  Progress: 71.48%  Words/thread/sec: 21.40k  Alpha: 0.014260  Progress: 71.63%  Words/thread/sec: 21.43k  Alpha: 0.014185  Progress: 71.87%  Words/thread/sec: 21.44k  Alpha: 0.014066  Progress: 72.01%  Words/thread/sec: 21.38k  Alpha: 0.013997  Progress: 72.15%  Words/thread/sec: 21.41k  Alpha: 0.013925  Progress: 72.29%  Words/thread/sec: 21.44k  Alpha: 0.013856  Progress: 72.44%  Words/thread/sec: 21.43k  Alpha: 0.013780  Progress: 72.59%  Words/thread/sec: 21.38k  Alpha: 0.013707  Progress: 72.73%  Words/thread/sec: 21.41k  Alpha: 0.013634  Progress: 72.88%  Words/thread/sec: 21.44k  Alpha: 0.013559  Progress: 73.03%  Words/thread/sec: 21.43k  Alpha: 0.013487  Progress: 73.15%  Words/thread/sec: 21.38k  Alpha: 0.013423  Progress: 73.30%  Words/thread/sec: 21.41k  Alpha: 0.013351  Progress: 73.44%  Words/thread/sec: 21.44k  Alpha: 0.013278  Progress: 73.58%  Words/thread/sec: 21.42k  Alpha: 0.013209  Progress: 73.88%  Words/thread/sec: 21.42k  Alpha: 0.013062  Progress: 74.03%  Words/thread/sec: 21.45k  Alpha: 0.012987  Progress: 74.17%  Words/thread/sec: 21.42k  Alpha: 0.012913  Progress: 74.31%  Words/thread/sec: 21.40k  Alpha: 0.012843  Progress: 74.46%  Words/thread/sec: 21.41k  Alpha: 0.012772  Progress: 74.60%  Words/thread/sec: 21.44k  Alpha: 0.012700  Progress: 74.75%  Words/thread/sec: 21.42k  Alpha: 0.012625  Progress: 74.99%  Words/thread/sec: 21.43k  Alpha: 0.012504  Progress: 75.14%  Words/thread/sec: 21.44k  Alpha: 0.012430  Progress: 75.28%  Words/thread/sec: 21.40k  Alpha: 0.012360  Progress: 75.42%  Words/thread/sec: 21.42k  Alpha: 0.012291  Progress: 75.56%  Words/thread/sec: 21.42k  Alpha: 0.012218  Progress: 75.71%  Words/thread/sec: 21.43k  Alpha: 0.012147  Progress: 75.86%  Words/thread/sec: 21.39k  Alpha: 0.012072  Progress: 76.00%  Words/thread/sec: 21.42k  Alpha: 0.011999  Progress: 76.15%  Words/thread/sec: 21.42k  Alpha: 0.011925  Progress: 76.30%  Words/thread/sec: 21.44k  Alpha: 0.011848  Progress: 76.45%  Words/thread/sec: 21.40k  Alpha: 0.011777  Progress: 76.60%  Words/thread/sec: 21.42k  Alpha: 0.011702  Progress: 76.74%  Words/thread/sec: 21.42k  Alpha: 0.011631  Progress: 76.88%  Words/thread/sec: 21.43k  Alpha: 0.011559  Progress: 77.02%  Words/thread/sec: 21.39k  Alpha: 0.011488  Progress: 77.17%  Words/thread/sec: 21.42k  Alpha: 0.011417  Progress: 77.31%  Words/thread/sec: 21.42k  Alpha: 0.011343  Progress: 77.46%  Words/thread/sec: 21.45k  Alpha: 0.011268  Progress: 77.61%  Words/thread/sec: 21.39k  Alpha: 0.011195  Progress: 77.76%  Words/thread/sec: 21.41k  Alpha: 0.011121  Progress: 77.90%  Words/thread/sec: 21.44k  Alpha: 0.011052  Progress: 78.04%  Words/thread/sec: 21.45k  Alpha: 0.010978  Progress: 78.29%  Words/thread/sec: 21.42k  Alpha: 0.010856  Progress: 78.43%  Words/thread/sec: 21.43k  Alpha: 0.010785  Progress: 78.57%  Words/thread/sec: 21.43k  Alpha: 0.010713  Progress: 78.71%  Words/thread/sec: 21.42k  Alpha: 0.010644  Progress: 78.86%  Words/thread/sec: 21.41k  Alpha: 0.010571  Progress: 79.00%  Words/thread/sec: 21.43k  Alpha: 0.010500  Progress: 79.15%  Words/thread/sec: 21.43k  Alpha: 0.010425  Progress: 79.30%  Words/thread/sec: 21.42k  Alpha: 0.010350  Progress: 79.45%  Words/thread/sec: 21.41k  Alpha: 0.010277  Progress: 79.59%  Words/thread/sec: 21.43k  Alpha: 0.010204  Progress: 79.74%  Words/thread/sec: 21.43k  Alpha: 0.010131  Progress: 79.89%  Words/thread/sec: 21.42k  Alpha: 0.010055  Progress: 80.04%  Words/thread/sec: 21.41k  Alpha: 0.009982  Progress: 80.18%  Words/thread/sec: 21.43k  Alpha: 0.009911  Progress: 80.32%  Words/thread/sec: 21.42k  Alpha: 0.009841  Progress: 80.54%  Words/thread/sec: 21.44k  Alpha: 0.009731  Progress: 80.74%  Words/thread/sec: 21.45k  Alpha: 0.009631  Progress: 80.89%  Words/thread/sec: 21.42k  Alpha: 0.009556  Progress: 81.03%  Words/thread/sec: 21.41k  Alpha: 0.009484  Progress: 81.17%  Words/thread/sec: 21.44k  Alpha: 0.009414  Progress: 81.31%  Words/thread/sec: 21.44k  Alpha: 0.009343  Progress: 81.46%  Words/thread/sec: 21.42k  Alpha: 0.009268  Progress: 81.61%  Words/thread/sec: 21.41k  Alpha: 0.009196  Progress: 81.75%  Words/thread/sec: 21.44k  Alpha: 0.009125  Progress: 82.01%  Words/thread/sec: 21.41k  Alpha: 0.008993  Progress: 82.15%  Words/thread/sec: 21.40k  Alpha: 0.008925  Progress: 82.29%  Words/thread/sec: 21.43k  Alpha: 0.008854  Progress: 82.44%  Words/thread/sec: 21.46k  Alpha: 0.008781  Progress: 82.59%  Words/thread/sec: 21.41k  Alpha: 0.008705  Progress: 82.72%  Words/thread/sec: 21.41k  Alpha: 0.008641  Progress: 82.86%  Words/thread/sec: 21.43k  Alpha: 0.008569  Progress: 83.01%  Words/thread/sec: 21.46k  Alpha: 0.008495  Progress: 83.15%  Words/thread/sec: 21.40k  Alpha: 0.008423  Progress: 83.30%  Words/thread/sec: 21.41k  Alpha: 0.008351  Progress: 83.45%  Words/thread/sec: 21.43k  Alpha: 0.008276  Progress: 83.59%  Words/thread/sec: 21.45k  Alpha: 0.008205  Progress: 83.73%  Words/thread/sec: 21.40k  Alpha: 0.008134  Progress: 83.88%  Words/thread/sec: 21.43k  Alpha: 0.008061  Progress: 84.02%  Words/thread/sec: 21.42k  Alpha: 0.007990  Progress: 84.17%  Words/thread/sec: 21.45k  Alpha: 0.007914  Progress: 84.31%  Words/thread/sec: 21.41k  Alpha: 0.007845  Progress: 84.45%  Words/thread/sec: 21.43k  Alpha: 0.007773  Progress: 84.60%  Words/thread/sec: 21.42k  Alpha: 0.007699  Progress: 84.75%  Words/thread/sec: 21.45k  Alpha: 0.007625  Progress: 84.99%  Words/thread/sec: 21.42k  Alpha: 0.007504  Progress: 85.14%  Words/thread/sec: 21.40k  Alpha: 0.007432  Progress: 85.27%  Words/thread/sec: 21.43k  Alpha: 0.007363  Progress: 85.42%  Words/thread/sec: 21.47k  Alpha: 0.007290  Progress: 85.56%  Words/thread/sec: 21.42k  Alpha: 0.007218  Progress: 85.70%  Words/thread/sec: 21.40k  Alpha: 0.007149  Progress: 85.85%  Words/thread/sec: 21.43k  Alpha: 0.007075  Progress: 86.00%  Words/thread/sec: 21.46k  Alpha: 0.006999  Progress: 86.15%  Words/thread/sec: 21.41k  Alpha: 0.006925  Progress: 86.30%  Words/thread/sec: 21.40k  Alpha: 0.006852  Progress: 86.45%  Words/thread/sec: 21.43k  Alpha: 0.006777  Progress: 86.59%  Words/thread/sec: 21.46k  Alpha: 0.006704  Progress: 86.74%  Words/thread/sec: 21.41k  Alpha: 0.006631  Progress: 86.88%  Words/thread/sec: 21.40k  Alpha: 0.006560  Progress: 87.03%  Words/thread/sec: 21.43k  Alpha: 0.006486  Progress: 87.17%  Words/thread/sec: 21.46k  Alpha: 0.006416  Progress: 87.46%  Words/thread/sec: 21.39k  Alpha: 0.006270  Progress: 87.61%  Words/thread/sec: 21.43k  Alpha: 0.006196  Progress: 87.75%  Words/thread/sec: 21.46k  Alpha: 0.006125  Progress: 87.89%  Words/thread/sec: 21.44k  Alpha: 0.006054  Progress: 88.04%  Words/thread/sec: 21.39k  Alpha: 0.005978  Progress: 88.19%  Words/thread/sec: 21.43k  Alpha: 0.005906  Progress: 88.33%  Words/thread/sec: 21.46k  Alpha: 0.005834  Progress: 88.47%  Words/thread/sec: 21.44k  Alpha: 0.005763  Progress: 88.72%  Words/thread/sec: 21.41k  Alpha: 0.005642  Progress: 88.86%  Words/thread/sec: 21.44k  Alpha: 0.005570  Progress: 89.01%  Words/thread/sec: 21.43k  Alpha: 0.005496  Progress: 89.14%  Words/thread/sec: 21.44k  Alpha: 0.005429  Progress: 89.29%  Words/thread/sec: 21.41k  Alpha: 0.005354  Progress: 89.44%  Words/thread/sec: 21.44k  Alpha: 0.005278  Progress: 89.59%  Words/thread/sec: 21.42k  Alpha: 0.005204  Progress: 89.74%  Words/thread/sec: 21.44k  Alpha: 0.005131  Progress: 89.88%  Words/thread/sec: 21.41k  Alpha: 0.005059  Progress: 90.03%  Words/thread/sec: 21.44k  Alpha: 0.004985  Progress: 90.17%  Words/thread/sec: 21.42k  Alpha: 0.004914  Progress: 90.32%  Words/thread/sec: 21.44k  Alpha: 0.004838  Progress: 90.48%  Words/thread/sec: 21.43k  Alpha: 0.004761  Progress: 90.62%  Words/thread/sec: 21.44k  Alpha: 0.004691  Progress: 90.77%  Words/thread/sec: 21.42k  Alpha: 0.004616  Progress: 90.91%  Words/thread/sec: 21.44k  Alpha: 0.004545  Progress: 91.04%  Words/thread/sec: 21.44k  Alpha: 0.004478  Progress: 91.19%  Words/thread/sec: 21.44k  Alpha: 0.004406  Progress: 91.40%  Words/thread/sec: 21.43k  Alpha: 0.004299  Progress: 91.55%  Words/thread/sec: 21.45k  Alpha: 0.004224  Progress: 91.70%  Words/thread/sec: 21.42k  Alpha: 0.004150  Progress: 91.84%  Words/thread/sec: 21.45k  Alpha: 0.004081  Progress: 91.98%  Words/thread/sec: 21.43k  Alpha: 0.004009  Progress: 92.12%  Words/thread/sec: 21.45k  Alpha: 0.003938  Progress: 92.27%  Words/thread/sec: 21.42k  Alpha: 0.003866  Progress: 92.42%  Words/thread/sec: 21.44k  Alpha: 0.003791  Progress: 92.57%  Words/thread/sec: 21.43k  Alpha: 0.003715  Progress: 92.71%  Words/thread/sec: 21.44k  Alpha: 0.003646  Progress: 92.85%  Words/thread/sec: 21.41k  Alpha: 0.003573  Progress: 93.01%  Words/thread/sec: 21.44k  Alpha: 0.003497  Progress: 93.15%  Words/thread/sec: 21.42k  Alpha: 0.003425  Progress: 93.30%  Words/thread/sec: 21.44k  Alpha: 0.003352  Progress: 93.44%  Words/thread/sec: 21.41k  Alpha: 0.003278  Progress: 93.59%  Words/thread/sec: 21.44k  Alpha: 0.003204  Progress: 93.73%  Words/thread/sec: 21.42k  Alpha: 0.003135  Progress: 93.95%  Words/thread/sec: 21.46k  Alpha: 0.003026  Progress: 94.16%  Words/thread/sec: 21.44k  Alpha: 0.002918  Progress: 94.31%  Words/thread/sec: 21.43k  Alpha: 0.002844  Progress: 94.46%  Words/thread/sec: 21.44k  Alpha: 0.002770  Progress: 94.60%  Words/thread/sec: 21.44k  Alpha: 0.002699  Progress: 94.74%  Words/thread/sec: 21.43k  Alpha: 0.002628  Progress: 94.89%  Words/thread/sec: 21.43k  Alpha: 0.002553  Progress: 95.04%  Words/thread/sec: 21.43k  Alpha: 0.002481  Progress: 95.18%  Words/thread/sec: 21.44k  Alpha: 0.002410  Progress: 95.32%  Words/thread/sec: 21.43k  Alpha: 0.002339  Progress: 95.56%  Words/thread/sec: 21.45k  Alpha: 0.002218  Progress: 95.71%  Words/thread/sec: 21.42k  Alpha: 0.002145  Progress: 95.85%  Words/thread/sec: 21.42k  Alpha: 0.002145  Progress: 96.00%  Words/thread/sec: 21.45k  Alpha: 0.002001  Progress: 96.15%  Words/thread/sec: 21.45k  Alpha: 0.001926  Progress: 96.30%  Words/thread/sec: 21.42k  Alpha: 0.001852  Progress: 96.44%  Words/thread/sec: 21.42k  Alpha: 0.001779  Progress: 96.59%  Words/thread/sec: 21.45k  Alpha: 0.001706  Progress: 96.73%  Words/thread/sec: 21.44k  Alpha: 0.001635  Progress: 96.87%  Words/thread/sec: 21.42k  Alpha: 0.001564  Progress: 97.03%  Words/thread/sec: 21.44k  Alpha: 0.001487  Progress: 97.18%  Words/thread/sec: 21.45k  Alpha: 0.001412  Progress: 97.32%  Words/thread/sec: 21.44k  Alpha: 0.001342  Progress: 97.45%  Words/thread/sec: 21.42k  Alpha: 0.001276  Progress: 97.60%  Words/thread/sec: 21.45k  Alpha: 0.001200  Progress: 97.74%  Words/thread/sec: 21.44k  Alpha: 0.001129  Progress: 97.96%  Words/thread/sec: 21.46k  Alpha: 0.001022  Progress: 98.11%  Words/thread/sec: 21.45k  Alpha: 0.000947  Progress: 98.25%  Words/thread/sec: 21.45k  Alpha: 0.000874  Progress: 98.40%  Words/thread/sec: 21.46k  Alpha: 0.000800  Progress: 98.54%  Words/thread/sec: 21.45k  Alpha: 0.000728  Progress: 98.69%  Words/thread/sec: 21.45k  Alpha: 0.000657  Progress: 98.83%  Words/thread/sec: 21.46k  Alpha: 0.000585  Progress: 98.98%  Words/thread/sec: 21.45k  Alpha: 0.000509  Progress: 99.12%  Words/thread/sec: 21.45k  Alpha: 0.000439  Progress: 99.27%  Words/thread/sec: 21.46k  Alpha: 0.000366  Progress: 99.41%  Words/thread/sec: 21.45k  Alpha: 0.000294  Progress: 99.56%  Words/thread/sec: 21.45k  Alpha: 0.000220  Progress: 99.71%  Words/thread/sec: 21.46k  Alpha: 0.000147  Progress: 99.85%  Words/thread/sec: 21.45k  Alpha: 0.000077  Progress: 100.06%  Words/thread/sec: 21.48k  Alpha: 0.000005  Progress: 100.28%  Words/thread/sec: 21.49k  Alpha: 0.000005  Progress: 100.43%  Words/thread/sec: 21.49k  # started on Wed Mar  3 10:44:24 2021


 Performance counter stats for 'system wide':

S0-C0           1          99,314.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,911      context-switches          #    0.090 K/sec                  
S0-C0           1                474      cpu-migrations            #    0.005 K/sec                  
S0-C0           1                  6      page-faults               #    0.000 K/sec                  
S0-C0           1      1,854,219,246      cycles                    #    0.019 GHz                    
S0-C0           1      3,069,603,560      instructions              #    1.66  insn per cycle         
S0-C0           1      1,283,129,832      branches                  #   12.920 M/sec                  
S0-C0           1         80,429,193      branch-misses             #    6.27% of all branches        
S0-C1           1          99,314.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,337      context-switches          #    0.054 K/sec                  
S0-C1           1                471      cpu-migrations            #    0.005 K/sec                  
S0-C1           1            132,025      page-faults               #    0.001 M/sec                  
S0-C1           1        875,494,397      cycles                    #    0.009 GHz                    
S0-C1           1        472,452,681      instructions              #    0.54  insn per cycle         
S0-C1           1      1,558,920,394      branches                  #   15.697 M/sec                  
S0-C1           1         86,434,236      branch-misses             #    5.54% of all branches        
S0-C2           1          99,314.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             12,016      context-switches          #    0.121 K/sec                  
S0-C2           1                483      cpu-migrations            #    0.005 K/sec                  
S0-C2           1                  7      page-faults               #    0.000 K/sec                  
S0-C2           1        225,971,516      cycles                    #    0.002 GHz                    
S0-C2           1      2,499,615,407      instructions              #   11.06  insn per cycle         
S0-C2           1      1,268,395,730      branches                  #   12.771 M/sec                  
S0-C2           1         79,252,888      branch-misses             #    6.25% of all branches        
S0-C3           1          99,314.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,569      context-switches          #    0.056 K/sec                  
S0-C3           1                487      cpu-migrations            #    0.005 K/sec                  
S0-C3           1                 14      page-faults               #    0.000 K/sec                  
S0-C3           1      1,093,112,445      cycles                    #    0.011 GHz                    
S0-C3           1      1,373,451,826      instructions              #    1.26  insn per cycle         
S0-C3           1      1,232,053,607      branches                  #   12.406 M/sec                  
S0-C3           1         76,034,189      branch-misses             #    6.17% of all branches        

      99.315506657 seconds time elapsed

================================================================================
perf stat -o sqlite_4_threads.txt  --per-core -a taskset -c 0-3 ./sqlite_benchmark 4
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index......................    0.095s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.095s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.097s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.097s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.144s
 120 - 13000 unordered INSERTS with one index/PK...................    0.145s
 120 - 13000 unordered INSERTS with one index/PK...................    0.145s
 120 - 13000 unordered INSERTS with one index/PK...................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.194s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.195s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.196s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.196s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.207s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.206s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.201s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.207s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.328s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.337s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.337s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.333s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.173s
 150 - CREATE INDEX five times.....................................    0.176s
 150 - CREATE INDEX five times.....................................    0.175s
 150 - CREATE INDEX five times.....................................    0.176s
 150 - CREATE INDEX five times.....................................    0.219s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.218s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.219s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.220s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.108s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.107s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.106s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.106s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.106s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.106s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.224s
 180 - 13000 INSERTS with three indexes............................    0.225s
 180 - 13000 INSERTS with three indexes............................    0.227s
 180 - 13000 INSERTS with three indexes............................    0.228s
 180 - 13000 INSERTS with three indexes............................    0.246s
 190 - DELETE and REFILL one table.................................    0.249s
 190 - DELETE and REFILL one table.................................    0.250s
 190 - DELETE and REFILL one table.................................    0.251s
 190 - DELETE and REFILL one table.................................    0.253s
 200 - VACUUM......................................................    0.256s
 200 - VACUUM......................................................    0.256s
 200 - VACUUM......................................................    0.257s
 200 - VACUUM......................................................    0.373s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.009s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.368s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.370s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.370s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.090s
 240 - 13000 UPDATES of individual rows............................    0.089s
 240 - 13000 UPDATES of individual rows............................    0.089s
 240 - 13000 UPDATES of individual rows............................    0.089s
 240 - 13000 UPDATES of individual rows............................    0.154s
 250 - One big UPDATE of the whole 13000-row table.................    0.155s
 250 - One big UPDATE of the whole 13000-row table.................    0.155s
 250 - One big UPDATE of the whole 13000-row table.................    0.157s
 250 - One big UPDATE of the whole 13000-row table.................    0.043s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.043s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.043s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.045s
 260 - Query added column after filling............................    0.007s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.222s
 280 - 13000 DELETEs of individual rows............................    0.220s
 280 - 13000 DELETEs of individual rows............................    0.224s
 280 - 13000 DELETEs of individual rows............................    0.229s
 280 - 13000 DELETEs of individual rows............................    0.204s
 290 - Refill two 13000-row tables using REPLACE...................    0.202s
 290 - Refill two 13000-row tables using REPLACE...................    0.203s
 290 - Refill two 13000-row tables using REPLACE...................    0.209s
 290 - Refill two 13000-row tables using REPLACE...................    0.604s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.606s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.612s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.611s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.278s
 310 - 2600 four-ways joins........................................    0.283s
 310 - 2600 four-ways joins........................................    0.285s
 310 - 2600 four-ways joins........................................    0.286s
 310 - 2600 four-ways joins........................................    0.479s
 320 - subquery in result set......................................    0.479s
 320 - subquery in result set......................................    0.480s
 320 - subquery in result set......................................    0.472s
 320 - subquery in result set......................................    0.888s
 400 - 26000 REPLACE ops on an IPK.................................    0.885s
 400 - 26000 REPLACE ops on an IPK.................................    0.912s
 400 - 26000 REPLACE ops on an IPK.................................    0.891s
 400 - 26000 REPLACE ops on an IPK.................................    0.326s
 410 - 26000 SELECTS on an IPK.....................................    0.321s
 410 - 26000 SELECTS on an IPK.....................................    0.320s
 410 - 26000 SELECTS on an IPK.....................................    0.328s
 410 - 26000 SELECTS on an IPK.....................................    0.207s
 500 - 26000 REPLACE on TEXT PK....................................    0.210s
 500 - 26000 REPLACE on TEXT PK....................................    0.209s
 500 - 26000 REPLACE on TEXT PK....................................    0.209s
 500 - 26000 REPLACE on TEXT PK....................................    0.329s
 510 - 26000 SELECTS on a TEXT PK..................................    0.328s
 510 - 26000 SELECTS on a TEXT PK..................................    0.325s
 510 - 26000 SELECTS on a TEXT PK..................................    0.327s
 510 - 26000 SELECTS on a TEXT PK..................................    0.337s
 520 - 26000 SELECT DISTINCT.......................................    0.337s
 520 - 26000 SELECT DISTINCT.......................................    0.341s
 520 - 26000 SELECT DISTINCT.......................................    0.338s
 520 - 26000 SELECT DISTINCT.......................................    0.229s
 980 - PRAGMA integrity_check......................................    0.236s
 980 - PRAGMA integrity_check......................................    0.236s
 980 - PRAGMA integrity_check......................................    0.239s
 980 - PRAGMA integrity_check......................................    0.466s
 990 - ANALYZE.....................................................    0.464s
 990 - ANALYZE.....................................................    0.464s
 990 - ANALYZE.....................................................    0.466s
 990 - ANALYZE.....................................................    0.072s
       TOTAL.......................................................    7.725s
   0.072s
       TOTAL.......................................................    7.760s
   0.072s
       TOTAL.......................................................    7.763s
   0.073s
       TOTAL.......................................................    7.789s
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
# started on Wed Mar  3 10:46:15 2021


 Performance counter stats for 'system wide':

S0-C0           1           7,841.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1                947      context-switches          #    0.121 K/sec                  
S0-C0           1                103      cpu-migrations            #    0.013 K/sec                  
S0-C0           1              1,817      page-faults               #    0.232 K/sec                  
S0-C0           1      1,593,670,384      cycles                    #    0.203 GHz                    
S0-C0           1        608,005,875      instructions              #    0.38  insn per cycle         
S0-C0           1        607,927,182      branches                  #   77.525 M/sec                  
S0-C0           1         86,252,229      branch-misses             #   14.19% of all branches        
S0-C1           1           7,841.69 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                698      context-switches          #    0.089 K/sec                  
S0-C1           1                100      cpu-migrations            #    0.013 K/sec                  
S0-C1           1              1,818      page-faults               #    0.232 K/sec                  
S0-C1           1      1,544,063,954      cycles                    #    0.197 GHz                    
S0-C1           1        613,065,634      instructions              #    0.40  insn per cycle         
S0-C1           1        608,488,195      branches                  #   77.597 M/sec                  
S0-C1           1         86,025,311      branch-misses             #   14.14% of all branches        
S0-C2           1           7,841.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,191      context-switches          #    0.152 K/sec                  
S0-C2           1                108      cpu-migrations            #    0.014 K/sec                  
S0-C2           1              1,971      page-faults               #    0.251 K/sec                  
S0-C2           1      1,518,345,109      cycles                    #    0.194 GHz                    
S0-C2           1        608,641,981      instructions              #    0.40  insn per cycle         
S0-C2           1        608,012,991      branches                  #   77.536 M/sec                  
S0-C2           1         86,543,320      branch-misses             #   14.23% of all branches        
S0-C3           1           7,841.67 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                664      context-switches          #    0.085 K/sec                  
S0-C3           1                 95      cpu-migrations            #    0.012 K/sec                  
S0-C3           1              1,855      page-faults               #    0.237 K/sec                  
S0-C3           1      1,547,121,989      cycles                    #    0.197 GHz                    
S0-C3           1        598,637,037      instructions              #    0.39  insn per cycle         
S0-C3           1        606,659,973      branches                  #   77.364 M/sec                  
S0-C3           1         85,674,312      branch-misses             #   14.12% of all branches        

       7.842136591 seconds time elapsed

================================================================================
perf stat -o go_word2vec_4_threads.txt  --per-core -a taskset -c 0-3 ./go_word2vec.sh 4
/home/mendel/sd_card/i-benchmarks/golang/bin
Save trained vectors to example/word_vectors_sg.txt
# started on Wed Mar  3 10:46:23 2021


 Performance counter stats for 'system wide':

S0-C0           1          36,801.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,310      context-switches          #    0.226 K/sec                  
S0-C0           1                 55      cpu-migrations            #    0.001 K/sec                  
S0-C0           1             12,248      page-faults               #    0.333 K/sec                  
S0-C0           1        304,763,396      cycles                    #    0.008 GHz                    
S0-C0           1      4,033,355,467      instructions              #   13.23  insn per cycle         
S0-C0           1      2,332,051,308      branches                  #   63.368 M/sec                  
S0-C0           1         73,570,009      branch-misses             #    3.15% of all branches        
S0-C1           1          36,801.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              8,065      context-switches          #    0.219 K/sec                  
S0-C1           1                 44      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                395      page-faults               #    0.011 K/sec                  
S0-C1           1      1,588,548,924      cycles                    #    0.043 GHz                    
S0-C1           1      3,042,795,303      instructions              #    1.92  insn per cycle         
S0-C1           1      1,859,968,971      branches                  #   50.540 M/sec                  
S0-C1           1         32,330,522      branch-misses             #    1.74% of all branches        
S0-C2           1          36,801.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              6,149      context-switches          #    0.167 K/sec                  
S0-C2           1                 44      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              9,261      page-faults               #    0.252 K/sec                  
S0-C2           1      2,584,145,151      cycles                    #    0.070 GHz                    
S0-C2           1      3,670,892,605      instructions              #    1.42  insn per cycle         
S0-C2           1      1,913,597,249      branches                  #   51.998 M/sec                  
S0-C2           1         32,479,424      branch-misses             #    1.70% of all branches        
S0-C3           1          36,801.68 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,958      context-switches          #    0.135 K/sec                  
S0-C3           1                 29      cpu-migrations            #    0.001 K/sec                  
S0-C3           1             12,112      page-faults               #    0.329 K/sec                  
S0-C3           1        675,331,201      cycles                    #    0.018 GHz                    
S0-C3           1      1,215,507,769      instructions              #    1.80  insn per cycle         
S0-C3           1      2,081,916,586      branches                  #   56.571 M/sec                  
S0-C3           1         50,965,828      branch-misses             #    2.45% of all branches        

      36.802164730 seconds time elapsed

================================================================================
================================================================================
Running run_forest_importances_faces test
perf stat -o ../output/run_forest_importances_faces.log --per-core -a taskset -c 0-3 ./run_forest_importances_faces.sh -n 4

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.303s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.333s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.314s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.606s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 10:47:00 2021


 Performance counter stats for 'system wide':

S0-C0           1          21,823.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              4,658      context-switches          #    0.213 K/sec                  
S0-C0           1                 55      cpu-migrations            #    0.003 K/sec                  
S0-C0           1             42,183      page-faults               #    0.002 M/sec                  
S0-C0           1      2,589,458,359      cycles                    #    0.119 GHz                    
S0-C0           1      2,392,692,710      instructions              #    0.92  insn per cycle         
S0-C0           1        738,619,483      branches                  #   33.845 M/sec                  
S0-C0           1        184,117,727      branch-misses             #   24.93% of all branches        
S0-C1           1          21,823.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,543      context-switches          #    0.071 K/sec                  
S0-C1           1                 64      cpu-migrations            #    0.003 K/sec                  
S0-C1           1             42,165      page-faults               #    0.002 M/sec                  
S0-C1           1      2,207,844,608      cycles                    #    0.101 GHz                    
S0-C1           1      2,406,906,325      instructions              #    1.09  insn per cycle         
S0-C1           1        739,018,804      branches                  #   33.864 M/sec                  
S0-C1           1        184,134,206      branch-misses             #   24.92% of all branches        
S0-C2           1          21,823.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,929      context-switches          #    0.088 K/sec                  
S0-C2           1                 63      cpu-migrations            #    0.003 K/sec                  
S0-C2           1             41,807      page-faults               #    0.002 M/sec                  
S0-C2           1      2,204,782,855      cycles                    #    0.101 GHz                    
S0-C2           1      2,397,011,306      instructions              #    1.09  insn per cycle         
S0-C2           1        738,308,054      branches                  #   33.831 M/sec                  
S0-C2           1        183,280,534      branch-misses             #   24.82% of all branches        
S0-C3           1          21,823.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,015      context-switches          #    0.092 K/sec                  
S0-C3           1                 74      cpu-migrations            #    0.003 K/sec                  
S0-C3           1             42,058      page-faults               #    0.002 M/sec                  
S0-C3           1      2,247,646,753      cycles                    #    0.103 GHz                    
S0-C3           1      2,408,867,369      instructions              #    1.07  insn per cycle         
S0-C3           1        740,846,101      branches                  #   33.947 M/sec                  
S0-C3           1        183,438,236      branch-misses             #   24.76% of all branches        

      21.823844258 seconds time elapsed

================================================================================
Running run_multioutput_face_completion test
perf stat -o ../output/run_multioutput_face_completion.log --per-core -a taskset -c 0-3 ./run_multioutput_face_completion.sh -n 4

==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.


/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 10:47:22 2021


 Performance counter stats for 'system wide':

S0-C0           1          49,861.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             14,591      context-switches          #    0.293 K/sec                  
S0-C0           1                105      cpu-migrations            #    0.002 K/sec                  
S0-C0           1            125,405      page-faults               #    0.003 M/sec                  
S0-C0           1        366,747,702      cycles                    #    0.007 GHz                    
S0-C0           1      3,023,692,940      instructions              #    8.24  insn per cycle         
S0-C0           1      1,473,170,377      branches                  #   29.545 M/sec                  
S0-C0           1        122,702,819      branch-misses             #    8.33% of all branches        
S0-C1           1          49,861.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,859      context-switches          #    0.057 K/sec                  
S0-C1           1                123      cpu-migrations            #    0.002 K/sec                  
S0-C1           1            118,086      page-faults               #    0.002 M/sec                  
S0-C1           1      3,987,410,805      cycles                    #    0.080 GHz                    
S0-C1           1      2,973,213,162      instructions              #    0.75  insn per cycle         
S0-C1           1      1,473,075,193      branches                  #   29.543 M/sec                  
S0-C1           1        120,334,563      branch-misses             #    8.17% of all branches        
S0-C2           1          49,861.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,064      context-switches          #    0.082 K/sec                  
S0-C2           1                108      cpu-migrations            #    0.002 K/sec                  
S0-C2           1            119,911      page-faults               #    0.002 M/sec                  
S0-C2           1      3,931,893,729      cycles                    #    0.079 GHz                    
S0-C2           1      2,993,213,736      instructions              #    0.76  insn per cycle         
S0-C2           1      1,466,309,355      branches                  #   29.408 M/sec                  
S0-C2           1        121,075,949      branch-misses             #    8.26% of all branches        
S0-C3           1          49,861.64 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,821      context-switches          #    0.077 K/sec                  
S0-C3           1                129      cpu-migrations            #    0.003 K/sec                  
S0-C3           1            126,667      page-faults               #    0.003 M/sec                  
S0-C3           1      3,866,754,506      cycles                    #    0.078 GHz                    
S0-C3           1      2,941,056,071      instructions              #    0.76  insn per cycle         
S0-C3           1      1,454,614,682      branches                  #   29.173 M/sec                  
S0-C3           1        117,796,846      branch-misses             #    8.10% of all branches        

      49.862246488 seconds time elapsed

================================================================================
Running run_logistic_path test
perf stat -o ../output/run_logistic_path.log --per-core -a taskset -c 0-3 ./run_logistic_path.sh -n 4

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 33.459s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 33.329s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 33.440s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 35.108s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 10:48:12 2021


 Performance counter stats for 'system wide':

S0-C0           1          42,568.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              5,705      context-switches          #    0.134 K/sec                  
S0-C0           1                 88      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             26,745      page-faults               #    0.628 K/sec                  
S0-C0           1      1,960,857,130      cycles                    #    0.046 GHz                    
S0-C0           1      4,250,508,076      instructions              #    2.17  insn per cycle         
S0-C0           1      2,635,446,426      branches                  #   61.910 M/sec                  
S0-C0           1        488,193,187      branch-misses             #   18.52% of all branches        
S0-C1           1          42,568.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,767      context-switches          #    0.088 K/sec                  
S0-C1           1                 86      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             26,000      page-faults               #    0.611 K/sec                  
S0-C1           1      3,646,875,435      cycles                    #    0.086 GHz                    
S0-C1           1      4,166,885,043      instructions              #    1.14  insn per cycle         
S0-C1           1      2,624,934,012      branches                  #   61.663 M/sec                  
S0-C1           1        481,027,249      branch-misses             #   18.33% of all branches        
S0-C2           1          42,568.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,814      context-switches          #    0.090 K/sec                  
S0-C2           1                 84      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             26,907      page-faults               #    0.632 K/sec                  
S0-C2           1      1,747,427,741      cycles                    #    0.041 GHz                    
S0-C2           1      4,186,778,498      instructions              #    2.40  insn per cycle         
S0-C2           1      2,627,404,788      branches                  #   61.721 M/sec                  
S0-C2           1        481,878,615      branch-misses             #   18.34% of all branches        
S0-C3           1          42,568.71 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,729      context-switches          #    0.111 K/sec                  
S0-C3           1                 78      cpu-migrations            #    0.002 K/sec                  
S0-C3           1             26,064      page-faults               #    0.612 K/sec                  
S0-C3           1      1,840,887,535      cycles                    #    0.043 GHz                    
S0-C3           1      4,234,941,310      instructions              #    2.30  insn per cycle         
S0-C3           1      2,633,676,197      branches                  #   61.869 M/sec                  
S0-C3           1        492,745,620      branch-misses             #   18.71% of all branches        

      42.569232326 seconds time elapsed

================================================================================
Running run_plot_svm_nonlinear test
perf stat -o ../output/run_plot_svm_nonlinear.log --per-core -a taskset -c 0-3 ./run_plot_svm_nonlinear.sh -n 4

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 10:48:54 2021


 Performance counter stats for 'system wide':

S0-C0           1          14,872.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              2,159      context-switches          #    0.145 K/sec                  
S0-C0           1                 63      cpu-migrations            #    0.004 K/sec                  
S0-C0           1             30,766      page-faults               #    0.002 M/sec                  
S0-C0           1      2,135,372,304      cycles                    #    0.144 GHz                    
S0-C0           1         99,370,062      instructions              #    0.05  insn per cycle         
S0-C0           1        905,698,567      branches                  #   60.898 M/sec                  
S0-C0           1         79,235,566      branch-misses             #    8.75% of all branches        
S0-C1           1          14,872.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,375      context-switches          #    0.092 K/sec                  
S0-C1           1                 58      cpu-migrations            #    0.004 K/sec                  
S0-C1           1             31,391      page-faults               #    0.002 M/sec                  
S0-C1           1      2,073,864,348      cycles                    #    0.139 GHz                    
S0-C1           1        137,673,959      instructions              #    0.07  insn per cycle         
S0-C1           1        910,629,152      branches                  #   61.230 M/sec                  
S0-C1           1         79,336,777      branch-misses             #    8.71% of all branches        
S0-C2           1          14,872.35 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,549      context-switches          #    0.104 K/sec                  
S0-C2           1                 74      cpu-migrations            #    0.005 K/sec                  
S0-C2           1             30,423      page-faults               #    0.002 M/sec                  
S0-C2           1      2,045,001,955      cycles                    #    0.138 GHz                    
S0-C2           1         65,204,022      instructions              #    0.03  insn per cycle         
S0-C2           1        902,102,082      branches                  #   60.656 M/sec                  
S0-C2           1         78,731,554      branch-misses             #    8.73% of all branches        
S0-C3           1          14,872.35 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,023      context-switches          #    0.136 K/sec                  
S0-C3           1                 76      cpu-migrations            #    0.005 K/sec                  
S0-C3           1             30,718      page-faults               #    0.002 M/sec                  
S0-C3           1      2,001,147,101      cycles                    #    0.135 GHz                    
S0-C3           1        106,441,227      instructions              #    0.05  insn per cycle         
S0-C3           1        907,008,365      branches                  #   60.986 M/sec                  
S0-C3           1         79,152,039      branch-misses             #    8.73% of all branches        

      14.872837390 seconds time elapsed

================================================================================
Running run_plot_theilsen test
perf stat -o ../output/run_plot_theilsen.log --per-core -a taskset -c 0-3 ./run_plot_theilsen.sh -n 4

====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 10:49:09 2021


 Performance counter stats for 'system wide':

S0-C0           1          35,174.00 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              3,906      context-switches          #    0.111 K/sec                  
S0-C0           1                 87      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             46,229      page-faults               #    0.001 M/sec                  
S0-C0           1      2,673,572,537      cycles                    #    0.076 GHz                    
S0-C0           1        968,343,562      instructions              #    0.36  insn per cycle         
S0-C0           1      1,129,770,997      branches                  #   32.119 M/sec                  
S0-C0           1        330,454,110      branch-misses             #   29.25% of all branches        
S0-C1           1          35,174.00 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,421      context-switches          #    0.097 K/sec                  
S0-C1           1                 70      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             46,520      page-faults               #    0.001 M/sec                  
S0-C1           1      2,593,270,937      cycles                    #    0.074 GHz                    
S0-C1           1        989,760,914      instructions              #    0.38  insn per cycle         
S0-C1           1      1,131,842,413      branches                  #   32.178 M/sec                  
S0-C1           1        328,471,383      branch-misses             #   29.02% of all branches        
S0-C2           1          35,174.00 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,559      context-switches          #    0.073 K/sec                  
S0-C2           1                 70      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             46,938      page-faults               #    0.001 M/sec                  
S0-C2           1      2,623,229,870      cycles                    #    0.075 GHz                    
S0-C2           1      1,060,154,645      instructions              #    0.40  insn per cycle         
S0-C2           1      1,139,448,102      branches                  #   32.395 M/sec                  
S0-C2           1        330,625,094      branch-misses             #   29.02% of all branches        
S0-C3           1          35,174.00 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,399      context-switches          #    0.068 K/sec                  
S0-C3           1                 68      cpu-migrations            #    0.002 K/sec                  
S0-C3           1             47,307      page-faults               #    0.001 M/sec                  
S0-C3           1      2,745,692,700      cycles                    #    0.078 GHz                    
S0-C3           1      1,090,542,216      instructions              #    0.40  insn per cycle         
S0-C3           1      1,143,091,775      branches                  #   32.498 M/sec                  
S0-C3           1        332,042,057      branch-misses             #   29.05% of all branches        

      35.174520834 seconds time elapsed

================================================================================
================================================================================
perf stat -o 099_go.log --per-core -a taskset -c 0-3 ./spec95_099_go.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 10:49:45 2021


 Performance counter stats for 'system wide':

S0-C0           1          49,407.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,251      context-switches          #    0.167 K/sec                  
S0-C0           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                745      page-faults               #    0.015 K/sec                  
S0-C0           1      3,034,084,134      cycles                    #    0.061 GHz                    
S0-C0           1      1,372,636,651      instructions              #    0.45  insn per cycle         
S0-C0           1      2,635,366,112      branches                  #   53.340 M/sec                  
S0-C0           1      1,081,608,612      branch-misses             #   41.04% of all branches        
S0-C1           1          49,407.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,223      context-switches          #    0.045 K/sec                  
S0-C1           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                309      page-faults               #    0.006 K/sec                  
S0-C1           1      2,969,284,532      cycles                    #    0.060 GHz                    
S0-C1           1      1,318,524,464      instructions              #    0.44  insn per cycle         
S0-C1           1      2,628,123,868      branches                  #   53.193 M/sec                  
S0-C1           1      1,079,405,563      branch-misses             #   41.07% of all branches        
S0-C2           1          49,407.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,547      context-switches          #    0.052 K/sec                  
S0-C2           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                411      page-faults               #    0.008 K/sec                  
S0-C2           1      3,218,459,807      cycles                    #    0.065 GHz                    
S0-C2           1      1,320,629,954      instructions              #    0.41  insn per cycle         
S0-C2           1      2,628,599,007      branches                  #   53.203 M/sec                  
S0-C2           1      1,079,474,608      branch-misses             #   41.07% of all branches        
S0-C3           1          49,407.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,640      context-switches          #    0.033 K/sec                  
S0-C3           1                  4      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                352      page-faults               #    0.007 K/sec                  
S0-C3           1      4,072,103,435      cycles                    #    0.082 GHz                    
S0-C3           1      1,315,322,796      instructions              #    0.32  insn per cycle         
S0-C3           1      2,627,717,692      branches                  #   53.185 M/sec                  
S0-C3           1      1,079,343,022      branch-misses             #   41.08% of all branches        

      49.407845048 seconds time elapsed

================================================================================
perf stat -o 101_tomcatv.log --per-core -a taskset -c 0-3 ./spec95_101_tomcatv.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 10:50:34 2021


 Performance counter stats for 'system wide':

S0-C0           1          75,770.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,441      context-switches          #    0.085 K/sec                  
S0-C0           1                 39      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              3,860      page-faults               #    0.051 K/sec                  
S0-C0           1      3,830,795,347      cycles                    #    0.051 GHz                    
S0-C0           1      3,190,523,164      instructions              #    0.83  insn per cycle         
S0-C0           1        846,484,802      branches                  #   11.172 M/sec                  
S0-C0           1         30,609,141      branch-misses             #    3.62% of all branches        
S0-C1           1          75,770.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,537      context-switches          #    0.047 K/sec                  
S0-C1           1                 30      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              3,994      page-faults               #    0.053 K/sec                  
S0-C1           1      3,896,357,109      cycles                    #    0.051 GHz                    
S0-C1           1      3,165,083,901      instructions              #    0.81  insn per cycle         
S0-C1           1        842,876,832      branches                  #   11.124 M/sec                  
S0-C1           1         29,806,240      branch-misses             #    3.54% of all branches        
S0-C2           1          75,770.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,068      context-switches          #    0.054 K/sec                  
S0-C2           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              4,037      page-faults               #    0.053 K/sec                  
S0-C2           1      3,341,805,301      cycles                    #    0.044 GHz                    
S0-C2           1      3,165,385,168      instructions              #    0.95  insn per cycle         
S0-C2           1        843,202,233      branches                  #   11.128 M/sec                  
S0-C2           1         29,620,793      branch-misses             #    3.51% of all branches        
S0-C3           1          75,770.17 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              8,132      context-switches          #    0.107 K/sec                  
S0-C3           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              3,783      page-faults               #    0.050 K/sec                  
S0-C3           1      3,985,398,156      cycles                    #    0.053 GHz                    
S0-C3           1      3,191,958,943      instructions              #    0.80  insn per cycle         
S0-C3           1        846,393,821      branches                  #   11.171 M/sec                  
S0-C3           1         30,432,220      branch-misses             #    3.60% of all branches        

      75.771092818 seconds time elapsed

================================================================================
perf stat -o 102_swim.log --per-core -a taskset -c 0-3 ./spec95_102_swim.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 10:51:50 2021


 Performance counter stats for 'system wide':

S0-C0           1          66,387.18 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             13,693      context-switches          #    0.206 K/sec                  
S0-C0           1                 33      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              3,778      page-faults               #    0.057 K/sec                  
S0-C0           1        378,563,026      cycles                    #    0.006 GHz                    
S0-C0           1      1,867,524,882      instructions              #    4.93  insn per cycle         
S0-C0           1        197,269,862      branches                  #    2.972 M/sec                  
S0-C0           1          6,534,055      branch-misses             #    3.31% of all branches        
S0-C1           1          66,387.18 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,049      context-switches          #    0.046 K/sec                  
S0-C1           1                 23      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              3,781      page-faults               #    0.057 K/sec                  
S0-C1           1      4,228,126,495      cycles                    #    0.064 GHz                    
S0-C1           1      1,757,328,757      instructions              #    0.42  insn per cycle         
S0-C1           1        181,980,337      branches                  #    2.741 M/sec                  
S0-C1           1          3,250,210      branch-misses             #    1.79% of all branches        
S0-C2           1          66,387.18 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,710      context-switches          #    0.056 K/sec                  
S0-C2           1                 22      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              4,038      page-faults               #    0.061 K/sec                  
S0-C2           1      4,183,478,013      cycles                    #    0.063 GHz                    
S0-C2           1      1,763,626,886      instructions              #    0.42  insn per cycle         
S0-C2           1        182,979,660      branches                  #    2.756 M/sec                  
S0-C2           1          3,355,918      branch-misses             #    1.83% of all branches        
S0-C3           1          66,387.18 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,300      context-switches          #    0.110 K/sec                  
S0-C3           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              3,986      page-faults               #    0.060 K/sec                  
S0-C3           1        163,877,543      cycles                    #    0.002 GHz                    
S0-C3           1      1,789,963,896      instructions              #   10.92  insn per cycle         
S0-C3           1        186,181,911      branches                  #    2.804 M/sec                  
S0-C3           1          4,124,718      branch-misses             #    2.22% of all branches        

      66.388108610 seconds time elapsed

================================================================================
perf stat -o 103_su2cor.log --per-core -a taskset -c 0-3 ./spec95_103_su2cor.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 10:52:56 2021


 Performance counter stats for 'system wide':

S0-C0           1         114,285.82 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             17,121      context-switches          #    0.150 K/sec                  
S0-C0           1                 20      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,339      page-faults               #    0.055 K/sec                  
S0-C0           1      2,082,719,819      cycles                    #    0.018 GHz                    
S0-C0           1      4,276,995,795      instructions              #    2.05  insn per cycle         
S0-C0           1      1,204,248,401      branches                  #   10.537 M/sec                  
S0-C0           1        109,617,211      branch-misses             #    9.10% of all branches        
S0-C1           1         114,285.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,105      context-switches          #    0.045 K/sec                  
S0-C1           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,365      page-faults               #    0.056 K/sec                  
S0-C1           1      2,427,400,997      cycles                    #    0.021 GHz                    
S0-C1           1      4,172,427,060      instructions              #    1.72  insn per cycle         
S0-C1           1      1,190,297,536      branches                  #   10.415 M/sec                  
S0-C1           1        106,623,620      branch-misses             #    8.96% of all branches        
S0-C2           1         114,285.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              6,133      context-switches          #    0.054 K/sec                  
S0-C2           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,122      page-faults               #    0.054 K/sec                  
S0-C2           1      2,516,121,697      cycles                    #    0.022 GHz                    
S0-C2           1      4,177,736,011      instructions              #    1.66  insn per cycle         
S0-C2           1      1,191,421,319      branches                  #   10.425 M/sec                  
S0-C2           1        107,567,262      branch-misses             #    9.03% of all branches        
S0-C3           1         114,285.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,555      context-switches          #    0.049 K/sec                  
S0-C3           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,116      page-faults               #    0.054 K/sec                  
S0-C3           1      2,432,070,305      cycles                    #    0.021 GHz                    
S0-C3           1      4,171,595,535      instructions              #    1.72  insn per cycle         
S0-C3           1      1,190,283,744      branches                  #   10.415 M/sec                  
S0-C3           1        106,822,872      branch-misses             #    8.97% of all branches        

     114.287185560 seconds time elapsed

================================================================================
perf stat -o 104_hydro2d.log --per-core -a taskset -c 0-3 ./spec95_104_hydro2d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 10:54:51 2021


 Performance counter stats for 'system wide':

S0-C0           1          92,149.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,220      context-switches          #    0.089 K/sec                  
S0-C0           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,500      page-faults               #    0.027 K/sec                  
S0-C0           1      3,561,348,240      cycles                    #    0.039 GHz                    
S0-C0           1      1,429,991,824      instructions              #    0.40  insn per cycle         
S0-C0           1      2,614,180,164      branches                  #   28.369 M/sec                  
S0-C0           1         20,665,141      branch-misses             #    0.79% of all branches        
S0-C1           1          92,149.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,134      context-switches          #    0.045 K/sec                  
S0-C1           1                 16      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,540      page-faults               #    0.028 K/sec                  
S0-C1           1      3,110,091,423      cycles                    #    0.034 GHz                    
S0-C1           1      1,384,992,209      instructions              #    0.45  insn per cycle         
S0-C1           1      2,607,981,281      branches                  #   28.302 M/sec                  
S0-C1           1         19,252,897      branch-misses             #    0.74% of all branches        
S0-C2           1          92,149.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              9,914      context-switches          #    0.108 K/sec                  
S0-C2           1                  5      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,344      page-faults               #    0.025 K/sec                  
S0-C2           1      3,804,630,049      cycles                    #    0.041 GHz                    
S0-C2           1      1,426,030,436      instructions              #    0.37  insn per cycle         
S0-C2           1      2,613,630,495      branches                  #   28.363 M/sec                  
S0-C2           1         20,341,728      branch-misses             #    0.78% of all branches        
S0-C3           1          92,149.63 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,443      context-switches          #    0.048 K/sec                  
S0-C3           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,446      page-faults               #    0.027 K/sec                  
S0-C3           1      3,319,999,293      cycles                    #    0.036 GHz                    
S0-C3           1      1,382,440,556      instructions              #    0.42  insn per cycle         
S0-C3           1      2,607,735,408      branches                  #   28.299 M/sec                  
S0-C3           1         19,233,666      branch-misses             #    0.74% of all branches        

      92.150687438 seconds time elapsed

================================================================================
perf stat -o 107_mgrid.log --per-core -a taskset -c 0-3 ./spec95_107_mgrid.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 10:56:23 2021


 Performance counter stats for 'system wide':

S0-C0           1          88,963.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             17,294      context-switches          #    0.194 K/sec                  
S0-C0           1                 39      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,143      page-faults               #    0.024 K/sec                  
S0-C0           1      3,959,030,893      cycles                    #    0.045 GHz                    
S0-C0           1        267,130,063      instructions              #    0.07  insn per cycle         
S0-C0           1        727,217,982      branches                  #    8.174 M/sec                  
S0-C0           1         38,157,718      branch-misses             #    5.25% of all branches        
S0-C1           1          88,963.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,887      context-switches          #    0.055 K/sec                  
S0-C1           1                 38      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,090      page-faults               #    0.023 K/sec                  
S0-C1           1      3,398,931,589      cycles                    #    0.038 GHz                    
S0-C1           1        144,866,348      instructions              #    0.04  insn per cycle         
S0-C1           1        710,188,922      branches                  #    7.983 M/sec                  
S0-C1           1         34,436,151      branch-misses             #    4.85% of all branches        
S0-C2           1          88,963.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              8,705      context-switches          #    0.098 K/sec                  
S0-C2           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,210      page-faults               #    0.025 K/sec                  
S0-C2           1      3,539,507,041      cycles                    #    0.040 GHz                    
S0-C2           1        178,954,420      instructions              #    0.05  insn per cycle         
S0-C2           1        714,830,563      branches                  #    8.035 M/sec                  
S0-C2           1         35,293,220      branch-misses             #    4.94% of all branches        
S0-C3           1          88,963.34 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,324      context-switches          #    0.049 K/sec                  
S0-C3           1                 12      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,195      page-faults               #    0.025 K/sec                  
S0-C3           1      3,478,587,239      cycles                    #    0.039 GHz                    
S0-C3           1        139,128,860      instructions              #    0.04  insn per cycle         
S0-C3           1        709,523,701      branches                  #    7.975 M/sec                  
S0-C3           1         34,261,084      branch-misses             #    4.83% of all branches        

      88.964331224 seconds time elapsed

================================================================================
perf stat -o 110_applu.log --per-core -a taskset -c 0-3 ./spec95_110_applu.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 10:57:52 2021


 Performance counter stats for 'system wide':

S0-C0           1          80,522.96 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             12,091      context-switches          #    0.150 K/sec                  
S0-C0           1                 14      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              7,695      page-faults               #    0.096 K/sec                  
S0-C0           1      1,582,145,632      cycles                    #    0.020 GHz                    
S0-C0           1        452,897,069      instructions              #    0.29  insn per cycle         
S0-C0           1        353,125,910      branches                  #    4.385 M/sec                  
S0-C0           1         19,902,947      branch-misses             #    5.64% of all branches        
S0-C1           1          80,522.96 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,904      context-switches          #    0.048 K/sec                  
S0-C1           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              7,549      page-faults               #    0.094 K/sec                  
S0-C1           1      1,561,992,392      cycles                    #    0.019 GHz                    
S0-C1           1        376,775,580      instructions              #    0.24  insn per cycle         
S0-C1           1        342,911,468      branches                  #    4.259 M/sec                  
S0-C1           1         17,640,019      branch-misses             #    5.14% of all branches        
S0-C2           1          80,522.96 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,177      context-switches          #    0.052 K/sec                  
S0-C2           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              7,780      page-faults               #    0.097 K/sec                  
S0-C2           1      1,565,414,783      cycles                    #    0.019 GHz                    
S0-C2           1        381,518,584      instructions              #    0.24  insn per cycle         
S0-C2           1        343,859,502      branches                  #    4.270 M/sec                  
S0-C2           1         17,719,945      branch-misses             #    5.15% of all branches        
S0-C3           1          80,522.96 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,824      context-switches          #    0.047 K/sec                  
S0-C3           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              7,607      page-faults               #    0.094 K/sec                  
S0-C3           1      1,550,649,549      cycles                    #    0.019 GHz                    
S0-C3           1        376,335,789      instructions              #    0.24  insn per cycle         
S0-C3           1        342,958,935      branches                  #    4.259 M/sec                  
S0-C3           1         17,678,284      branch-misses             #    5.15% of all branches        

      80.523849452 seconds time elapsed

================================================================================
perf stat -o 125_turb3d.log --per-core -a taskset -c 0-3 ./spec95_125_turb3d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 10:59:13 2021


 Performance counter stats for 'system wide':

S0-C0           1          94,195.13 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              9,236      context-switches          #    0.098 K/sec                  
S0-C0           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,780      page-faults               #    0.072 K/sec                  
S0-C0           1      2,172,881,547      cycles                    #    0.023 GHz                    
S0-C0           1      1,845,404,348      instructions              #    0.85  insn per cycle         
S0-C0           1      3,569,220,827      branches                  #   37.892 M/sec                  
S0-C0           1        290,847,641      branch-misses             #    8.15% of all branches        
S0-C1           1          94,195.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,580      context-switches          #    0.049 K/sec                  
S0-C1           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,538      page-faults               #    0.069 K/sec                  
S0-C1           1      1,701,167,189      cycles                    #    0.018 GHz                    
S0-C1           1      1,798,322,860      instructions              #    1.06  insn per cycle         
S0-C1           1      3,562,727,690      branches                  #   37.823 M/sec                  
S0-C1           1        286,851,061      branch-misses             #    8.05% of all branches        
S0-C2           1          94,195.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,688      context-switches          #    0.039 K/sec                  
S0-C2           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,584      page-faults               #    0.070 K/sec                  
S0-C2           1      1,644,138,473      cycles                    #    0.017 GHz                    
S0-C2           1      1,797,632,993      instructions              #    1.09  insn per cycle         
S0-C2           1      3,562,983,041      branches                  #   37.826 M/sec                  
S0-C2           1        286,805,821      branch-misses             #    8.05% of all branches        
S0-C3           1          94,195.12 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             10,695      context-switches          #    0.114 K/sec                  
S0-C3           1                  4      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,708      page-faults               #    0.071 K/sec                  
S0-C3           1      2,129,704,236      cycles                    #    0.023 GHz                    
S0-C3           1      1,845,729,736      instructions              #    0.87  insn per cycle         
S0-C3           1      3,568,909,549      branches                  #   37.888 M/sec                  
S0-C3           1        291,374,167      branch-misses             #    8.16% of all branches        

      94.196098484 seconds time elapsed

================================================================================
perf stat -o 126_gcc.log --per-core -a taskset -c 0-3 ./spec95_126_gcc.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:00:47 2021


 Performance counter stats for 'system wide':

S0-C0           1           7,214.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1                958      context-switches          #    0.133 K/sec                  
S0-C0           1                 12      cpu-migrations            #    0.002 K/sec                  
S0-C0           1              4,621      page-faults               #    0.640 K/sec                  
S0-C0           1      3,965,820,822      cycles                    #    0.550 GHz                    
S0-C0           1      3,313,522,980      instructions              #    0.84  insn per cycle         
S0-C0           1        454,094,546      branches                  #   62.940 M/sec                  
S0-C0           1        116,530,769      branch-misses             #   25.66% of all branches        
S0-C1           1           7,214.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                492      context-switches          #    0.068 K/sec                  
S0-C1           1                 10      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              4,175      page-faults               #    0.579 K/sec                  
S0-C1           1      3,869,880,932      cycles                    #    0.536 GHz                    
S0-C1           1      3,338,762,421      instructions              #    0.86  insn per cycle         
S0-C1           1        457,070,289      branches                  #   63.353 M/sec                  
S0-C1           1        116,655,916      branch-misses             #   25.52% of all branches        
S0-C2           1           7,214.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                527      context-switches          #    0.073 K/sec                  
S0-C2           1                 15      cpu-migrations            #    0.002 K/sec                  
S0-C2           1              4,855      page-faults               #    0.673 K/sec                  
S0-C2           1      3,984,183,072      cycles                    #    0.552 GHz                    
S0-C2           1      3,329,586,161      instructions              #    0.84  insn per cycle         
S0-C2           1        456,142,479      branches                  #   63.224 M/sec                  
S0-C2           1        116,876,978      branch-misses             #   25.62% of all branches        
S0-C3           1           7,214.70 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                478      context-switches          #    0.066 K/sec                  
S0-C3           1                 12      cpu-migrations            #    0.002 K/sec                  
S0-C3           1              4,281      page-faults               #    0.593 K/sec                  
S0-C3           1      3,871,669,671      cycles                    #    0.537 GHz                    
S0-C3           1      3,332,202,412      instructions              #    0.86  insn per cycle         
S0-C3           1        456,335,676      branches                  #   63.251 M/sec                  
S0-C3           1        116,751,101      branch-misses             #   25.58% of all branches        

       7.215041102 seconds time elapsed

================================================================================
perf stat -o 129_compress.log --per-core -a taskset -c 0-3 ./spec95_129_compress.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:00:54 2021


 Performance counter stats for 'system wide':

S0-C0           1         173,914.32 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             25,280      context-switches          #    0.145 K/sec                  
S0-C0           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              9,282      page-faults               #    0.053 K/sec                  
S0-C0           1      2,393,935,208      cycles                    #    0.014 GHz                    
S0-C0           1      1,333,552,476      instructions              #    0.56  insn per cycle         
S0-C0           1      3,680,643,147      branches                  #   21.164 M/sec                  
S0-C0           1        617,634,363      branch-misses             #   16.78% of all branches        
S0-C1           1         173,914.32 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,311      context-switches          #    0.042 K/sec                  
S0-C1           1                 33      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              9,170      page-faults               #    0.053 K/sec                  
S0-C1           1      3,711,798,176      cycles                    #    0.021 GHz                    
S0-C1           1      1,157,299,212      instructions              #    0.31  insn per cycle         
S0-C1           1      3,656,318,517      branches                  #   21.024 M/sec                  
S0-C1           1        612,335,080      branch-misses             #   16.75% of all branches        
S0-C2           1         173,914.32 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             22,249      context-switches          #    0.128 K/sec                  
S0-C2           1                 23      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,158      page-faults               #    0.053 K/sec                  
S0-C2           1      2,463,082,176      cycles                    #    0.014 GHz                    
S0-C2           1      1,261,877,907      instructions              #    0.51  insn per cycle         
S0-C2           1      3,670,633,278      branches                  #   21.106 M/sec                  
S0-C2           1        615,190,660      branch-misses             #   16.76% of all branches        
S0-C3           1         173,914.32 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              7,841      context-switches          #    0.045 K/sec                  
S0-C3           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,300      page-faults               #    0.053 K/sec                  
S0-C3           1      1,338,936,973      cycles                    #    0.008 GHz                    
S0-C3           1      1,177,705,544      instructions              #    0.88  insn per cycle         
S0-C3           1      3,659,196,464      branches                  #   21.040 M/sec                  
S0-C3           1        613,179,204      branch-misses             #   16.76% of all branches        

     173.915797156 seconds time elapsed

================================================================================
perf stat -o 130_li.log --per-core -a taskset -c 0-3 ./spec95_130_li.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:03:48 2021


 Performance counter stats for 'system wide':

S0-C0           1          77,673.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,242      context-switches          #    0.106 K/sec                  
S0-C0           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                429      page-faults               #    0.006 K/sec                  
S0-C0           1      2,166,296,083      cycles                    #    0.028 GHz                    
S0-C0           1      1,000,205,108      instructions              #    0.46  insn per cycle         
S0-C0           1      1,824,421,112      branches                  #   23.488 M/sec                  
S0-C0           1      1,040,431,270      branch-misses             #   57.03% of all branches        
S0-C1           1          77,673.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,425      context-switches          #    0.044 K/sec                  
S0-C1           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                296      page-faults               #    0.004 K/sec                  
S0-C1           1      2,074,806,868      cycles                    #    0.027 GHz                    
S0-C1           1        950,547,055      instructions              #    0.46  insn per cycle         
S0-C1           1      1,817,492,255      branches                  #   23.399 M/sec                  
S0-C1           1      1,038,515,205      branch-misses             #   57.14% of all branches        
S0-C2           1          77,673.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,804      context-switches          #    0.049 K/sec                  
S0-C2           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                449      page-faults               #    0.006 K/sec                  
S0-C2           1      1,934,093,174      cycles                    #    0.025 GHz                    
S0-C2           1        955,217,233      instructions              #    0.49  insn per cycle         
S0-C2           1      1,818,433,292      branches                  #   23.411 M/sec                  
S0-C2           1      1,038,656,136      branch-misses             #   57.12% of all branches        
S0-C3           1          77,673.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              9,669      context-switches          #    0.124 K/sec                  
S0-C3           1                 27      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                511      page-faults               #    0.007 K/sec                  
S0-C3           1      1,939,943,482      cycles                    #    0.025 GHz                    
S0-C3           1        995,104,337      instructions              #    0.51  insn per cycle         
S0-C3           1      1,823,364,821      branches                  #   23.475 M/sec                  
S0-C3           1      1,040,462,972      branch-misses             #   57.06% of all branches        

      77.674190583 seconds time elapsed

================================================================================
perf stat -o 132_ijpeg.log --per-core -a taskset -c 0-3 ./spec95_132_ijpeg.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:05:06 2021


 Performance counter stats for 'system wide':

S0-C0           1          22,310.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              2,137      context-switches          #    0.096 K/sec                  
S0-C0           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,897      page-faults               #    0.130 K/sec                  
S0-C0           1      3,210,668,527      cycles                    #    0.144 GHz                    
S0-C0           1        250,591,884      instructions              #    0.08  insn per cycle         
S0-C0           1      1,116,911,235      branches                  #   50.062 M/sec                  
S0-C0           1        202,129,649      branch-misses             #   18.10% of all branches        
S0-C1           1          22,310.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,379      context-switches          #    0.107 K/sec                  
S0-C1           1                  4      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,843      page-faults               #    0.127 K/sec                  
S0-C1           1      3,143,645,189      cycles                    #    0.141 GHz                    
S0-C1           1        252,208,567      instructions              #    0.08  insn per cycle         
S0-C1           1      1,117,015,795      branches                  #   50.067 M/sec                  
S0-C1           1        202,182,056      branch-misses             #   18.10% of all branches        
S0-C2           1          22,310.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,351      context-switches          #    0.061 K/sec                  
S0-C2           1                 12      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              2,569      page-faults               #    0.115 K/sec                  
S0-C2           1      1,610,941,874      cycles                    #    0.072 GHz                    
S0-C2           1      3,710,543,758      instructions              #    2.30  insn per cycle         
S0-C2           1      1,065,422,538      branches                  #   47.754 M/sec                  
S0-C2           1        187,523,005      branch-misses             #   17.60% of all branches        
S0-C3           1          22,310.48 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,265      context-switches          #    0.057 K/sec                  
S0-C3           1                 19      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              2,430      page-faults               #    0.109 K/sec                  
S0-C3           1      3,670,976,413      cycles                    #    0.165 GHz                    
S0-C3           1      1,818,309,341      instructions              #    0.50  insn per cycle         
S0-C3           1        964,813,435      branches                  #   43.245 M/sec                  
S0-C3           1        164,834,607      branch-misses             #   17.08% of all branches        

      22.310922386 seconds time elapsed

================================================================================
perf stat -o 134_perl.log --per-core -a taskset -c 0-3 ./spec95_134_perl.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:05:28 2021


 Performance counter stats for 'system wide':

S0-C0           1          30,471.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              4,672      context-switches          #    0.153 K/sec                  
S0-C0           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              9,324      page-faults               #    0.306 K/sec                  
S0-C0           1        799,718,456      cycles                    #    0.026 GHz                    
S0-C0           1        818,148,710      instructions              #    1.02  insn per cycle         
S0-C0           1      2,728,498,078      branches                  #   89.542 M/sec                  
S0-C0           1        478,258,961      branch-misses             #   17.53% of all branches        
S0-C1           1          30,471.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,261      context-switches          #    0.041 K/sec                  
S0-C1           1                  3      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              9,307      page-faults               #    0.305 K/sec                  
S0-C1           1        751,837,437      cycles                    #    0.025 GHz                    
S0-C1           1        788,135,163      instructions              #    1.05  insn per cycle         
S0-C1           1      2,724,545,103      branches                  #   89.412 M/sec                  
S0-C1           1        477,092,492      branch-misses             #   17.51% of all branches        
S0-C2           1          30,471.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,673      context-switches          #    0.055 K/sec                  
S0-C2           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,160      page-faults               #    0.301 K/sec                  
S0-C2           1        933,888,687      cycles                    #    0.031 GHz                    
S0-C2           1        789,487,533      instructions              #    0.85  insn per cycle         
S0-C2           1      2,724,862,514      branches                  #   89.422 M/sec                  
S0-C2           1        477,185,811      branch-misses             #   17.51% of all branches        
S0-C3           1          30,471.81 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,694      context-switches          #    0.056 K/sec                  
S0-C3           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,300      page-faults               #    0.305 K/sec                  
S0-C3           1        551,329,772      cycles                    #    0.018 GHz                    
S0-C3           1        789,949,590      instructions              #    1.43  insn per cycle         
S0-C3           1      2,724,828,612      branches                  #   89.421 M/sec                  
S0-C3           1        477,131,020      branch-misses             #   17.51% of all branches        

      30.472302148 seconds time elapsed

================================================================================
perf stat -o 141_apsi.log --per-core -a taskset -c 0-3 ./spec95_141_apsi.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:05:59 2021


 Performance counter stats for 'system wide':

S0-C0           1          67,291.28 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,022      context-switches          #    0.119 K/sec                  
S0-C0           1                 29      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                897      page-faults               #    0.013 K/sec                  
S0-C0           1        151,306,881      cycles                    #    0.002 GHz                    
S0-C0           1      2,102,836,165      instructions              #   13.90  insn per cycle         
S0-C0           1        872,953,118      branches                  #   12.973 M/sec                  
S0-C0           1         40,974,800      branch-misses             #    4.69% of all branches        
S0-C1           1          67,291.28 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,549      context-switches          #    0.053 K/sec                  
S0-C1           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                925      page-faults               #    0.014 K/sec                  
S0-C1           1         57,053,191      cycles                    #    0.001 GHz                    
S0-C1           1      2,058,102,456      instructions              #   36.07  insn per cycle         
S0-C1           1        866,851,001      branches                  #   12.882 M/sec                  
S0-C1           1         39,144,146      branch-misses             #    4.52% of all branches        
S0-C2           1          67,291.27 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,543      context-switches          #    0.068 K/sec                  
S0-C2           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              1,129      page-faults               #    0.017 K/sec                  
S0-C2           1        210,000,953      cycles                    #    0.003 GHz                    
S0-C2           1      2,060,043,604      instructions              #    9.81  insn per cycle         
S0-C2           1        867,411,496      branches                  #   12.890 M/sec                  
S0-C2           1         39,371,588      branch-misses             #    4.54% of all branches        
S0-C3           1          67,291.28 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,112      context-switches          #    0.061 K/sec                  
S0-C3           1                 24      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              1,161      page-faults               #    0.017 K/sec                  
S0-C3           1        139,979,775      cycles                    #    0.002 GHz                    
S0-C3           1      2,061,970,639      instructions              #   14.73  insn per cycle         
S0-C3           1        867,253,453      branches                  #   12.888 M/sec                  
S0-C3           1         39,251,369      branch-misses             #    4.53% of all branches        

      67.292015196 seconds time elapsed

================================================================================
perf stat -o 145_fpppp.log --per-core -a taskset -c 0-3 ./spec95_145_fpppp.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:07:06 2021


 Performance counter stats for 'system wide':

S0-C0           1         136,541.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             31,090      context-switches          #    0.228 K/sec                  
S0-C0           1                 45      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                466      page-faults               #    0.003 K/sec                  
S0-C0           1      1,384,992,812      cycles                    #    0.010 GHz                    
S0-C0           1      3,834,369,129      instructions              #    2.77  insn per cycle         
S0-C0           1      1,285,573,476      branches                  #    9.415 M/sec                  
S0-C0           1        125,409,165      branch-misses             #    9.76% of all branches        
S0-C1           1         136,541.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,689      context-switches          #    0.034 K/sec                  
S0-C1           1                 34      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              1,193      page-faults               #    0.009 K/sec                  
S0-C1           1        181,166,674      cycles                    #    0.001 GHz                    
S0-C1           1      3,640,289,070      instructions              #   20.09  insn per cycle         
S0-C1           1      1,258,492,995      branches                  #    9.217 M/sec                  
S0-C1           1        119,109,485      branch-misses             #    9.46% of all branches        
S0-C2           1         136,541.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              8,509      context-switches          #    0.062 K/sec                  
S0-C2           1                 32      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                883      page-faults               #    0.006 K/sec                  
S0-C2           1      4,130,321,757      cycles                    #    0.030 GHz                    
S0-C2           1      3,655,638,691      instructions              #    0.89  insn per cycle         
S0-C2           1      1,261,416,860      branches                  #    9.238 M/sec                  
S0-C2           1        119,868,975      branch-misses             #    9.50% of all branches        
S0-C3           1         136,541.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             14,890      context-switches          #    0.109 K/sec                  
S0-C3           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              1,248      page-faults               #    0.009 K/sec                  
S0-C3           1         13,363,753      cycles                    #    0.000 GHz                    
S0-C3           1      3,707,507,684      instructions              #  277.43  insn per cycle         
S0-C3           1      1,267,450,784      branches                  #    9.283 M/sec                  
S0-C3           1        122,181,234      branch-misses             #    9.64% of all branches        

     136.543051745 seconds time elapsed

================================================================================
perf stat -o 146_wave5.log --per-core -a taskset -c 0-3 ./spec95_146_wave5.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:09:23 2021


 Performance counter stats for 'system wide':

S0-C0           1          65,390.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              9,816      context-switches          #    0.150 K/sec                  
S0-C0           1                 20      cpu-migrations            #    0.000 K/sec                  
S0-C0           1             10,470      page-faults               #    0.160 K/sec                  
S0-C0           1      3,020,780,469      cycles                    #    0.046 GHz                    
S0-C0           1      2,566,192,111      instructions              #    0.85  insn per cycle         
S0-C0           1      1,327,362,785      branches                  #   20.299 M/sec                  
S0-C0           1         17,152,705      branch-misses             #    1.29% of all branches        
S0-C1           1          65,390.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,773      context-switches          #    0.042 K/sec                  
S0-C1           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C1           1             10,666      page-faults               #    0.163 K/sec                  
S0-C1           1      2,248,706,574      cycles                    #    0.034 GHz                    
S0-C1           1      2,508,403,233      instructions              #    1.12  insn per cycle         
S0-C1           1      1,319,601,146      branches                  #   20.180 M/sec                  
S0-C1           1         15,510,785      branch-misses             #    1.18% of all branches        
S0-C2           1          65,390.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,395      context-switches          #    0.052 K/sec                  
S0-C2           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C2           1             10,475      page-faults               #    0.160 K/sec                  
S0-C2           1      3,382,907,276      cycles                    #    0.052 GHz                    
S0-C2           1      2,513,092,627      instructions              #    0.74  insn per cycle         
S0-C2           1      1,320,474,535      branches                  #   20.194 M/sec                  
S0-C2           1         15,277,001      branch-misses             #    1.16% of all branches        
S0-C3           1          65,390.37 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,207      context-switches          #    0.049 K/sec                  
S0-C3           1                  4      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             10,735      page-faults               #    0.164 K/sec                  
S0-C3           1      3,130,211,252      cycles                    #    0.048 GHz                    
S0-C3           1      2,511,989,080      instructions              #    0.80  insn per cycle         
S0-C3           1      1,320,107,462      branches                  #   20.188 M/sec                  
S0-C3           1         15,324,277      branch-misses             #    1.16% of all branches        

      65.391069397 seconds time elapsed

================================================================================
perf stat -o 147_vortex.log --per-core -a taskset -c 0-3 ./spec95_147_vortex.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 11:10:28 2021


 Performance counter stats for 'system wide':

S0-C0           1          94,796.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              9,038      context-switches          #    0.095 K/sec                  
S0-C0           1                 27      cpu-migrations            #    0.000 K/sec                  
S0-C0           1             11,834      page-faults               #    0.125 K/sec                  
S0-C0           1      1,429,439,686      cycles                    #    0.015 GHz                    
S0-C0           1      3,451,916,206      instructions              #    2.41  insn per cycle         
S0-C0           1      1,544,183,891      branches                  #   16.289 M/sec                  
S0-C0           1        390,201,780      branch-misses             #   25.27% of all branches        
S0-C1           1          94,796.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,171      context-switches          #    0.055 K/sec                  
S0-C1           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C1           1             12,046      page-faults               #    0.127 K/sec                  
S0-C1           1      4,050,798,428      cycles                    #    0.043 GHz                    
S0-C1           1      3,413,932,941      instructions              #    0.84  insn per cycle         
S0-C1           1      1,538,688,861      branches                  #   16.231 M/sec                  
S0-C1           1        388,579,838      branch-misses             #   25.25% of all branches        
S0-C2           1          94,796.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             10,249      context-switches          #    0.108 K/sec                  
S0-C2           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C2           1             12,094      page-faults               #    0.128 K/sec                  
S0-C2           1         99,035,754      cycles                    #    0.001 GHz                    
S0-C2           1      3,446,634,254      instructions              #   34.80  insn per cycle         
S0-C2           1      1,543,314,836      branches                  #   16.280 M/sec                  
S0-C2           1        386,491,478      branch-misses             #   25.04% of all branches        
S0-C3           1          94,796.94 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,381      context-switches          #    0.036 K/sec                  
S0-C3           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             11,845      page-faults               #    0.125 K/sec                  
S0-C3           1      1,547,618,406      cycles                    #    0.016 GHz                    
S0-C3           1      3,397,379,028      instructions              #    2.20  insn per cycle         
S0-C3           1      1,536,724,230      branches                  #   16.211 M/sec                  
S0-C3           1        387,851,353      branch-misses             #   25.24% of all branches        

      94.797808837 seconds time elapsed

================================================================================
perf stat -o aes_benchmark.log --per-core -a taskset -c 0-3 ./aes_benchmark 4
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
# started on Wed Mar  3 11:12:03 2021


 Performance counter stats for 'system wide':

S0-C0           1           6,464.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1                939      context-switches          #    0.145 K/sec                  
S0-C0           1                 12      cpu-migrations            #    0.002 K/sec                  
S0-C0           1                388      page-faults               #    0.060 K/sec                  
S0-C0           1      4,101,502,380      cycles                    #    0.634 GHz                    
S0-C0           1      3,438,377,058      instructions              #    0.84  insn per cycle         
S0-C0           1        178,289,769      branches                  #   27.579 M/sec                  
S0-C0           1          3,015,651      branch-misses             #    1.69% of all branches        
S0-C1           1           6,464.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                413      context-switches          #    0.064 K/sec                  
S0-C1           1                  3      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                391      page-faults               #    0.060 K/sec                  
S0-C1           1      4,080,708,585      cycles                    #    0.631 GHz                    
S0-C1           1      3,433,122,331      instructions              #    0.84  insn per cycle         
S0-C1           1        177,575,427      branches                  #   27.468 M/sec                  
S0-C1           1          2,803,927      branch-misses             #    1.58% of all branches        
S0-C2           1           6,464.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                452      context-switches          #    0.070 K/sec                  
S0-C2           1                  2      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                393      page-faults               #    0.061 K/sec                  
S0-C2           1      4,079,831,554      cycles                    #    0.631 GHz                    
S0-C2           1      3,432,831,039      instructions              #    0.84  insn per cycle         
S0-C2           1        177,596,896      branches                  #   27.472 M/sec                  
S0-C2           1          2,808,800      branch-misses             #    1.58% of all branches        
S0-C3           1           6,464.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                603      context-switches          #    0.093 K/sec                  
S0-C3           1                  5      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                491      page-faults               #    0.076 K/sec                  
S0-C3           1      4,092,163,066      cycles                    #    0.633 GHz                    
S0-C3           1      3,436,450,244      instructions              #    0.84  insn per cycle         
S0-C3           1        178,021,822      branches                  #   27.537 M/sec                  
S0-C3           1          2,898,117      branch-misses             #    1.63% of all branches        

       6.465088523 seconds time elapsed

================================================================================
This benchmark has been compiled to use 16 threads. You have to repcompile it if you want to use different number of threads. See ../install/setup.sh for details.
================================================================================
================================================================================
Printing results
File: word2vec_perf_output_1614768173215379749.txt
instructions: 10271303594
=(2130909828+3714311045+2337778534+2088304187)
frequencies: 0.021
=(0.023+0.017+0.023+0.021)/4
ipcs:1.40
=1*(1.03+2.41+1.09+1.08)/4

File: sqlite_4_threads.txt
instructions: 2428350527
=(608005875+613065634+608641981+598637037)
frequencies: 0.198
=(0.203+0.197+0.194+0.197)/4
ipcs:0.39
=1*(0.38+0.40+0.40+0.39)/4

File: word2vec_perf_output_no_branch_1614768173219404463.txt
instructions: 7415123474
=(3069603560+472452681+2499615407+1373451826)
frequencies: 0.010
=(0.019+0.009+0.002+0.011)/4
ipcs:3.63
=1*(1.66+0.54+11.06+1.26)/4

File: go_word2vec_4_threads.txt
instructions: 11962551144
=(4033355467+3042795303+3670892605+1215507769)
frequencies: 0.035
=(0.008+0.043+0.070+0.018)/4
ipcs:4.59
=1*(13.23+1.92+1.42+1.80)/4

================================================================================
Finished running benchmarks
================================================================================
