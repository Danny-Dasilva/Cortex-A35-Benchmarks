Architecture:        aarch64
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  1
Core(s) per socket:  4
Socket(s):           1
Vendor ID:           ARM
Model:               1
Model name:          Cortex-A35
Stepping:            r0p1
CPU max MHz:         1300.0000
CPU min MHz:         598.0000
BogoMIPS:            26.00
Flags:               fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid
================================================================================
/home/mendel/sd_card/i-benchmarks/word2vec/bin
perf stat -o ../data/word2vec_perf_output_1614750891011317101.txt --per-core -a taskset -c 0-3 ./word2vec -train ../data/text8_1.7mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_1.7mb
100K200KVocab size: 5847
Words in train file: 252418
Alpha: 0.050000  Progress: 0.28%  Words/thread/sec: 3.50k  Alpha: 0.049862  Progress: 0.58%  Words/thread/sec: 5.91k  Alpha: 0.049709  Progress: 0.88%  Words/thread/sec: 8.92k  Alpha: 0.049558  Progress: 1.19%  Words/thread/sec: 11.96k  Alpha: 0.049407  Progress: 1.45%  Words/thread/sec: 8.12k  Alpha: 0.049275  Progress: 1.72%  Words/thread/sec: 8.66k  Alpha: 0.049142  Progress: 1.98%  Words/thread/sec: 10.01k  Alpha: 0.049008  Progress: 2.30%  Words/thread/sec: 10.60k  Alpha: 0.048852  Progress: 2.57%  Words/thread/sec: 8.64k  Alpha: 0.048715  Progress: 2.84%  Words/thread/sec: 9.55k  Alpha: 0.048581  Progress: 3.16%  Words/thread/sec: 10.61k  Alpha: 0.048421  Progress: 3.43%  Words/thread/sec: 10.88k  Alpha: 0.048284  Progress: 3.70%  Words/thread/sec: 9.35k  Alpha: 0.048148  Progress: 3.97%  Words/thread/sec: 9.58k  Alpha: 0.048015  Progress: 4.29%  Words/thread/sec: 10.31k  Alpha: 0.047855  Progress: 4.60%  Words/thread/sec: 11.04k  Alpha: 0.047701  Progress: 4.87%  Words/thread/sec: 9.45k  Alpha: 0.047566  Progress: 5.17%  Words/thread/sec: 10.04k  Alpha: 0.047413  Progress: 5.49%  Words/thread/sec: 10.31k  Alpha: 0.047253  Progress: 5.81%  Words/thread/sec: 10.84k  Alpha: 0.047096  Progress: 6.99%  Words/thread/sec: 10.11k  Alpha: 0.046504  Progress: 7.30%  Words/thread/sec: 10.26k  Alpha: 0.046350  Progress: 7.60%  Words/thread/sec: 10.64k  Alpha: 0.046200  Progress: 7.90%  Words/thread/sec: 11.04k  Alpha: 0.046049  Progress: 8.17%  Words/thread/sec: 10.34k  Alpha: 0.045915  Progress: 8.44%  Words/thread/sec: 10.38k  Alpha: 0.045782  Progress: 8.70%  Words/thread/sec: 10.68k  Alpha: 0.045649  Progress: 9.02%  Words/thread/sec: 10.87k  Alpha: 0.045492  Progress: 9.28%  Words/thread/sec: 10.43k  Alpha: 0.045359  Progress: 9.56%  Words/thread/sec: 10.48k  Alpha: 0.045222  Progress: 9.82%  Words/thread/sec: 10.75k  Alpha: 0.045089  Progress: 10.09%  Words/thread/sec: 10.87k  Alpha: 0.044953  Progress: 10.37%  Words/thread/sec: 10.49k  Alpha: 0.044816  Progress: 10.64%  Words/thread/sec: 10.35k  Alpha: 0.044682  Progress: 10.95%  Words/thread/sec: 10.63k  Alpha: 0.044527  Progress: 11.27%  Words/thread/sec: 10.91k  Alpha: 0.044367  Progress: 11.57%  Words/thread/sec: 10.45k  Alpha: 0.044213  Progress: 11.85%  Words/thread/sec: 10.50k  Alpha: 0.044076  Progress: 12.16%  Words/thread/sec: 10.61k  Alpha: 0.043918  Progress: 12.48%  Words/thread/sec: 10.84k  Alpha: 0.043759  Progress: 13.71%  Words/thread/sec: 10.50k  Alpha: 0.043143  Progress: 14.02%  Words/thread/sec: 10.59k  Alpha: 0.042988  Progress: 14.33%  Words/thread/sec: 10.80k  Alpha: 0.042837  Progress: 14.63%  Words/thread/sec: 10.99k  Alpha: 0.042686  Progress: 14.90%  Words/thread/sec: 10.60k  Alpha: 0.042552  Progress: 15.16%  Words/thread/sec: 10.64k  Alpha: 0.042418  Progress: 15.43%  Words/thread/sec: 10.79k  Alpha: 0.042286  Progress: 15.74%  Words/thread/sec: 10.91k  Alpha: 0.042130  Progress: 16.01%  Words/thread/sec: 10.64k  Alpha: 0.041996  Progress: 16.28%  Words/thread/sec: 10.68k  Alpha: 0.041858  Progress: 16.55%  Words/thread/sec: 10.82k  Alpha: 0.041726  Progress: 16.82%  Words/thread/sec: 10.91k  Alpha: 0.041589  Progress: 17.10%  Words/thread/sec: 10.67k  Alpha: 0.041451  Progress: 17.36%  Words/thread/sec: 10.59k  Alpha: 0.041318  Progress: 17.68%  Words/thread/sec: 10.76k  Alpha: 0.041162  Progress: 18.00%  Words/thread/sec: 10.92k  Alpha: 0.041001  Progress: 18.31%  Words/thread/sec: 10.64k  Alpha: 0.040846  Progress: 18.57%  Words/thread/sec: 10.69k  Alpha: 0.040713  Progress: 18.84%  Words/thread/sec: 10.82k  Alpha: 0.040579  Progress: 19.16%  Words/thread/sec: 10.84k  Alpha: 0.040422  Progress: 20.44%  Words/thread/sec: 10.66k  Alpha: 0.039780  Progress: 20.75%  Words/thread/sec: 10.72k  Alpha: 0.039625  Progress: 21.05%  Words/thread/sec: 10.86k  Alpha: 0.039475  Progress: 21.35%  Words/thread/sec: 10.96k  Alpha: 0.039325  Progress: 21.62%  Words/thread/sec: 10.72k  Alpha: 0.039191  Progress: 21.89%  Words/thread/sec: 10.75k  Alpha: 0.039056  Progress: 22.20%  Words/thread/sec: 10.80k  Alpha: 0.038902  Progress: 22.51%  Words/thread/sec: 10.88k  Alpha: 0.038743  Progress: 22.83%  Words/thread/sec: 10.69k  Alpha: 0.038583  Progress: 23.11%  Words/thread/sec: 10.82k  Alpha: 0.038446  Progress: 23.38%  Words/thread/sec: 10.86k  Alpha: 0.038310  Progress: 23.65%  Words/thread/sec: 10.91k  Alpha: 0.038177  Progress: 23.92%  Words/thread/sec: 10.70k  Alpha: 0.038041  Progress: 24.19%  Words/thread/sec: 10.74k  Alpha: 0.037907  Progress: 24.50%  Words/thread/sec: 10.87k  Alpha: 0.037749  Progress: 24.77%  Words/thread/sec: 10.92k  Alpha: 0.037613  Progress: 25.04%  Words/thread/sec: 10.65k  Alpha: 0.037478  Progress: 25.35%  Words/thread/sec: 10.78k  Alpha: 0.037324  Progress: 25.67%  Words/thread/sec: 10.83k  Alpha: 0.037165  Progress: 25.98%  Words/thread/sec: 10.88k  Alpha: 0.037008  Progress: 27.17%  Words/thread/sec: 10.74k  Alpha: 0.036413  Progress: 27.47%  Words/thread/sec: 10.78k  Alpha: 0.036263  Progress: 27.78%  Words/thread/sec: 10.90k  Alpha: 0.036108  Progress: 28.08%  Words/thread/sec: 10.94k  Alpha: 0.035958  Progress: 28.35%  Words/thread/sec: 10.78k  Alpha: 0.035825  Progress: 28.62%  Words/thread/sec: 10.81k  Alpha: 0.035690  Progress: 28.89%  Words/thread/sec: 10.83k  Alpha: 0.035556  Progress: 29.20%  Words/thread/sec: 10.94k  Alpha: 0.035401  Progress: 29.46%  Words/thread/sec: 10.80k  Alpha: 0.035269  Progress: 29.74%  Words/thread/sec: 10.83k  Alpha: 0.035131  Progress: 30.00%  Words/thread/sec: 10.85k  Alpha: 0.034998  Progress: 30.27%  Words/thread/sec: 10.94k  Alpha: 0.034864  Progress: 30.55%  Words/thread/sec: 10.81k  Alpha: 0.034725  Progress: 30.86%  Words/thread/sec: 10.77k  Alpha: 0.034570  Progress: 31.12%  Words/thread/sec: 10.86k  Alpha: 0.034438  Progress: 31.44%  Words/thread/sec: 10.90k  Alpha: 0.034278  Progress: 31.75%  Words/thread/sec: 10.78k  Alpha: 0.034123  Progress: 32.03%  Words/thread/sec: 10.81k  Alpha: 0.033987  Progress: 32.34%  Words/thread/sec: 10.84k  Alpha: 0.033829  Progress: 32.66%  Words/thread/sec: 10.87k  Alpha: 0.033672  Progress: 33.89%  Words/thread/sec: 10.78k  Alpha: 0.033054  Progress: 34.19%  Words/thread/sec: 10.82k  Alpha: 0.032903  Progress: 34.50%  Words/thread/sec: 10.92k  Alpha: 0.032749  Progress: 34.81%  Words/thread/sec: 10.93k  Alpha: 0.032597  Progress: 35.07%  Words/thread/sec: 10.82k  Alpha: 0.032463  Progress: 35.34%  Words/thread/sec: 10.85k  Alpha: 0.032330  Progress: 35.65%  Words/thread/sec: 10.87k  Alpha: 0.032174  Progress: 35.92%  Words/thread/sec: 10.94k  Alpha: 0.032040  Progress: 36.19%  Words/thread/sec: 10.83k  Alpha: 0.031907  Progress: 36.46%  Words/thread/sec: 10.86k  Alpha: 0.031771  Progress: 36.73%  Words/thread/sec: 10.87k  Alpha: 0.031635  Progress: 37.00%  Words/thread/sec: 10.94k  Alpha: 0.031502  Progress: 37.27%  Words/thread/sec: 10.83k  Alpha: 0.031363  Progress: 37.59%  Words/thread/sec: 10.82k  Alpha: 0.031207  Progress: 37.85%  Words/thread/sec: 10.89k  Alpha: 0.031073  Progress: 38.12%  Words/thread/sec: 10.95k  Alpha: 0.030941  Progress: 38.43%  Words/thread/sec: 10.80k  Alpha: 0.030786  Progress: 38.70%  Words/thread/sec: 10.83k  Alpha: 0.030652  Progress: 38.96%  Words/thread/sec: 10.90k  Alpha: 0.030520  Progress: 39.23%  Words/thread/sec: 10.95k  Alpha: 0.030386  Progress: 40.29%  Words/thread/sec: 10.95k  Alpha: 0.029853  Progress: 40.62%  Words/thread/sec: 10.81k  Alpha: 0.029688  Progress: 40.93%  Words/thread/sec: 10.86k  Alpha: 0.029537  Progress: 41.23%  Words/thread/sec: 10.93k  Alpha: 0.029383  Progress: 41.54%  Words/thread/sec: 10.93k  Alpha: 0.029232  Progress: 41.81%  Words/thread/sec: 10.84k  Alpha: 0.029097  Progress: 42.07%  Words/thread/sec: 10.88k  Alpha: 0.028964  Progress: 42.38%  Words/thread/sec: 10.89k  Alpha: 0.028809  Progress: 42.65%  Words/thread/sec: 10.94k  Alpha: 0.028675  Progress: 42.92%  Words/thread/sec: 10.85k  Alpha: 0.028542  Progress: 43.19%  Words/thread/sec: 10.89k  Alpha: 0.028404  Progress: 43.46%  Words/thread/sec: 10.89k  Alpha: 0.028269  Progress: 43.73%  Words/thread/sec: 10.94k  Alpha: 0.028137  Progress: 44.00%  Words/thread/sec: 10.85k  Alpha: 0.027998  Progress: 44.31%  Words/thread/sec: 10.85k  Alpha: 0.027843  Progress: 44.58%  Words/thread/sec: 10.90k  Alpha: 0.027709  Progress: 44.91%  Words/thread/sec: 10.90k  Alpha: 0.027547  Progress: 45.21%  Words/thread/sec: 10.83k  Alpha: 0.027393  Progress: 45.48%  Words/thread/sec: 10.87k  Alpha: 0.027258  Progress: 45.80%  Words/thread/sec: 10.89k  Alpha: 0.027101  Progress: 46.11%  Words/thread/sec: 10.88k  Alpha: 0.026943  Progress: 47.34%  Words/thread/sec: 10.83k  Alpha: 0.026330  Progress: 47.64%  Words/thread/sec: 10.87k  Alpha: 0.026180  Progress: 47.95%  Words/thread/sec: 10.93k  Alpha: 0.026025  Progress: 48.25%  Words/thread/sec: 10.92k  Alpha: 0.025874  Progress: 48.52%  Words/thread/sec: 10.85k  Alpha: 0.025739  Progress: 48.79%  Words/thread/sec: 10.89k  Alpha: 0.025606  Progress: 49.10%  Words/thread/sec: 10.90k  Alpha: 0.025449  Progress: 49.37%  Words/thread/sec: 10.93k  Alpha: 0.025317  Progress: 49.63%  Words/thread/sec: 10.86k  Alpha: 0.025184  Progress: 49.90%  Words/thread/sec: 10.90k  Alpha: 0.025049  Progress: 50.18%  Words/thread/sec: 10.90k  Alpha: 0.024912  Progress: 50.44%  Words/thread/sec: 10.93k  Alpha: 0.024779  Progress: 50.72%  Words/thread/sec: 10.86k  Alpha: 0.024641  Progress: 51.03%  Words/thread/sec: 10.86k  Alpha: 0.024486  Progress: 51.29%  Words/thread/sec: 10.91k  Alpha: 0.024353  Progress: 51.56%  Words/thread/sec: 10.93k  Alpha: 0.024221  Progress: 51.87%  Words/thread/sec: 10.83k  Alpha: 0.024065  Progress: 52.14%  Words/thread/sec: 10.87k  Alpha: 0.023931  Progress: 52.41%  Words/thread/sec: 10.88k  Alpha: 0.023796  Progress: 52.73%  Words/thread/sec: 10.94k  Alpha: 0.023637  Progress: 53.73%  Words/thread/sec: 10.94k  Alpha: 0.023134  Progress: 54.06%  Words/thread/sec: 10.84k  Alpha: 0.022971  Progress: 54.36%  Words/thread/sec: 10.88k  Alpha: 0.022822  Progress: 54.66%  Words/thread/sec: 10.94k  Alpha: 0.022668  Progress: 54.97%  Words/thread/sec: 10.92k  Alpha: 0.022516  Progress: 55.23%  Words/thread/sec: 10.87k  Alpha: 0.022383  Progress: 55.50%  Words/thread/sec: 10.90k  Alpha: 0.022251  Progress: 55.81%  Words/thread/sec: 10.91k  Alpha: 0.022095  Progress: 56.08%  Words/thread/sec: 10.93k  Alpha: 0.021961  Progress: 56.35%  Words/thread/sec: 10.85k  Alpha: 0.021825  Progress: 56.67%  Words/thread/sec: 10.89k  Alpha: 0.021666  Progress: 56.94%  Words/thread/sec: 10.92k  Alpha: 0.021531  Progress: 57.21%  Words/thread/sec: 10.94k  Alpha: 0.021397  Progress: 57.48%  Words/thread/sec: 10.84k  Alpha: 0.021262  Progress: 57.79%  Words/thread/sec: 10.88k  Alpha: 0.021106  Progress: 58.05%  Words/thread/sec: 10.92k  Alpha: 0.020973  Progress: 58.38%  Words/thread/sec: 10.91k  Alpha: 0.020812  Progress: 58.64%  Words/thread/sec: 10.84k  Alpha: 0.020678  Progress: 58.95%  Words/thread/sec: 10.87k  Alpha: 0.020524  Progress: 59.26%  Words/thread/sec: 10.91k  Alpha: 0.020368  Progress: 59.58%  Words/thread/sec: 10.90k  Alpha: 0.020210  Progress: 60.77%  Words/thread/sec: 10.85k  Alpha: 0.019614  Progress: 61.07%  Words/thread/sec: 10.89k  Alpha: 0.019464  Progress: 61.38%  Words/thread/sec: 10.94k  Alpha: 0.019310  Progress: 61.68%  Words/thread/sec: 10.92k  Alpha: 0.019158  Progress: 61.95%  Words/thread/sec: 10.87k  Alpha: 0.019024  Progress: 62.22%  Words/thread/sec: 10.91k  Alpha: 0.018890  Progress: 62.53%  Words/thread/sec: 10.91k  Alpha: 0.018735  Progress: 62.80%  Words/thread/sec: 10.93k  Alpha: 0.018602  Progress: 63.07%  Words/thread/sec: 10.87k  Alpha: 0.018464  Progress: 63.39%  Words/thread/sec: 10.89k  Alpha: 0.018303  Progress: 63.66%  Words/thread/sec: 10.92k  Alpha: 0.018169  Progress: 63.93%  Words/thread/sec: 10.94k  Alpha: 0.018036  Progress: 64.20%  Words/thread/sec: 10.85k  Alpha: 0.017900  Progress: 64.51%  Words/thread/sec: 10.89k  Alpha: 0.017746  Progress: 64.78%  Words/thread/sec: 10.93k  Alpha: 0.017612  Progress: 65.10%  Words/thread/sec: 10.91k  Alpha: 0.017451  Progress: 65.36%  Words/thread/sec: 10.86k  Alpha: 0.017318  Progress: 65.63%  Words/thread/sec: 10.89k  Alpha: 0.017186  Progress: 65.94%  Words/thread/sec: 10.92k  Alpha: 0.017032  Progress: 66.25%  Words/thread/sec: 10.89k  Alpha: 0.016874  Progress: 67.49%  Words/thread/sec: 10.86k  Alpha: 0.016253  Progress: 67.79%  Words/thread/sec: 10.90k  Alpha: 0.016103  Progress: 68.10%  Words/thread/sec: 10.94k  Alpha: 0.015948  Progress: 68.40%  Words/thread/sec: 10.93k  Alpha: 0.015798  Progress: 68.67%  Words/thread/sec: 10.88k  Alpha: 0.015663  Progress: 68.94%  Words/thread/sec: 10.91k  Alpha: 0.015529  Progress: 69.25%  Words/thread/sec: 10.92k  Alpha: 0.015375  Progress: 69.52%  Words/thread/sec: 10.93k  Alpha: 0.015241  Progress: 69.79%  Words/thread/sec: 10.88k  Alpha: 0.015104  Progress: 70.12%  Words/thread/sec: 10.90k  Alpha: 0.014942  Progress: 70.38%  Words/thread/sec: 10.92k  Alpha: 0.014808  Progress: 70.65%  Words/thread/sec: 10.94k  Alpha: 0.014674  Progress: 70.92%  Words/thread/sec: 10.86k  Alpha: 0.014538  Progress: 71.23%  Words/thread/sec: 10.90k  Alpha: 0.014384  Progress: 71.50%  Words/thread/sec: 10.93k  Alpha: 0.014250  Progress: 71.76%  Words/thread/sec: 10.94k  Alpha: 0.014118  Progress: 72.04%  Words/thread/sec: 10.86k  Alpha: 0.013982  Progress: 72.34%  Words/thread/sec: 10.88k  Alpha: 0.013829  Progress: 72.61%  Words/thread/sec: 10.90k  Alpha: 0.013696  Progress: 72.92%  Words/thread/sec: 10.95k  Alpha: 0.013538  Progress: 73.88%  Words/thread/sec: 10.93k  Alpha: 0.013059  Progress: 74.21%  Words/thread/sec: 10.87k  Alpha: 0.012895  Progress: 74.51%  Words/thread/sec: 10.91k  Alpha: 0.012744  Progress: 74.82%  Words/thread/sec: 10.94k  Alpha: 0.012591  Progress: 75.12%  Words/thread/sec: 10.92k  Alpha: 0.012441  Progress: 75.39%  Words/thread/sec: 10.89k  Alpha: 0.012305  Progress: 75.66%  Words/thread/sec: 10.92k  Alpha: 0.012172  Progress: 75.96%  Words/thread/sec: 10.92k  Alpha: 0.012018  Progress: 76.23%  Words/thread/sec: 10.92k  Alpha: 0.011884  Progress: 76.50%  Words/thread/sec: 10.89k  Alpha: 0.011751  Progress: 76.77%  Words/thread/sec: 10.92k  Alpha: 0.011613  Progress: 77.05%  Words/thread/sec: 10.92k  Alpha: 0.011477  Progress: 77.31%  Words/thread/sec: 10.92k  Alpha: 0.011344  Progress: 77.59%  Words/thread/sec: 10.90k  Alpha: 0.011204  Progress: 77.90%  Words/thread/sec: 10.90k  Alpha: 0.011049  Progress: 78.17%  Words/thread/sec: 10.93k  Alpha: 0.010915  Progress: 78.44%  Words/thread/sec: 10.93k  Alpha: 0.010782  Progress: 78.75%  Words/thread/sec: 10.88k  Alpha: 0.010625  Progress: 79.02%  Words/thread/sec: 10.90k  Alpha: 0.010491  Progress: 79.33%  Words/thread/sec: 10.91k  Alpha: 0.010333  Progress: 79.60%  Words/thread/sec: 10.94k  Alpha: 0.010200  Progress: 80.60%  Words/thread/sec: 10.92k  Alpha: 0.009700  Progress: 80.93%  Words/thread/sec: 10.91k  Alpha: 0.009535  Progress: 81.23%  Words/thread/sec: 10.91k  Alpha: 0.009385  Progress: 81.53%  Words/thread/sec: 10.94k  Alpha: 0.009233  Progress: 81.84%  Words/thread/sec: 10.91k  Alpha: 0.009082  Progress: 82.10%  Words/thread/sec: 10.92k  Alpha: 0.008948  Progress: 82.37%  Words/thread/sec: 10.92k  Alpha: 0.008815  Progress: 82.68%  Words/thread/sec: 10.92k  Alpha: 0.008661  Progress: 82.95%  Words/thread/sec: 10.92k  Alpha: 0.008526  Progress: 83.22%  Words/thread/sec: 10.92k  Alpha: 0.008391  Progress: 83.49%  Words/thread/sec: 10.92k  Alpha: 0.008255  Progress: 83.76%  Words/thread/sec: 10.93k  Alpha: 0.008118  Progress: 84.03%  Words/thread/sec: 10.92k  Alpha: 0.007985  Progress: 84.31%  Words/thread/sec: 10.93k  Alpha: 0.007847  Progress: 84.62%  Words/thread/sec: 10.90k  Alpha: 0.007691  Progress: 84.88%  Words/thread/sec: 10.93k  Alpha: 0.007558  Progress: 85.21%  Words/thread/sec: 10.90k  Alpha: 0.007396  Progress: 85.52%  Words/thread/sec: 10.91k  Alpha: 0.007240  Progress: 85.79%  Words/thread/sec: 10.91k  Alpha: 0.007105  Progress: 86.11%  Words/thread/sec: 10.92k  Alpha: 0.006946  Progress: 86.42%  Words/thread/sec: 10.89k  Alpha: 0.006789  Progress: 87.65%  Words/thread/sec: 10.91k  Alpha: 0.006176  Progress: 87.95%  Words/thread/sec: 10.91k  Alpha: 0.006025  Progress: 88.26%  Words/thread/sec: 10.95k  Alpha: 0.005870  Progress: 88.57%  Words/thread/sec: 10.92k  Alpha: 0.005717  Progress: 88.83%  Words/thread/sec: 10.92k  Alpha: 0.005584  Progress: 89.10%  Words/thread/sec: 10.92k  Alpha: 0.005450  Progress: 89.41%  Words/thread/sec: 10.93k  Alpha: 0.005294  Progress: 89.68%  Words/thread/sec: 10.92k  Alpha: 0.005162  Progress: 89.94%  Words/thread/sec: 10.93k  Alpha: 0.005029  Progress: 90.22%  Words/thread/sec: 10.93k  Alpha: 0.004892  Progress: 90.49%  Words/thread/sec: 10.93k  Alpha: 0.004755  Progress: 90.76%  Words/thread/sec: 10.92k  Alpha: 0.004622  Progress: 91.03%  Words/thread/sec: 10.93k  Alpha: 0.004484  Progress: 91.34%  Words/thread/sec: 10.91k  Alpha: 0.004328  Progress: 91.61%  Words/thread/sec: 10.93k  Alpha: 0.004195  Progress: 91.87%  Words/thread/sec: 10.92k  Alpha: 0.004063  Progress: 92.18%  Words/thread/sec: 10.91k  Alpha: 0.003908  Progress: 92.46%  Words/thread/sec: 10.91k  Alpha: 0.003772  Progress: 92.77%  Words/thread/sec: 10.92k  Alpha: 0.003613  Progress: 93.04%  Words/thread/sec: 10.93k  Alpha: 0.003481  Progress: 94.05%  Words/thread/sec: 10.93k  Alpha: 0.002976  Progress: 94.38%  Words/thread/sec: 10.92k  Alpha: 0.002812  Progress: 94.68%  Words/thread/sec: 10.92k  Alpha: 0.002662  Progress: 94.98%  Words/thread/sec: 10.95k  Alpha: 0.002508  Progress: 95.29%  Words/thread/sec: 10.92k  Alpha: 0.002355  Progress: 95.56%  Words/thread/sec: 10.93k  Alpha: 0.002220  Progress: 95.83%  Words/thread/sec: 10.92k  Alpha: 0.002086  Progress: 96.14%  Words/thread/sec: 10.93k  Alpha: 0.001930  Progress: 96.41%  Words/thread/sec: 10.92k  Alpha: 0.001797  Progress: 96.72%  Words/thread/sec: 10.91k  Alpha: 0.001638  Progress: 97.00%  Words/thread/sec: 10.94k  Alpha: 0.001500  Progress: 97.27%  Words/thread/sec: 10.94k  Alpha: 0.001363  Progress: 97.54%  Words/thread/sec: 10.93k  Alpha: 0.001231  Progress: 97.81%  Words/thread/sec: 10.92k  Alpha: 0.001095  Progress: 98.12%  Words/thread/sec: 10.92k  Alpha: 0.000939  Progress: 98.39%  Words/thread/sec: 10.94k  Alpha: 0.000806  Progress: 98.71%  Words/thread/sec: 10.91k  Alpha: 0.000646  Progress: 99.02%  Words/thread/sec: 10.90k  Alpha: 0.000492  Progress: 99.29%  Words/thread/sec: 10.93k  Alpha: 0.000357  Progress: 99.61%  Words/thread/sec: 10.93k  Alpha: 0.000197  Progress: 99.92%  Words/thread/sec: 10.90k  # started on Wed Mar  3 05:54:51 2021


 Performance counter stats for 'system wide':

S0-C0           1          91,337.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             14,799      context-switches          #    0.162 K/sec                  
S0-C0           1                263      cpu-migrations            #    0.003 K/sec                  
S0-C0           1                  8      page-faults               #    0.000 K/sec                  
S0-C0           1      2,356,837,089      cycles                    #    0.026 GHz                    
S0-C0           1      2,176,622,010      instructions              #    0.92  insn per cycle         
S0-C0           1      4,157,747,949      branches                  #   45.521 M/sec                  
S0-C0           1         64,041,052      branch-misses             #    1.54% of all branches        
S0-C1           1          91,337.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,969      context-switches          #    0.054 K/sec                  
S0-C1           1                251      cpu-migrations            #    0.003 K/sec                  
S0-C1           1                  7      page-faults               #    0.000 K/sec                  
S0-C1           1      1,696,111,263      cycles                    #    0.019 GHz                    
S0-C1           1      2,051,328,282      instructions              #    1.21  insn per cycle         
S0-C1           1      4,141,367,656      branches                  #   45.341 M/sec                  
S0-C1           1         60,678,519      branch-misses             #    1.47% of all branches        
S0-C2           1          91,337.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,743      context-switches          #    0.041 K/sec                  
S0-C2           1                234      cpu-migrations            #    0.003 K/sec                  
S0-C2           1                  7      page-faults               #    0.000 K/sec                  
S0-C2           1      1,628,258,842      cycles                    #    0.018 GHz                    
S0-C2           1      2,027,009,585      instructions              #    1.24  insn per cycle         
S0-C2           1      4,138,483,604      branches                  #   45.310 M/sec                  
S0-C2           1         60,156,706      branch-misses             #    1.45% of all branches        
S0-C3           1          91,337.46 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,985      context-switches          #    0.066 K/sec                  
S0-C3           1                242      cpu-migrations            #    0.003 K/sec                  
S0-C3           1            130,133      page-faults               #    0.001 M/sec                  
S0-C3           1      1,973,276,711      cycles                    #    0.022 GHz                    
S0-C3           1      4,018,725,493      instructions              #    2.04  insn per cycle         
S0-C3           1      4,268,630,154      branches                  #   46.735 M/sec                  
S0-C3           1         66,139,636      branch-misses             #    1.55% of all branches        

      91.337878414 seconds time elapsed

perf stat -o ../data/word2vec_perf_output_no_branch_1614750891015273642.txt --per-core -a taskset -c 0-3 ./word2vec_no-guess-branch-probability -train ../data/text8_3.3mb -output ../data/text8-vector.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 4 -binary 1 -iter 15
Starting training using file ../data/text8_3.3mb
100K200K300K400K500KVocab size: 9546
Words in train file: 524166
Alpha: 0.050000  Progress: 0.14%  Words/thread/sec: 5.94k  Alpha: 0.050000  Progress: 0.28%  Words/thread/sec: 12.25k  Alpha: 0.049858  Progress: 0.43%  Words/thread/sec: 18.30k  Alpha: 0.049858  Progress: 0.56%  Words/thread/sec: 24.10k  Alpha: 0.049719  Progress: 0.70%  Words/thread/sec: 13.88k  Alpha: 0.049648  Progress: 0.86%  Words/thread/sec: 16.83k  Alpha: 0.049572  Progress: 1.00%  Words/thread/sec: 19.70k  Alpha: 0.049498  Progress: 1.15%  Words/thread/sec: 22.50k  Alpha: 0.049424  Progress: 1.28%  Words/thread/sec: 17.25k  Alpha: 0.049361  Progress: 1.43%  Words/thread/sec: 18.20k  Alpha: 0.049287  Progress: 1.57%  Words/thread/sec: 19.96k  Alpha: 0.049216  Progress: 1.72%  Words/thread/sec: 21.81k  Alpha: 0.049142  Progress: 1.87%  Words/thread/sec: 18.31k  Alpha: 0.049067  Progress: 2.01%  Words/thread/sec: 19.00k  Alpha: 0.048993  Progress: 2.16%  Words/thread/sec: 20.34k  Alpha: 0.048918  Progress: 2.31%  Words/thread/sec: 21.64k  Alpha: 0.048847  Progress: 2.45%  Words/thread/sec: 18.89k  Alpha: 0.048777  Progress: 2.59%  Words/thread/sec: 19.39k  Alpha: 0.048705  Progress: 2.73%  Words/thread/sec: 20.37k  Alpha: 0.048634  Progress: 2.88%  Words/thread/sec: 21.44k  Alpha: 0.048560  Progress: 3.03%  Words/thread/sec: 19.25k  Alpha: 0.048486  Progress: 3.18%  Words/thread/sec: 19.70k  Alpha: 0.048411  Progress: 3.32%  Words/thread/sec: 20.51k  Alpha: 0.048341  Progress: 3.46%  Words/thread/sec: 21.38k  Alpha: 0.048269  Progress: 3.60%  Words/thread/sec: 19.48k  Alpha: 0.048199  Progress: 3.75%  Words/thread/sec: 19.85k  Alpha: 0.048125  Progress: 3.90%  Words/thread/sec: 20.55k  Alpha: 0.048052  Progress: 4.03%  Words/thread/sec: 21.27k  Alpha: 0.047983  Progress: 4.19%  Words/thread/sec: 19.67k  Alpha: 0.047907  Progress: 4.33%  Words/thread/sec: 19.99k  Alpha: 0.047834  Progress: 4.48%  Words/thread/sec: 20.62k  Alpha: 0.047834  Progress: 4.63%  Words/thread/sec: 21.28k  Alpha: 0.047687  Progress: 4.77%  Words/thread/sec: 19.86k  Alpha: 0.047615  Progress: 4.92%  Words/thread/sec: 20.13k  Alpha: 0.047539  Progress: 5.07%  Words/thread/sec: 20.69k  Alpha: 0.047467  Progress: 5.21%  Words/thread/sec: 21.26k  Alpha: 0.047394  Progress: 5.36%  Words/thread/sec: 20.35k  Alpha: 0.047321  Progress: 5.50%  Words/thread/sec: 20.21k  Alpha: 0.047248  Progress: 5.65%  Words/thread/sec: 20.72k  Alpha: 0.047248  Progress: 5.80%  Words/thread/sec: 21.27k  Alpha: 0.047101  Progress: 5.94%  Words/thread/sec: 20.72k  Alpha: 0.047032  Progress: 6.08%  Words/thread/sec: 20.26k  Alpha: 0.046961  Progress: 6.22%  Words/thread/sec: 20.72k  Alpha: 0.046889  Progress: 6.37%  Words/thread/sec: 21.19k  Alpha: 0.046816  Progress: 6.84%  Words/thread/sec: 20.86k  Alpha: 0.046578  Progress: 6.98%  Words/thread/sec: 20.73k  Alpha: 0.046508  Progress: 7.13%  Words/thread/sec: 21.12k  Alpha: 0.046434  Progress: 7.27%  Words/thread/sec: 21.26k  Alpha: 0.046365  Progress: 7.42%  Words/thread/sec: 20.85k  Alpha: 0.046290  Progress: 7.56%  Words/thread/sec: 20.76k  Alpha: 0.046220  Progress: 7.71%  Words/thread/sec: 21.10k  Alpha: 0.046145  Progress: 7.86%  Words/thread/sec: 21.26k  Alpha: 0.046072  Progress: 8.01%  Words/thread/sec: 20.87k  Alpha: 0.045997  Progress: 8.15%  Words/thread/sec: 20.81k  Alpha: 0.045923  Progress: 8.29%  Words/thread/sec: 21.11k  Alpha: 0.045854  Progress: 8.44%  Words/thread/sec: 21.26k  Alpha: 0.045780  Progress: 8.59%  Words/thread/sec: 20.87k  Alpha: 0.045706  Progress: 8.74%  Words/thread/sec: 20.82k  Alpha: 0.045632  Progress: 8.89%  Words/thread/sec: 21.12k  Alpha: 0.045557  Progress: 9.03%  Words/thread/sec: 21.26k  Alpha: 0.045486  Progress: 9.17%  Words/thread/sec: 20.88k  Alpha: 0.045414  Progress: 9.31%  Words/thread/sec: 20.82k  Alpha: 0.045343  Progress: 9.46%  Words/thread/sec: 21.09k  Alpha: 0.045271  Progress: 9.60%  Words/thread/sec: 21.23k  Alpha: 0.045198  Progress: 9.75%  Words/thread/sec: 20.87k  Alpha: 0.045126  Progress: 9.90%  Words/thread/sec: 20.85k  Alpha: 0.045050  Progress: 10.04%  Words/thread/sec: 21.09k  Alpha: 0.044979  Progress: 10.18%  Words/thread/sec: 21.21k  Alpha: 0.044909  Progress: 10.33%  Words/thread/sec: 20.86k  Alpha: 0.044837  Progress: 10.48%  Words/thread/sec: 20.84k  Alpha: 0.044762  Progress: 10.62%  Words/thread/sec: 21.07k  Alpha: 0.044690  Progress: 10.76%  Words/thread/sec: 21.19k  Alpha: 0.044621  Progress: 10.89%  Words/thread/sec: 21.00k  Alpha: 0.044557  Progress: 11.03%  Words/thread/sec: 20.80k  Alpha: 0.044484  Progress: 11.18%  Words/thread/sec: 21.02k  Alpha: 0.044410  Progress: 11.33%  Words/thread/sec: 21.15k  Alpha: 0.044337  Progress: 11.47%  Words/thread/sec: 21.00k  Alpha: 0.044265  Progress: 11.62%  Words/thread/sec: 20.82k  Alpha: 0.044189  Progress: 11.77%  Words/thread/sec: 21.04k  Alpha: 0.044116  Progress: 11.91%  Words/thread/sec: 21.16k  Alpha: 0.044044  Progress: 12.06%  Words/thread/sec: 21.17k  Alpha: 0.043971  Progress: 12.20%  Words/thread/sec: 20.83k  Alpha: 0.043899  Progress: 12.35%  Words/thread/sec: 21.03k  Alpha: 0.043826  Progress: 12.50%  Words/thread/sec: 21.15k  Alpha: 0.043752  Progress: 12.64%  Words/thread/sec: 21.31k  Alpha: 0.043682  Progress: 12.87%  Words/thread/sec: 20.98k  Alpha: 0.043565  Progress: 13.02%  Words/thread/sec: 21.17k  Alpha: 0.043491  Progress: 13.16%  Words/thread/sec: 21.28k  Alpha: 0.043419  Progress: 13.44%  Words/thread/sec: 21.20k  Alpha: 0.043278  Progress: 13.68%  Words/thread/sec: 21.04k  Alpha: 0.043158  Progress: 13.83%  Words/thread/sec: 21.21k  Alpha: 0.043084  Progress: 13.97%  Words/thread/sec: 21.17k  Alpha: 0.043016  Progress: 14.12%  Words/thread/sec: 21.32k  Alpha: 0.042942  Progress: 14.26%  Words/thread/sec: 21.02k  Alpha: 0.042871  Progress: 14.41%  Words/thread/sec: 21.19k  Alpha: 0.042796  Progress: 14.55%  Words/thread/sec: 21.17k  Alpha: 0.042723  Progress: 14.70%  Words/thread/sec: 21.32k  Alpha: 0.042648  Progress: 14.85%  Words/thread/sec: 21.04k  Alpha: 0.042575  Progress: 14.99%  Words/thread/sec: 21.19k  Alpha: 0.042504  Progress: 15.14%  Words/thread/sec: 21.17k  Alpha: 0.042429  Progress: 15.29%  Words/thread/sec: 21.31k  Alpha: 0.042355  Progress: 15.44%  Words/thread/sec: 21.04k  Alpha: 0.042281  Progress: 15.59%  Words/thread/sec: 21.21k  Alpha: 0.042206  Progress: 15.73%  Words/thread/sec: 21.17k  Alpha: 0.042135  Progress: 15.87%  Words/thread/sec: 21.30k  Alpha: 0.042064  Progress: 16.02%  Words/thread/sec: 21.04k  Alpha: 0.041992  Progress: 16.16%  Words/thread/sec: 21.18k  Alpha: 0.041921  Progress: 16.31%  Words/thread/sec: 21.16k  Alpha: 0.041847  Progress: 16.45%  Words/thread/sec: 21.28k  Alpha: 0.041775  Progress: 16.60%  Words/thread/sec: 21.04k  Alpha: 0.041700  Progress: 16.74%  Words/thread/sec: 21.18k  Alpha: 0.041629  Progress: 16.89%  Words/thread/sec: 21.15k  Alpha: 0.041557  Progress: 17.03%  Words/thread/sec: 21.27k  Alpha: 0.041486  Progress: 17.18%  Words/thread/sec: 21.03k  Alpha: 0.041412  Progress: 17.32%  Words/thread/sec: 21.17k  Alpha: 0.041339  Progress: 17.45%  Words/thread/sec: 21.18k  Alpha: 0.041275  Progress: 17.59%  Words/thread/sec: 21.28k  Alpha: 0.041206  Progress: 17.73%  Words/thread/sec: 21.00k  Alpha: 0.041133  Progress: 17.88%  Words/thread/sec: 21.14k  Alpha: 0.041059  Progress: 18.03%  Words/thread/sec: 21.17k  Alpha: 0.040987  Progress: 18.17%  Words/thread/sec: 21.29k  Alpha: 0.040913  Progress: 18.32%  Words/thread/sec: 21.01k  Alpha: 0.040838  Progress: 18.47%  Words/thread/sec: 21.14k  Alpha: 0.040766  Progress: 18.62%  Words/thread/sec: 21.28k  Alpha: 0.040692  Progress: 18.76%  Words/thread/sec: 21.28k  Alpha: 0.040620  Progress: 18.90%  Words/thread/sec: 21.05k  Alpha: 0.040551  Progress: 19.04%  Words/thread/sec: 21.16k  Alpha: 0.040478  Progress: 19.19%  Words/thread/sec: 21.28k  Alpha: 0.040405  Progress: 19.34%  Words/thread/sec: 21.27k  Alpha: 0.040331  Progress: 19.57%  Words/thread/sec: 21.11k  Alpha: 0.040214  Progress: 19.72%  Words/thread/sec: 21.22k  Alpha: 0.040141  Progress: 19.86%  Words/thread/sec: 21.20k  Alpha: 0.040069  Progress: 20.00%  Words/thread/sec: 21.29k  Alpha: 0.040000  Progress: 20.39%  Words/thread/sec: 21.13k  Alpha: 0.039807  Progress: 20.53%  Words/thread/sec: 21.25k  Alpha: 0.039734  Progress: 20.68%  Words/thread/sec: 21.38k  Alpha: 0.039659  Progress: 20.82%  Words/thread/sec: 21.27k  Alpha: 0.039591  Progress: 20.96%  Words/thread/sec: 21.13k  Alpha: 0.039520  Progress: 21.11%  Words/thread/sec: 21.24k  Alpha: 0.039445  Progress: 21.26%  Words/thread/sec: 21.36k  Alpha: 0.039369  Progress: 21.41%  Words/thread/sec: 21.28k  Alpha: 0.039297  Progress: 21.55%  Words/thread/sec: 21.13k  Alpha: 0.039224  Progress: 21.69%  Words/thread/sec: 21.23k  Alpha: 0.039154  Progress: 21.84%  Words/thread/sec: 21.35k  Alpha: 0.039080  Progress: 21.99%  Words/thread/sec: 21.27k  Alpha: 0.039005  Progress: 22.14%  Words/thread/sec: 21.14k  Alpha: 0.038931  Progress: 22.29%  Words/thread/sec: 21.24k  Alpha: 0.038857  Progress: 22.43%  Words/thread/sec: 21.34k  Alpha: 0.038785  Progress: 22.57%  Words/thread/sec: 21.26k  Alpha: 0.038715  Progress: 22.71%  Words/thread/sec: 21.13k  Alpha: 0.038643  Progress: 22.86%  Words/thread/sec: 21.22k  Alpha: 0.038571  Progress: 23.00%  Words/thread/sec: 21.32k  Alpha: 0.038499  Progress: 23.15%  Words/thread/sec: 21.25k  Alpha: 0.038426  Progress: 23.30%  Words/thread/sec: 21.13k  Alpha: 0.038351  Progress: 23.44%  Words/thread/sec: 21.21k  Alpha: 0.038279  Progress: 23.58%  Words/thread/sec: 21.31k  Alpha: 0.038208  Progress: 23.73%  Words/thread/sec: 21.25k  Alpha: 0.038137  Progress: 23.87%  Words/thread/sec: 21.13k  Alpha: 0.038063  Progress: 24.00%  Words/thread/sec: 21.24k  Alpha: 0.037999  Progress: 24.15%  Words/thread/sec: 21.31k  Alpha: 0.037926  Progress: 24.29%  Words/thread/sec: 21.22k  Alpha: 0.037857  Progress: 24.43%  Words/thread/sec: 21.09k  Alpha: 0.037785  Progress: 24.57%  Words/thread/sec: 21.22k  Alpha: 0.037713  Progress: 24.72%  Words/thread/sec: 21.30k  Alpha: 0.037638  Progress: 24.87%  Words/thread/sec: 21.21k  Alpha: 0.037565  Progress: 25.02%  Words/thread/sec: 21.17k  Alpha: 0.037492  Progress: 25.17%  Words/thread/sec: 21.22k  Alpha: 0.037416  Progress: 25.31%  Words/thread/sec: 21.30k  Alpha: 0.037344  Progress: 25.46%  Words/thread/sec: 21.21k  Alpha: 0.037272  Progress: 25.59%  Words/thread/sec: 21.25k  Alpha: 0.037203  Progress: 25.74%  Words/thread/sec: 21.21k  Alpha: 0.037130  Progress: 25.89%  Words/thread/sec: 21.29k  Alpha: 0.037057  Progress: 26.13%  Words/thread/sec: 21.28k  Alpha: 0.036936  Progress: 26.27%  Words/thread/sec: 21.17k  Alpha: 0.036867  Progress: 26.41%  Words/thread/sec: 21.24k  Alpha: 0.036793  Progress: 26.55%  Words/thread/sec: 21.30k  Alpha: 0.036725  Progress: 26.76%  Words/thread/sec: 21.32k  Alpha: 0.036618  Progress: 27.09%  Words/thread/sec: 21.26k  Alpha: 0.036457  Progress: 27.23%  Words/thread/sec: 21.31k  Alpha: 0.036386  Progress: 27.38%  Words/thread/sec: 21.37k  Alpha: 0.036312  Progress: 27.51%  Words/thread/sec: 21.21k  Alpha: 0.036244  Progress: 27.66%  Words/thread/sec: 21.24k  Alpha: 0.036169  Progress: 27.81%  Words/thread/sec: 21.30k  Alpha: 0.036097  Progress: 27.96%  Words/thread/sec: 21.37k  Alpha: 0.036022  Progress: 28.10%  Words/thread/sec: 21.21k  Alpha: 0.035949  Progress: 28.25%  Words/thread/sec: 21.24k  Alpha: 0.035875  Progress: 28.40%  Words/thread/sec: 21.30k  Alpha: 0.035801  Progress: 28.54%  Words/thread/sec: 21.36k  Alpha: 0.035731  Progress: 28.69%  Words/thread/sec: 21.21k  Alpha: 0.035655  Progress: 28.83%  Words/thread/sec: 21.24k  Alpha: 0.035583  Progress: 28.98%  Words/thread/sec: 21.30k  Alpha: 0.035509  Progress: 29.13%  Words/thread/sec: 21.36k  Alpha: 0.035434  Progress: 29.27%  Words/thread/sec: 21.21k  Alpha: 0.035363  Progress: 29.42%  Words/thread/sec: 21.23k  Alpha: 0.035291  Progress: 29.56%  Words/thread/sec: 21.29k  Alpha: 0.035219  Progress: 29.70%  Words/thread/sec: 21.34k  Alpha: 0.035148  Progress: 29.85%  Words/thread/sec: 21.20k  Alpha: 0.035074  Progress: 29.99%  Words/thread/sec: 21.22k  Alpha: 0.035003  Progress: 30.14%  Words/thread/sec: 21.28k  Alpha: 0.034928  Progress: 30.29%  Words/thread/sec: 21.34k  Alpha: 0.034857  Progress: 30.43%  Words/thread/sec: 21.19k  Alpha: 0.034786  Progress: 30.56%  Words/thread/sec: 21.26k  Alpha: 0.034722  Progress: 30.70%  Words/thread/sec: 21.27k  Alpha: 0.034648  Progress: 30.85%  Words/thread/sec: 21.32k  Alpha: 0.034576  Progress: 30.99%  Words/thread/sec: 21.17k  Alpha: 0.034506  Progress: 31.13%  Words/thread/sec: 21.26k  Alpha: 0.034434  Progress: 31.28%  Words/thread/sec: 21.25k  Alpha: 0.034362  Progress: 31.43%  Words/thread/sec: 21.31k  Alpha: 0.034287  Progress: 31.57%  Words/thread/sec: 21.22k  Alpha: 0.034214  Progress: 31.72%  Words/thread/sec: 21.27k  Alpha: 0.034141  Progress: 31.87%  Words/thread/sec: 21.26k  Alpha: 0.034065  Progress: 32.01%  Words/thread/sec: 21.31k  Alpha: 0.033993  Progress: 32.15%  Words/thread/sec: 21.28k  Alpha: 0.033924  Progress: 32.30%  Words/thread/sec: 21.27k  Alpha: 0.033852  Progress: 32.44%  Words/thread/sec: 21.25k  Alpha: 0.033779  Progress: 32.68%  Words/thread/sec: 21.35k  Alpha: 0.033660  Progress: 32.81%  Words/thread/sec: 21.28k  Alpha: 0.033596  Progress: 32.95%  Words/thread/sec: 21.22k  Alpha: 0.033527  Progress: 33.09%  Words/thread/sec: 21.28k  Alpha: 0.033457  Progress: 33.23%  Words/thread/sec: 21.33k  Alpha: 0.033383  Progress: 33.45%  Words/thread/sec: 21.31k  Alpha: 0.033276  Progress: 33.67%  Words/thread/sec: 21.30k  Alpha: 0.033166  Progress: 33.81%  Words/thread/sec: 21.24k  Alpha: 0.033096  Progress: 34.08%  Words/thread/sec: 21.37k  Alpha: 0.032960  Progress: 34.23%  Words/thread/sec: 21.28k  Alpha: 0.032884  Progress: 34.37%  Words/thread/sec: 21.27k  Alpha: 0.032816  Progress: 34.51%  Words/thread/sec: 21.31k  Alpha: 0.032746  Progress: 34.66%  Words/thread/sec: 21.36k  Alpha: 0.032671  Progress: 34.81%  Words/thread/sec: 21.27k  Alpha: 0.032597  Progress: 34.95%  Words/thread/sec: 21.27k  Alpha: 0.032524  Progress: 35.10%  Words/thread/sec: 21.31k  Alpha: 0.032451  Progress: 35.24%  Words/thread/sec: 21.35k  Alpha: 0.032380  Progress: 35.38%  Words/thread/sec: 21.27k  Alpha: 0.032309  Progress: 35.53%  Words/thread/sec: 21.26k  Alpha: 0.032234  Progress: 35.68%  Words/thread/sec: 21.30k  Alpha: 0.032160  Progress: 35.83%  Words/thread/sec: 21.35k  Alpha: 0.032085  Progress: 35.97%  Words/thread/sec: 21.27k  Alpha: 0.032013  Progress: 36.12%  Words/thread/sec: 21.26k  Alpha: 0.031942  Progress: 36.26%  Words/thread/sec: 21.30k  Alpha: 0.031871  Progress: 36.40%  Words/thread/sec: 21.34k  Alpha: 0.031799  Progress: 36.54%  Words/thread/sec: 21.26k  Alpha: 0.031728  Progress: 36.69%  Words/thread/sec: 21.25k  Alpha: 0.031654  Progress: 36.84%  Words/thread/sec: 21.29k  Alpha: 0.031579  Progress: 36.98%  Words/thread/sec: 21.34k  Alpha: 0.031508  Progress: 37.11%  Words/thread/sec: 21.30k  Alpha: 0.031444  Progress: 37.25%  Words/thread/sec: 21.24k  Alpha: 0.031373  Progress: 37.40%  Words/thread/sec: 21.28k  Alpha: 0.031299  Progress: 37.55%  Words/thread/sec: 21.32k  Alpha: 0.031227  Progress: 37.69%  Words/thread/sec: 21.29k  Alpha: 0.031154  Progress: 37.83%  Words/thread/sec: 21.23k  Alpha: 0.031085  Progress: 37.97%  Words/thread/sec: 21.26k  Alpha: 0.031013  Progress: 38.12%  Words/thread/sec: 21.31k  Alpha: 0.030939  Progress: 38.27%  Words/thread/sec: 21.34k  Alpha: 0.030866  Progress: 38.41%  Words/thread/sec: 21.23k  Alpha: 0.030793  Progress: 38.57%  Words/thread/sec: 21.27k  Alpha: 0.030717  Progress: 38.71%  Words/thread/sec: 21.31k  Alpha: 0.030717  Progress: 38.85%  Words/thread/sec: 21.39k  Alpha: 0.030575  Progress: 39.09%  Words/thread/sec: 21.28k  Alpha: 0.030456  Progress: 39.23%  Words/thread/sec: 21.31k  Alpha: 0.030383  Progress: 39.38%  Words/thread/sec: 21.35k  Alpha: 0.030311  Progress: 39.52%  Words/thread/sec: 21.26k  Alpha: 0.030242  Progress: 39.66%  Words/thread/sec: 21.27k  Alpha: 0.030168  Progress: 39.80%  Words/thread/sec: 21.30k  Alpha: 0.030098  Progress: 39.95%  Words/thread/sec: 21.34k  Alpha: 0.030024  Progress: 40.24%  Words/thread/sec: 21.34k  Alpha: 0.029878  Progress: 40.39%  Words/thread/sec: 21.34k  Alpha: 0.029807  Progress: 40.53%  Words/thread/sec: 21.27k  Alpha: 0.029736  Progress: 40.65%  Words/thread/sec: 21.29k  Alpha: 0.029673  Progress: 40.80%  Words/thread/sec: 21.37k  Alpha: 0.029599  Progress: 41.04%  Words/thread/sec: 21.23k  Alpha: 0.029478  Progress: 41.18%  Words/thread/sec: 21.29k  Alpha: 0.029410  Progress: 41.33%  Words/thread/sec: 21.34k  Alpha: 0.029335  Progress: 41.48%  Words/thread/sec: 21.42k  Alpha: 0.029260  Progress: 41.63%  Words/thread/sec: 21.23k  Alpha: 0.029186  Progress: 41.77%  Words/thread/sec: 21.30k  Alpha: 0.029113  Progress: 41.92%  Words/thread/sec: 21.34k  Alpha: 0.029113  Progress: 42.06%  Words/thread/sec: 21.41k  Alpha: 0.028972  Progress: 42.20%  Words/thread/sec: 21.22k  Alpha: 0.028898  Progress: 42.35%  Words/thread/sec: 21.29k  Alpha: 0.028824  Progress: 42.50%  Words/thread/sec: 21.33k  Alpha: 0.028751  Progress: 42.65%  Words/thread/sec: 21.41k  Alpha: 0.028676  Progress: 42.79%  Words/thread/sec: 21.22k  Alpha: 0.028605  Progress: 42.93%  Words/thread/sec: 21.28k  Alpha: 0.028534  Progress: 43.07%  Words/thread/sec: 21.32k  Alpha: 0.028463  Progress: 43.22%  Words/thread/sec: 21.39k  Alpha: 0.028391  Progress: 43.37%  Words/thread/sec: 21.22k  Alpha: 0.028316  Progress: 43.51%  Words/thread/sec: 21.28k  Alpha: 0.028243  Progress: 43.66%  Words/thread/sec: 21.32k  Alpha: 0.028171  Progress: 43.81%  Words/thread/sec: 21.39k  Alpha: 0.028096  Progress: 43.96%  Words/thread/sec: 21.22k  Alpha: 0.028021  Progress: 44.10%  Words/thread/sec: 21.28k  Alpha: 0.027949  Progress: 44.25%  Words/thread/sec: 21.32k  Alpha: 0.027877  Progress: 44.39%  Words/thread/sec: 21.39k  Alpha: 0.027805  Progress: 44.54%  Words/thread/sec: 21.22k  Alpha: 0.027732  Progress: 44.68%  Words/thread/sec: 21.28k  Alpha: 0.027660  Progress: 44.82%  Words/thread/sec: 21.34k  Alpha: 0.027591  Progress: 44.97%  Words/thread/sec: 21.38k  Alpha: 0.027516  Progress: 45.11%  Words/thread/sec: 21.26k  Alpha: 0.027447  Progress: 45.26%  Words/thread/sec: 21.28k  Alpha: 0.027371  Progress: 45.41%  Words/thread/sec: 21.34k  Alpha: 0.027297  Progress: 45.55%  Words/thread/sec: 21.38k  Alpha: 0.027225  Progress: 45.79%  Words/thread/sec: 21.25k  Alpha: 0.027105  Progress: 45.93%  Words/thread/sec: 21.31k  Alpha: 0.027034  Progress: 46.08%  Words/thread/sec: 21.35k  Alpha: 0.026962  Progress: 46.21%  Words/thread/sec: 21.35k  Alpha: 0.026893  Progress: 46.35%  Words/thread/sec: 21.24k  Alpha: 0.026823  Progress: 46.50%  Words/thread/sec: 21.30k  Alpha: 0.026748  Progress: 46.65%  Words/thread/sec: 21.34k  Alpha: 0.026674  Progress: 46.80%  Words/thread/sec: 21.35k  Alpha: 0.026600  Progress: 47.09%  Words/thread/sec: 21.30k  Alpha: 0.026457  Progress: 47.23%  Words/thread/sec: 21.28k  Alpha: 0.026457  Progress: 47.38%  Words/thread/sec: 21.35k  Alpha: 0.026310  Progress: 47.53%  Words/thread/sec: 21.38k  Alpha: 0.026237  Progress: 47.78%  Words/thread/sec: 21.26k  Alpha: 0.026112  Progress: 47.92%  Words/thread/sec: 21.33k  Alpha: 0.026041  Progress: 48.07%  Words/thread/sec: 21.36k  Alpha: 0.025966  Progress: 48.21%  Words/thread/sec: 21.41k  Alpha: 0.025897  Progress: 48.35%  Words/thread/sec: 21.26k  Alpha: 0.025825  Progress: 48.49%  Words/thread/sec: 21.32k  Alpha: 0.025753  Progress: 48.63%  Words/thread/sec: 21.35k  Alpha: 0.025683  Progress: 48.78%  Words/thread/sec: 21.40k  Alpha: 0.025611  Progress: 48.93%  Words/thread/sec: 21.25k  Alpha: 0.025537  Progress: 49.07%  Words/thread/sec: 21.31k  Alpha: 0.025464  Progress: 49.22%  Words/thread/sec: 21.35k  Alpha: 0.025389  Progress: 49.37%  Words/thread/sec: 21.40k  Alpha: 0.025315  Progress: 49.51%  Words/thread/sec: 21.26k  Alpha: 0.025243  Progress: 49.66%  Words/thread/sec: 21.31k  Alpha: 0.025171  Progress: 49.80%  Words/thread/sec: 21.34k  Alpha: 0.025100  Progress: 49.94%  Words/thread/sec: 21.39k  Alpha: 0.025028  Progress: 50.09%  Words/thread/sec: 21.25k  Alpha: 0.024953  Progress: 50.25%  Words/thread/sec: 21.31k  Alpha: 0.024877  Progress: 50.39%  Words/thread/sec: 21.34k  Alpha: 0.024806  Progress: 50.53%  Words/thread/sec: 21.39k  Alpha: 0.024733  Progress: 50.68%  Words/thread/sec: 21.25k  Alpha: 0.024658  Progress: 50.83%  Words/thread/sec: 21.31k  Alpha: 0.024585  Progress: 50.97%  Words/thread/sec: 21.34k  Alpha: 0.024513  Progress: 51.12%  Words/thread/sec: 21.39k  Alpha: 0.024441  Progress: 51.27%  Words/thread/sec: 21.28k  Alpha: 0.024366  Progress: 51.41%  Words/thread/sec: 21.31k  Alpha: 0.024294  Progress: 51.56%  Words/thread/sec: 21.33k  Alpha: 0.024219  Progress: 51.70%  Words/thread/sec: 21.39k  Alpha: 0.024150  Progress: 51.83%  Words/thread/sec: 21.31k  Alpha: 0.024084  Progress: 51.98%  Words/thread/sec: 21.30k  Alpha: 0.024008  Progress: 52.13%  Words/thread/sec: 21.32k  Alpha: 0.023936  Progress: 52.27%  Words/thread/sec: 21.38k  Alpha: 0.023863  Progress: 52.49%  Words/thread/sec: 21.27k  Alpha: 0.023755  Progress: 52.64%  Words/thread/sec: 21.29k  Alpha: 0.023681  Progress: 52.78%  Words/thread/sec: 21.34k  Alpha: 0.023609  Progress: 52.92%  Words/thread/sec: 21.39k  Alpha: 0.023540  Progress: 53.06%  Words/thread/sec: 21.26k  Alpha: 0.023471  Progress: 53.21%  Words/thread/sec: 21.28k  Alpha: 0.023397  Progress: 53.35%  Words/thread/sec: 21.34k  Alpha: 0.023323  Progress: 53.50%  Words/thread/sec: 21.38k  Alpha: 0.023249  Progress: 53.79%  Words/thread/sec: 21.27k  Alpha: 0.023105  Progress: 53.94%  Words/thread/sec: 21.32k  Alpha: 0.023030  Progress: 54.08%  Words/thread/sec: 21.35k  Alpha: 0.022960  Progress: 54.23%  Words/thread/sec: 21.37k  Alpha: 0.022886  Progress: 54.48%  Words/thread/sec: 21.30k  Alpha: 0.022762  Progress: 54.62%  Words/thread/sec: 21.33k  Alpha: 0.022691  Progress: 54.77%  Words/thread/sec: 21.35k  Alpha: 0.022615  Progress: 54.91%  Words/thread/sec: 21.36k  Alpha: 0.022547  Progress: 55.05%  Words/thread/sec: 21.29k  Alpha: 0.022475  Progress: 55.20%  Words/thread/sec: 21.33k  Alpha: 0.022402  Progress: 55.34%  Words/thread/sec: 21.34k  Alpha: 0.022332  Progress: 55.48%  Words/thread/sec: 21.36k  Alpha: 0.022260  Progress: 55.62%  Words/thread/sec: 21.29k  Alpha: 0.022188  Progress: 55.78%  Words/thread/sec: 21.32k  Alpha: 0.022112  Progress: 55.92%  Words/thread/sec: 21.34k  Alpha: 0.022038  Progress: 56.07%  Words/thread/sec: 21.36k  Alpha: 0.021963  Progress: 56.22%  Words/thread/sec: 21.29k  Alpha: 0.021892  Progress: 56.36%  Words/thread/sec: 21.32k  Alpha: 0.021821  Progress: 56.50%  Words/thread/sec: 21.34k  Alpha: 0.021748  Progress: 56.65%  Words/thread/sec: 21.35k  Alpha: 0.021677  Progress: 56.77%  Words/thread/sec: 21.31k  Alpha: 0.021613  Progress: 56.92%  Words/thread/sec: 21.31k  Alpha: 0.021538  Progress: 57.07%  Words/thread/sec: 21.33k  Alpha: 0.021467  Progress: 57.21%  Words/thread/sec: 21.34k  Alpha: 0.021393  Progress: 57.36%  Words/thread/sec: 21.30k  Alpha: 0.021322  Progress: 57.51%  Words/thread/sec: 21.31k  Alpha: 0.021247  Progress: 57.65%  Words/thread/sec: 21.32k  Alpha: 0.021175  Progress: 57.79%  Words/thread/sec: 21.34k  Alpha: 0.021104  Progress: 57.94%  Words/thread/sec: 21.34k  Alpha: 0.021031  Progress: 58.08%  Words/thread/sec: 21.30k  Alpha: 0.020959  Progress: 58.23%  Words/thread/sec: 21.32k  Alpha: 0.020885  Progress: 58.37%  Words/thread/sec: 21.34k  Alpha: 0.020816  Progress: 58.51%  Words/thread/sec: 21.37k  Alpha: 0.020746  Progress: 58.66%  Words/thread/sec: 21.30k  Alpha: 0.020671  Progress: 58.90%  Words/thread/sec: 21.35k  Alpha: 0.020551  Progress: 59.04%  Words/thread/sec: 21.37k  Alpha: 0.020478  Progress: 59.18%  Words/thread/sec: 21.29k  Alpha: 0.020410  Progress: 59.33%  Words/thread/sec: 21.32k  Alpha: 0.020337  Progress: 59.47%  Words/thread/sec: 21.34k  Alpha: 0.020263  Progress: 59.62%  Words/thread/sec: 21.36k  Alpha: 0.020192  Progress: 59.77%  Words/thread/sec: 21.29k  Alpha: 0.020117  Progress: 59.90%  Words/thread/sec: 21.32k  Alpha: 0.020048  Progress: 60.05%  Words/thread/sec: 21.33k  Alpha: 0.019975  Progress: 60.20%  Words/thread/sec: 21.36k  Alpha: 0.019900  Progress: 60.49%  Words/thread/sec: 21.33k  Alpha: 0.019753  Progress: 60.64%  Words/thread/sec: 21.30k  Alpha: 0.019681  Progress: 60.78%  Words/thread/sec: 21.35k  Alpha: 0.019611  Progress: 60.93%  Words/thread/sec: 21.36k  Alpha: 0.019537  Progress: 61.07%  Words/thread/sec: 21.33k  Alpha: 0.019464  Progress: 61.32%  Words/thread/sec: 21.33k  Alpha: 0.019342  Progress: 61.47%  Words/thread/sec: 21.34k  Alpha: 0.019267  Progress: 61.60%  Words/thread/sec: 21.33k  Alpha: 0.019199  Progress: 61.74%  Words/thread/sec: 21.36k  Alpha: 0.019128  Progress: 61.89%  Words/thread/sec: 21.33k  Alpha: 0.019055  Progress: 62.03%  Words/thread/sec: 21.33k  Alpha: 0.018985  Progress: 62.18%  Words/thread/sec: 21.32k  Alpha: 0.018911  Progress: 62.32%  Words/thread/sec: 21.35k  Alpha: 0.018839  Progress: 62.47%  Words/thread/sec: 21.32k  Alpha: 0.018765  Progress: 62.62%  Words/thread/sec: 21.33k  Alpha: 0.018690  Progress: 62.77%  Words/thread/sec: 21.33k  Alpha: 0.018615  Progress: 62.91%  Words/thread/sec: 21.35k  Alpha: 0.018544  Progress: 63.06%  Words/thread/sec: 21.32k  Alpha: 0.018472  Progress: 63.20%  Words/thread/sec: 21.33k  Alpha: 0.018400  Progress: 63.34%  Words/thread/sec: 21.32k  Alpha: 0.018329  Progress: 63.49%  Words/thread/sec: 21.35k  Alpha: 0.018253  Progress: 63.64%  Words/thread/sec: 21.32k  Alpha: 0.018179  Progress: 63.79%  Words/thread/sec: 21.32k  Alpha: 0.018107  Progress: 63.93%  Words/thread/sec: 21.32k  Alpha: 0.018034  Progress: 64.08%  Words/thread/sec: 21.34k  Alpha: 0.017960  Progress: 64.23%  Words/thread/sec: 21.32k  Alpha: 0.017886  Progress: 64.37%  Words/thread/sec: 21.32k  Alpha: 0.017814  Progress: 64.52%  Words/thread/sec: 21.33k  Alpha: 0.017738  Progress: 64.67%  Words/thread/sec: 21.37k  Alpha: 0.017666  Progress: 64.81%  Words/thread/sec: 21.32k  Alpha: 0.017594  Progress: 64.96%  Words/thread/sec: 21.32k  Alpha: 0.017519  Progress: 65.09%  Words/thread/sec: 21.35k  Alpha: 0.017453  Progress: 65.23%  Words/thread/sec: 21.36k  Alpha: 0.017384  Progress: 65.45%  Words/thread/sec: 21.33k  Alpha: 0.017273  Progress: 65.60%  Words/thread/sec: 21.34k  Alpha: 0.017201  Progress: 65.75%  Words/thread/sec: 21.34k  Alpha: 0.017127  Progress: 65.88%  Words/thread/sec: 21.32k  Alpha: 0.017059  Progress: 66.03%  Words/thread/sec: 21.33k  Alpha: 0.016986  Progress: 66.17%  Words/thread/sec: 21.33k  Alpha: 0.016914  Progress: 66.32%  Words/thread/sec: 21.33k  Alpha: 0.016841  Progress: 66.47%  Words/thread/sec: 21.32k  Alpha: 0.016767  Progress: 66.61%  Words/thread/sec: 21.33k  Alpha: 0.016697  Progress: 66.75%  Words/thread/sec: 21.33k  Alpha: 0.016623  Progress: 66.90%  Words/thread/sec: 21.33k  Alpha: 0.016549  Progress: 67.20%  Words/thread/sec: 21.36k  Alpha: 0.016402  Progress: 67.34%  Words/thread/sec: 21.31k  Alpha: 0.016332  Progress: 67.48%  Words/thread/sec: 21.32k  Alpha: 0.016260  Progress: 67.63%  Words/thread/sec: 21.35k  Alpha: 0.016186  Progress: 67.78%  Words/thread/sec: 21.36k  Alpha: 0.016112  Progress: 68.02%  Words/thread/sec: 21.34k  Alpha: 0.015991  Progress: 68.17%  Words/thread/sec: 21.34k  Alpha: 0.015916  Progress: 68.31%  Words/thread/sec: 21.34k  Alpha: 0.015843  Progress: 68.45%  Words/thread/sec: 21.35k  Alpha: 0.015775  Progress: 68.60%  Words/thread/sec: 21.33k  Alpha: 0.015702  Progress: 68.74%  Words/thread/sec: 21.33k  Alpha: 0.015632  Progress: 68.88%  Words/thread/sec: 21.33k  Alpha: 0.015559  Progress: 69.03%  Words/thread/sec: 21.35k  Alpha: 0.015486  Progress: 69.18%  Words/thread/sec: 21.33k  Alpha: 0.015412  Progress: 69.33%  Words/thread/sec: 21.33k  Alpha: 0.015336  Progress: 69.47%  Words/thread/sec: 21.32k  Alpha: 0.015265  Progress: 69.62%  Words/thread/sec: 21.35k  Alpha: 0.015190  Progress: 69.76%  Words/thread/sec: 21.33k  Alpha: 0.015119  Progress: 69.91%  Words/thread/sec: 21.33k  Alpha: 0.015047  Progress: 70.03%  Words/thread/sec: 21.33k  Alpha: 0.014983  Progress: 70.17%  Words/thread/sec: 21.34k  Alpha: 0.014913  Progress: 70.33%  Words/thread/sec: 21.32k  Alpha: 0.014837  Progress: 70.47%  Words/thread/sec: 21.32k  Alpha: 0.014766  Progress: 70.61%  Words/thread/sec: 21.31k  Alpha: 0.014693  Progress: 70.76%  Words/thread/sec: 21.35k  Alpha: 0.014620  Progress: 70.91%  Words/thread/sec: 21.32k  Alpha: 0.014546  Progress: 71.05%  Words/thread/sec: 21.33k  Alpha: 0.014475  Progress: 71.20%  Words/thread/sec: 21.32k  Alpha: 0.014401  Progress: 71.34%  Words/thread/sec: 21.35k  Alpha: 0.014329  Progress: 71.49%  Words/thread/sec: 21.32k  Alpha: 0.014257  Progress: 71.63%  Words/thread/sec: 21.33k  Alpha: 0.014183  Progress: 71.77%  Words/thread/sec: 21.33k  Alpha: 0.014113  Progress: 71.91%  Words/thread/sec: 21.34k  Alpha: 0.014043  Progress: 72.06%  Words/thread/sec: 21.33k  Alpha: 0.013968  Progress: 72.30%  Words/thread/sec: 21.35k  Alpha: 0.013849  Progress: 72.45%  Words/thread/sec: 21.33k  Alpha: 0.013776  Progress: 72.59%  Words/thread/sec: 21.31k  Alpha: 0.013704  Progress: 72.73%  Words/thread/sec: 21.32k  Alpha: 0.013635  Progress: 72.88%  Words/thread/sec: 21.35k  Alpha: 0.013562  Progress: 73.02%  Words/thread/sec: 21.33k  Alpha: 0.013490  Progress: 73.16%  Words/thread/sec: 21.31k  Alpha: 0.013421  Progress: 73.31%  Words/thread/sec: 21.31k  Alpha: 0.013347  Progress: 73.45%  Words/thread/sec: 21.34k  Alpha: 0.013273  Progress: 73.67%  Words/thread/sec: 21.35k  Alpha: 0.013163  Progress: 73.88%  Words/thread/sec: 21.32k  Alpha: 0.013062  Progress: 74.02%  Words/thread/sec: 21.33k  Alpha: 0.012992  Progress: 74.16%  Words/thread/sec: 21.32k  Alpha: 0.012921  Progress: 74.31%  Words/thread/sec: 21.35k  Alpha: 0.012846  Progress: 74.46%  Words/thread/sec: 21.31k  Alpha: 0.012771  Progress: 74.70%  Words/thread/sec: 21.36k  Alpha: 0.012650  Progress: 74.85%  Words/thread/sec: 21.34k  Alpha: 0.012575  Progress: 74.99%  Words/thread/sec: 21.31k  Alpha: 0.012506  Progress: 75.13%  Words/thread/sec: 21.32k  Alpha: 0.012433  Progress: 75.28%  Words/thread/sec: 21.36k  Alpha: 0.012362  Progress: 75.42%  Words/thread/sec: 21.33k  Alpha: 0.012291  Progress: 75.56%  Words/thread/sec: 21.31k  Alpha: 0.012218  Progress: 75.71%  Words/thread/sec: 21.32k  Alpha: 0.012144  Progress: 75.86%  Words/thread/sec: 21.36k  Alpha: 0.012071  Progress: 76.01%  Words/thread/sec: 21.33k  Alpha: 0.011996  Progress: 76.16%  Words/thread/sec: 21.31k  Alpha: 0.011921  Progress: 76.30%  Words/thread/sec: 21.32k  Alpha: 0.011850  Progress: 76.44%  Words/thread/sec: 21.35k  Alpha: 0.011779  Progress: 76.58%  Words/thread/sec: 21.33k  Alpha: 0.011708  Progress: 76.73%  Words/thread/sec: 21.31k  Alpha: 0.011636  Progress: 76.88%  Words/thread/sec: 21.31k  Alpha: 0.011560  Progress: 77.03%  Words/thread/sec: 21.35k  Alpha: 0.011484  Progress: 77.17%  Words/thread/sec: 21.33k  Alpha: 0.011413  Progress: 77.32%  Words/thread/sec: 21.31k  Alpha: 0.011339  Progress: 77.47%  Words/thread/sec: 21.32k  Alpha: 0.011264  Progress: 77.62%  Words/thread/sec: 21.35k  Alpha: 0.011192  Progress: 77.76%  Words/thread/sec: 21.32k  Alpha: 0.011120  Progress: 77.90%  Words/thread/sec: 21.30k  Alpha: 0.011049  Progress: 78.05%  Words/thread/sec: 21.33k  Alpha: 0.010976  Progress: 78.19%  Words/thread/sec: 21.35k  Alpha: 0.010903  Progress: 78.34%  Words/thread/sec: 21.32k  Alpha: 0.010828  Progress: 78.48%  Words/thread/sec: 21.32k  Alpha: 0.010759  Progress: 78.62%  Words/thread/sec: 21.34k  Alpha: 0.010689  Progress: 78.77%  Words/thread/sec: 21.35k  Alpha: 0.010614  Progress: 79.01%  Words/thread/sec: 21.34k  Alpha: 0.010494  Progress: 79.16%  Words/thread/sec: 21.32k  Alpha: 0.010421  Progress: 79.30%  Words/thread/sec: 21.33k  Alpha: 0.010349  Progress: 79.44%  Words/thread/sec: 21.34k  Alpha: 0.010279  Progress: 79.59%  Words/thread/sec: 21.34k  Alpha: 0.010206  Progress: 79.73%  Words/thread/sec: 21.32k  Alpha: 0.010135  Progress: 79.87%  Words/thread/sec: 21.32k  Alpha: 0.010065  Progress: 80.02%  Words/thread/sec: 21.33k  Alpha: 0.009990  Progress: 80.17%  Words/thread/sec: 21.33k  Alpha: 0.009917  Progress: 80.37%  Words/thread/sec: 21.36k  Alpha: 0.009817  Progress: 80.59%  Words/thread/sec: 21.33k  Alpha: 0.009705  Progress: 80.73%  Words/thread/sec: 21.34k  Alpha: 0.009635  Progress: 80.87%  Words/thread/sec: 21.33k  Alpha: 0.009564  Progress: 81.02%  Words/thread/sec: 21.35k  Alpha: 0.009490  Progress: 81.17%  Words/thread/sec: 21.33k  Alpha: 0.009415  Progress: 81.31%  Words/thread/sec: 21.34k  Alpha: 0.009345  Progress: 81.58%  Words/thread/sec: 21.34k  Alpha: 0.009208  Progress: 81.73%  Words/thread/sec: 21.32k  Alpha: 0.009136  Progress: 81.87%  Words/thread/sec: 21.33k  Alpha: 0.009067  Progress: 82.01%  Words/thread/sec: 21.37k  Alpha: 0.008994  Progress: 82.15%  Words/thread/sec: 21.34k  Alpha: 0.008924  Progress: 82.30%  Words/thread/sec: 21.31k  Alpha: 0.008852  Progress: 82.44%  Words/thread/sec: 21.33k  Alpha: 0.008779  Progress: 82.59%  Words/thread/sec: 21.37k  Alpha: 0.008706  Progress: 82.74%  Words/thread/sec: 21.34k  Alpha: 0.008630  Progress: 82.88%  Words/thread/sec: 21.31k  Alpha: 0.008559  Progress: 83.02%  Words/thread/sec: 21.33k  Alpha: 0.008488  Progress: 83.17%  Words/thread/sec: 21.37k  Alpha: 0.008413  Progress: 83.32%  Words/thread/sec: 21.34k  Alpha: 0.008341  Progress: 83.45%  Words/thread/sec: 21.32k  Alpha: 0.008277  Progress: 83.74%  Words/thread/sec: 21.36k  Alpha: 0.008277  Progress: 83.74%  Words/thread/sec: 21.36k  Alpha: 0.008131  Progress: 83.88%  Words/thread/sec: 21.33k  Alpha: 0.008060  Progress: 84.03%  Words/thread/sec: 21.32k  Alpha: 0.007987  Progress: 84.17%  Words/thread/sec: 21.32k  Alpha: 0.007913  Progress: 84.32%  Words/thread/sec: 21.36k  Alpha: 0.007839  Progress: 84.47%  Words/thread/sec: 21.33k  Alpha: 0.007767  Progress: 84.61%  Words/thread/sec: 21.34k  Alpha: 0.007694  Progress: 84.76%  Words/thread/sec: 21.32k  Alpha: 0.007621  Progress: 84.90%  Words/thread/sec: 21.35k  Alpha: 0.007550  Progress: 85.04%  Words/thread/sec: 21.33k  Alpha: 0.007481  Progress: 85.19%  Words/thread/sec: 21.36k  Alpha: 0.007406  Progress: 85.34%  Words/thread/sec: 21.32k  Alpha: 0.007331  Progress: 85.48%  Words/thread/sec: 21.35k  Alpha: 0.007261  Progress: 85.72%  Words/thread/sec: 21.34k  Alpha: 0.007142  Progress: 85.85%  Words/thread/sec: 21.31k  Alpha: 0.007073  Progress: 86.00%  Words/thread/sec: 21.33k  Alpha: 0.007001  Progress: 86.14%  Words/thread/sec: 21.37k  Alpha: 0.006928  Progress: 86.29%  Words/thread/sec: 21.34k  Alpha: 0.006854  Progress: 86.44%  Words/thread/sec: 21.31k  Alpha: 0.006780  Progress: 86.58%  Words/thread/sec: 21.33k  Alpha: 0.006710  Progress: 86.72%  Words/thread/sec: 21.37k  Alpha: 0.006639  Progress: 86.87%  Words/thread/sec: 21.33k  Alpha: 0.006566  Progress: 87.09%  Words/thread/sec: 21.32k  Alpha: 0.006454  Progress: 87.31%  Words/thread/sec: 21.37k  Alpha: 0.006344  Progress: 87.45%  Words/thread/sec: 21.35k  Alpha: 0.006273  Progress: 87.60%  Words/thread/sec: 21.32k  Alpha: 0.006200  Progress: 87.75%  Words/thread/sec: 21.34k  Alpha: 0.006126  Progress: 87.89%  Words/thread/sec: 21.36k  Alpha: 0.006054  Progress: 88.03%  Words/thread/sec: 21.35k  Alpha: 0.005983  Progress: 88.29%  Words/thread/sec: 21.34k  Alpha: 0.005857  Progress: 88.43%  Words/thread/sec: 21.36k  Alpha: 0.005785  Progress: 88.58%  Words/thread/sec: 21.34k  Alpha: 0.005711  Progress: 88.71%  Words/thread/sec: 21.35k  Alpha: 0.005643  Progress: 88.86%  Words/thread/sec: 21.34k  Alpha: 0.005572  Progress: 89.00%  Words/thread/sec: 21.35k  Alpha: 0.005500  Progress: 89.15%  Words/thread/sec: 21.34k  Alpha: 0.005426  Progress: 89.29%  Words/thread/sec: 21.34k  Alpha: 0.005353  Progress: 89.44%  Words/thread/sec: 21.33k  Alpha: 0.005279  Progress: 89.59%  Words/thread/sec: 21.35k  Alpha: 0.005207  Progress: 89.73%  Words/thread/sec: 21.33k  Alpha: 0.005136  Progress: 89.88%  Words/thread/sec: 21.34k  Alpha: 0.005060  Progress: 90.02%  Words/thread/sec: 21.33k  Alpha: 0.004989  Progress: 90.17%  Words/thread/sec: 21.35k  Alpha: 0.004913  Progress: 90.32%  Words/thread/sec: 21.34k  Alpha: 0.004838  Progress: 90.47%  Words/thread/sec: 21.34k  Alpha: 0.004767  Progress: 90.61%  Words/thread/sec: 21.33k  Alpha: 0.004696  Progress: 90.76%  Words/thread/sec: 21.34k  Alpha: 0.004622  Progress: 90.90%  Words/thread/sec: 21.33k  Alpha: 0.004548  Progress: 91.05%  Words/thread/sec: 21.34k  Alpha: 0.004474  Progress: 91.20%  Words/thread/sec: 21.33k  Alpha: 0.004401  Progress: 91.35%  Words/thread/sec: 21.36k  Alpha: 0.004324  Progress: 91.50%  Words/thread/sec: 21.33k  Alpha: 0.004252  Progress: 91.64%  Words/thread/sec: 21.34k  Alpha: 0.004181  Progress: 91.77%  Words/thread/sec: 21.35k  Alpha: 0.004114  Progress: 91.92%  Words/thread/sec: 21.36k  Alpha: 0.004040  Progress: 92.14%  Words/thread/sec: 21.34k  Alpha: 0.003931  Progress: 92.28%  Words/thread/sec: 21.35k  Alpha: 0.003862  Progress: 92.42%  Words/thread/sec: 21.34k  Alpha: 0.003790  Progress: 92.56%  Words/thread/sec: 21.35k  Alpha: 0.003721  Progress: 92.70%  Words/thread/sec: 21.34k  Alpha: 0.003648  Progress: 92.85%  Words/thread/sec: 21.35k  Alpha: 0.003576  Progress: 93.00%  Words/thread/sec: 21.34k  Alpha: 0.003502  Progress: 93.15%  Words/thread/sec: 21.34k  Alpha: 0.003427  Progress: 93.28%  Words/thread/sec: 21.34k  Alpha: 0.003358  Progress: 93.43%  Words/thread/sec: 21.34k  Alpha: 0.003286  Progress: 93.65%  Words/thread/sec: 21.35k  Alpha: 0.003176  Progress: 93.80%  Words/thread/sec: 21.36k  Alpha: 0.003100  Progress: 94.02%  Words/thread/sec: 21.34k  Alpha: 0.002990  Progress: 94.16%  Words/thread/sec: 21.36k  Alpha: 0.002920  Progress: 94.31%  Words/thread/sec: 21.34k  Alpha: 0.002846  Progress: 94.46%  Words/thread/sec: 21.36k  Alpha: 0.002771  Progress: 94.60%  Words/thread/sec: 21.34k  Alpha: 0.002699  Progress: 94.74%  Words/thread/sec: 21.36k  Alpha: 0.002629  Progress: 94.89%  Words/thread/sec: 21.33k  Alpha: 0.002557  Progress: 95.04%  Words/thread/sec: 21.35k  Alpha: 0.002482  Progress: 95.28%  Words/thread/sec: 21.34k  Alpha: 0.002359  Progress: 95.42%  Words/thread/sec: 21.33k  Alpha: 0.002291  Progress: 95.56%  Words/thread/sec: 21.35k  Alpha: 0.002219  Progress: 95.70%  Words/thread/sec: 21.37k  Alpha: 0.002148  Progress: 95.85%  Words/thread/sec: 21.34k  Alpha: 0.002074  Progress: 96.00%  Words/thread/sec: 21.32k  Alpha: 0.002001  Progress: 96.14%  Words/thread/sec: 21.35k  Alpha: 0.001930  Progress: 96.29%  Words/thread/sec: 21.37k  Alpha: 0.001855  Progress: 96.43%  Words/thread/sec: 21.34k  Alpha: 0.001784  Progress: 96.58%  Words/thread/sec: 21.32k  Alpha: 0.001709  Progress: 96.73%  Words/thread/sec: 21.34k  Alpha: 0.001633  Progress: 96.88%  Words/thread/sec: 21.37k  Alpha: 0.001562  Progress: 97.03%  Words/thread/sec: 21.34k  Alpha: 0.001486  Progress: 97.17%  Words/thread/sec: 21.32k  Alpha: 0.001415  Progress: 97.31%  Words/thread/sec: 21.34k  Alpha: 0.001343  Progress: 97.46%  Words/thread/sec: 21.37k  Alpha: 0.001272  Progress: 97.60%  Words/thread/sec: 21.33k  Alpha: 0.001198  Progress: 97.76%  Words/thread/sec: 21.33k  Alpha: 0.001121  Progress: 97.90%  Words/thread/sec: 21.35k  Alpha: 0.001048  Progress: 98.05%  Words/thread/sec: 21.37k  Alpha: 0.000975  Progress: 98.19%  Words/thread/sec: 21.33k  Alpha: 0.000903  Progress: 98.33%  Words/thread/sec: 21.35k  Alpha: 0.000837  Progress: 98.47%  Words/thread/sec: 21.35k  Alpha: 0.000766  Progress: 98.62%  Words/thread/sec: 21.36k  Alpha: 0.000692  Progress: 98.84%  Words/thread/sec: 21.36k  Alpha: 0.000581  Progress: 98.98%  Words/thread/sec: 21.35k  Alpha: 0.000511  Progress: 99.12%  Words/thread/sec: 21.37k  Alpha: 0.000439  Progress: 99.27%  Words/thread/sec: 21.36k  Alpha: 0.000367  Progress: 99.41%  Words/thread/sec: 21.35k  Alpha: 0.000293  Progress: 99.56%  Words/thread/sec: 21.37k  Alpha: 0.000220  Progress: 99.70%  Words/thread/sec: 21.36k  Alpha: 0.000151  Progress: 99.84%  Words/thread/sec: 21.35k  Alpha: 0.000079  Progress: 99.99%  Words/thread/sec: 21.37k  Alpha: 0.000006  Progress: 100.28%  Words/thread/sec: 21.39k  Alpha: 0.000005  Progress: 100.43%  Words/thread/sec: 21.40k  # started on Wed Mar  3 05:56:22 2021


 Performance counter stats for 'system wide':

S0-C0           1          98,131.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             24,068      context-switches          #    0.245 K/sec                  
S0-C0           1                581      cpu-migrations            #    0.006 K/sec                  
S0-C0           1            132,030      page-faults               #    0.001 M/sec                  
S0-C0           1      2,977,587,947      cycles                    #    0.030 GHz                    
S0-C0           1      3,412,299,567      instructions              #    1.15  insn per cycle         
S0-C0           1      1,507,053,232      branches                  #   15.357 M/sec                  
S0-C0           1         87,349,867      branch-misses             #    5.80% of all branches        
S0-C1           1          98,131.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,577      context-switches          #    0.057 K/sec                  
S0-C1           1                544      cpu-migrations            #    0.006 K/sec                  
S0-C1           1                  7      page-faults               #    0.000 K/sec                  
S0-C1           1        359,372,251      cycles                    #    0.004 GHz                    
S0-C1           1      2,455,276,583      instructions              #    6.83  insn per cycle         
S0-C1           1      1,262,234,241      branches                  #   12.863 M/sec                  
S0-C1           1         77,729,701      branch-misses             #    6.16% of all branches        
S0-C2           1          98,131.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             11,727      context-switches          #    0.120 K/sec                  
S0-C2           1                522      cpu-migrations            #    0.005 K/sec                  
S0-C2           1                  8      page-faults               #    0.000 K/sec                  
S0-C2           1      1,384,767,680      cycles                    #    0.014 GHz                    
S0-C2           1      2,954,468,610      instructions              #    2.13  insn per cycle         
S0-C2           1      1,314,918,419      branches                  #   13.400 M/sec                  
S0-C2           1         82,531,810      branch-misses             #    6.28% of all branches        
S0-C3           1          98,131.66 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              6,690      context-switches          #    0.068 K/sec                  
S0-C3           1                508      cpu-migrations            #    0.005 K/sec                  
S0-C3           1                  7      page-faults               #    0.000 K/sec                  
S0-C3           1      2,026,834,859      cycles                    #    0.021 GHz                    
S0-C3           1      3,026,727,928      instructions              #    1.49  insn per cycle         
S0-C3           1      1,277,433,507      branches                  #   13.018 M/sec                  
S0-C3           1         78,772,067      branch-misses             #    6.17% of all branches        

      98.132172418 seconds time elapsed

================================================================================
perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/grep_perf_output_1614751082135831075.txt --per-core -a taskset -c 0-3 ./mpi_grep_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 05:58:02 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.94 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C0           1                  7      context-switches          #    0.541 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.077 K/sec                  
S0-C0           1                193      page-faults               #    0.015 M/sec                  
S0-C0           1         13,751,366      cycles                    #    1.063 GHz                    
S0-C0           1          3,995,302      instructions              #    0.29  insn per cycle         
S0-C0           1            481,290      branches                  #   37.195 M/sec                  
S0-C0           1             90,653      branch-misses             #   18.84% of all branches        
S0-C1           1              12.94 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C1           1                 22      context-switches          #    0.002 M/sec                  
S0-C1           1                  2      cpu-migrations            #    0.155 K/sec                  
S0-C1           1                116      page-faults               #    0.009 M/sec                  
S0-C1           1          2,406,468      cycles                    #    0.186 GHz                    
S0-C1           1            778,731      instructions              #    0.32  insn per cycle         
S0-C1           1             96,408      branches                  #    7.449 M/sec                  
S0-C1           1             13,697      branch-misses             #   14.21% of all branches        
S0-C2           1              12.94 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C2           1                 20      context-switches          #    0.002 M/sec                  
S0-C2           1                  4      cpu-migrations            #    0.309 K/sec                  
S0-C2           1                 57      page-faults               #    0.004 M/sec                  
S0-C2           1          3,764,970      cycles                    #    0.291 GHz                    
S0-C2           1            914,852      instructions              #    0.24  insn per cycle         
S0-C2           1            117,234      branches                  #    9.058 M/sec                  
S0-C2           1             21,493      branch-misses             #   18.33% of all branches        
S0-C3           1              12.94 msec cpu-clock                 #    0.977 CPUs utilized          
S0-C3           1                 19      context-switches          #    0.001 M/sec                  
S0-C3           1                  3      cpu-migrations            #    0.232 K/sec                  
S0-C3           1                107      page-faults               #    0.008 M/sec                  
S0-C3           1          3,607,153      cycles                    #    0.279 GHz                    
S0-C3           1            962,113      instructions              #    0.27  insn per cycle         
S0-C3           1            118,983      branches                  #    9.194 M/sec                  
S0-C3           1             22,567      branch-misses             #   18.97% of all branches        

       0.013250343 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/lda_perf_output_1614751082233131406.txt --per-core -a taskset -c 0-3 ./mpi_lda_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 05:58:02 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.39 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                 10      context-switches          #    0.807 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.081 K/sec                  
S0-C0           1                  0      page-faults               #    0.000 K/sec                  
S0-C0           1          1,749,845      cycles                    #    0.141 GHz                    
S0-C0           1            321,908      instructions              #    0.18  insn per cycle         
S0-C0           1             42,646      branches                  #    3.442 M/sec                  
S0-C0           1              9,136      branch-misses             #   21.42% of all branches        
S0-C1           1              12.39 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C1           1                 10      context-switches          #    0.807 K/sec                  
S0-C1           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                 95      page-faults               #    0.008 M/sec                  
S0-C1           1          1,782,357      cycles                    #    0.144 GHz                    
S0-C1           1            588,030      instructions              #    0.33  insn per cycle         
S0-C1           1             72,298      branches                  #    5.834 M/sec                  
S0-C1           1             10,196      branch-misses             #   14.10% of all branches        
S0-C2           1              12.39 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C2           1                  7      context-switches          #    0.565 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.081 K/sec                  
S0-C2           1                247      page-faults               #    0.020 M/sec                  
S0-C2           1         12,497,341      cycles                    #    1.009 GHz                    
S0-C2           1          4,223,452      instructions              #    0.34  insn per cycle         
S0-C2           1            509,115      branches                  #   41.087 M/sec                  
S0-C2           1             87,231      branch-misses             #   17.13% of all branches        
S0-C3           1              12.39 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                 11      context-switches          #    0.888 K/sec                  
S0-C3           1                  3      cpu-migrations            #    0.242 K/sec                  
S0-C3           1                108      page-faults               #    0.009 M/sec                  
S0-C3           1          2,452,950      cycles                    #    0.198 GHz                    
S0-C3           1            740,363      instructions              #    0.30  insn per cycle         
S0-C3           1             92,041      branches                  #    7.427 M/sec                  
S0-C3           1             14,832      branch-misses             #   16.11% of all branches        

       0.012707956 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/NaiveBayes_perf_output_1614751082325962418.txt --per-core -a taskset -c 0-3 ./mpi_naive_bayes_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 05:58:02 2021


 Performance counter stats for 'system wide':

S0-C0           1              42.67 msec cpu-clock                 #    0.992 CPUs utilized          
S0-C0           1                 26      context-switches          #    0.609 K/sec                  
S0-C0           1                  5      cpu-migrations            #    0.117 K/sec                  
S0-C0           1                306      page-faults               #    0.007 M/sec                  
S0-C0           1         10,103,532      cycles                    #    0.237 GHz                    
S0-C0           1          2,987,620      instructions              #    0.30  insn per cycle         
S0-C0           1            362,699      branches                  #    8.499 M/sec                  
S0-C0           1             61,048      branch-misses             #   16.83% of all branches        
S0-C1           1              42.68 msec cpu-clock                 #    0.992 CPUs utilized          
S0-C1           1                 51      context-switches          #    0.001 M/sec                  
S0-C1           1                 10      cpu-migrations            #    0.234 K/sec                  
S0-C1           1                515      page-faults               #    0.012 M/sec                  
S0-C1           1         22,005,998      cycles                    #    0.516 GHz                    
S0-C1           1          7,141,084      instructions              #    0.32  insn per cycle         
S0-C1           1            874,424      branches                  #   20.489 M/sec                  
S0-C1           1            167,493      branch-misses             #   19.15% of all branches        
S0-C2           1              42.68 msec cpu-clock                 #    0.992 CPUs utilized          
S0-C2           1                 25      context-switches          #    0.586 K/sec                  
S0-C2           1                  5      cpu-migrations            #    0.117 K/sec                  
S0-C2           1                326      page-faults               #    0.008 M/sec                  
S0-C2           1         13,328,363      cycles                    #    0.312 GHz                    
S0-C2           1          4,557,104      instructions              #    0.34  insn per cycle         
S0-C2           1            564,967      branches                  #   13.237 M/sec                  
S0-C2           1            101,828      branch-misses             #   18.02% of all branches        
S0-C3           1              42.68 msec cpu-clock                 #    0.992 CPUs utilized          
S0-C3           1                 36      context-switches          #    0.843 K/sec                  
S0-C3           1                  6      cpu-migrations            #    0.141 K/sec                  
S0-C3           1                447      page-faults               #    0.010 M/sec                  
S0-C3           1         23,445,703      cycles                    #    0.549 GHz                    
S0-C3           1          8,076,325      instructions              #    0.34  insn per cycle         
S0-C3           1            986,762      branches                  #   23.120 M/sec                  
S0-C3           1            176,305      branch-misses             #   17.87% of all branches        

       0.043022574 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/wordcounts_perf_output_1614751082449290509.txt --per-core -a taskset -c 0-3 ./mpi_wordcount_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 05:58:02 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.29 msec cpu-clock                 #    0.973 CPUs utilized          
S0-C0           1                  8      context-switches          #    0.651 K/sec                  
S0-C0           1                  2      cpu-migrations            #    0.163 K/sec                  
S0-C0           1                110      page-faults               #    0.009 M/sec                  
S0-C0           1          3,026,670      cycles                    #    0.246 GHz                    
S0-C0           1            799,633      instructions              #    0.26  insn per cycle         
S0-C0           1             99,543      branches                  #    8.098 M/sec                  
S0-C0           1             16,956      branch-misses             #   17.03% of all branches        
S0-C1           1              12.29 msec cpu-clock                 #    0.973 CPUs utilized          
S0-C1           1                 14      context-switches          #    0.001 M/sec                  
S0-C1           1                  1      cpu-migrations            #    0.081 K/sec                  
S0-C1           1                 98      page-faults               #    0.008 M/sec                  
S0-C1           1          1,829,739      cycles                    #    0.149 GHz                    
S0-C1           1            580,738      instructions              #    0.32  insn per cycle         
S0-C1           1             71,880      branches                  #    5.846 M/sec                  
S0-C1           1             10,200      branch-misses             #   14.19% of all branches        
S0-C2           1              12.30 msec cpu-clock                 #    0.973 CPUs utilized          
S0-C2           1                  7      context-switches          #    0.569 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.081 K/sec                  
S0-C2           1                250      page-faults               #    0.020 M/sec                  
S0-C2           1         12,578,821      cycles                    #    1.023 GHz                    
S0-C2           1          4,255,875      instructions              #    0.34  insn per cycle         
S0-C2           1            512,521      branches                  #   41.684 M/sec                  
S0-C2           1             87,521      branch-misses             #   17.08% of all branches        
S0-C3           1              12.30 msec cpu-clock                 #    0.973 CPUs utilized          
S0-C3           1                  6      context-switches          #    0.488 K/sec                  
S0-C3           1                  1      cpu-migrations            #    0.081 K/sec                  
S0-C3           1                  0      page-faults               #    0.000 K/sec                  
S0-C3           1            641,362      cycles                    #    0.052 GHz                    
S0-C3           1            124,894      instructions              #    0.19  insn per cycle         
S0-C3           1             17,244      branches                  #    1.402 M/sec                  
S0-C3           1              3,883      branch-misses             #   22.52% of all branches        

       0.012632802 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/kmeans_perf_output_1614751082541618288.txt --per-core -a taskset -c 0-3 ./mpi_kmeans_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 05:58:02 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.26 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                 11      context-switches          #    0.897 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.082 K/sec                  
S0-C0           1                 59      page-faults               #    0.005 M/sec                  
S0-C0           1          3,839,682      cycles                    #    0.313 GHz                    
S0-C0           1            930,487      instructions              #    0.24  insn per cycle         
S0-C0           1            116,551      branches                  #    9.505 M/sec                  
S0-C0           1             19,053      branch-misses             #   16.35% of all branches        
S0-C1           1              12.26 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C1           1                 10      context-switches          #    0.816 K/sec                  
S0-C1           1                  3      cpu-migrations            #    0.245 K/sec                  
S0-C1           1                107      page-faults               #    0.009 M/sec                  
S0-C1           1          2,560,344      cycles                    #    0.209 GHz                    
S0-C1           1            756,291      instructions              #    0.30  insn per cycle         
S0-C1           1             95,135      branches                  #    7.760 M/sec                  
S0-C1           1             15,571      branch-misses             #   16.37% of all branches        
S0-C2           1              12.26 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C2           1                 14      context-switches          #    0.001 M/sec                  
S0-C2           1                  1      cpu-migrations            #    0.082 K/sec                  
S0-C2           1                100      page-faults               #    0.008 M/sec                  
S0-C2           1          2,501,394      cycles                    #    0.204 GHz                    
S0-C2           1            722,800      instructions              #    0.29  insn per cycle         
S0-C2           1             88,600      branches                  #    7.226 M/sec                  
S0-C2           1             14,217      branch-misses             #   16.05% of all branches        
S0-C3           1              12.26 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                  7      context-switches          #    0.571 K/sec                  
S0-C3           1                  1      cpu-migrations            #    0.082 K/sec                  
S0-C3           1                186      page-faults               #    0.015 M/sec                  
S0-C3           1         11,381,820      cycles                    #    0.928 GHz                    
S0-C3           1          3,709,185      instructions              #    0.33  insn per cycle         
S0-C3           1            443,824      branches                  #   36.203 M/sec                  
S0-C3           1             78,343      branch-misses             #   17.65% of all branches        

       0.012573725 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/md5_perf_output_1614751082635212071.txt --per-core -a taskset -c 0-3 ./mpi_md5_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 05:58:02 2021


 Performance counter stats for 'system wide':

S0-C0           1              11.84 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                  8      context-switches          #    0.675 K/sec                  
S0-C0           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C0           1                  0      page-faults               #    0.000 K/sec                  
S0-C0           1          1,795,277      cycles                    #    0.152 GHz                    
S0-C0           1            248,106      instructions              #    0.14  insn per cycle         
S0-C0           1             32,758      branches                  #    2.766 M/sec                  
S0-C0           1              8,700      branch-misses             #   26.56% of all branches        
S0-C1           1              11.85 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C1           1                  7      context-switches          #    0.591 K/sec                  
S0-C1           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C1           1                251      page-faults               #    0.021 M/sec                  
S0-C1           1         12,553,976      cycles                    #    1.060 GHz                    
S0-C1           1          4,261,618      instructions              #    0.34  insn per cycle         
S0-C1           1            514,138      branches                  #   43.398 M/sec                  
S0-C1           1             86,433      branch-misses             #   16.81% of all branches        
S0-C2           1              11.85 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C2           1                 14      context-switches          #    0.001 M/sec                  
S0-C2           1                  2      cpu-migrations            #    0.169 K/sec                  
S0-C2           1                 97      page-faults               #    0.008 M/sec                  
S0-C2           1          2,046,969      cycles                    #    0.173 GHz                    
S0-C2           1            619,437      instructions              #    0.30  insn per cycle         
S0-C2           1             77,882      branches                  #    6.573 M/sec                  
S0-C2           1             11,821      branch-misses             #   15.18% of all branches        
S0-C3           1              11.85 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C3           1                 10      context-switches          #    0.844 K/sec                  
S0-C3           1                  1      cpu-migrations            #    0.084 K/sec                  
S0-C3           1                110      page-faults               #    0.009 M/sec                  
S0-C3           1          2,349,144      cycles                    #    0.198 GHz                    
S0-C3           1            717,162      instructions              #    0.31  insn per cycle         
S0-C3           1             88,225      branches                  #    7.445 M/sec                  
S0-C3           1             13,209      branch-misses             #   14.97% of all branches        

       0.012152800 seconds time elapsed

perf stat -o /home/mendel/sd_card/i-benchmarks/MPI/bin/sort_perf_output_1614751082727475312.txt --per-core -a taskset -c 0-3 ./mpi_sort_benchmark.sh -t 4
/home/mendel/sd_card/i-benchmarks/word2vec/bin
# started on Wed Mar  3 05:58:02 2021


 Performance counter stats for 'system wide':

S0-C0           1              12.12 msec cpu-clock                 #    0.975 CPUs utilized          
S0-C0           1                  5      context-switches          #    0.413 K/sec                  
S0-C0           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                255      page-faults               #    0.021 M/sec                  
S0-C0           1         13,616,459      cycles                    #    1.123 GHz                    
S0-C0           1          4,361,130      instructions              #    0.32  insn per cycle         
S0-C0           1            526,529      branches                  #   43.442 M/sec                  
S0-C0           1             89,904      branch-misses             #   17.07% of all branches        
S0-C1           1              12.12 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C1           1                 11      context-switches          #    0.907 K/sec                  
S0-C1           1                  3      cpu-migrations            #    0.247 K/sec                  
S0-C1           1                113      page-faults               #    0.009 M/sec                  
S0-C1           1          2,388,837      cycles                    #    0.197 GHz                    
S0-C1           1            749,525      instructions              #    0.31  insn per cycle         
S0-C1           1             92,998      branches                  #    7.671 M/sec                  
S0-C1           1             13,827      branch-misses             #   14.87% of all branches        
S0-C2           1              12.12 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C2           1                 10      context-switches          #    0.825 K/sec                  
S0-C2           1                  1      cpu-migrations            #    0.082 K/sec                  
S0-C2           1                  1      page-faults               #    0.082 K/sec                  
S0-C2           1            772,370      cycles                    #    0.064 GHz                    
S0-C2           1            158,245      instructions              #    0.20  insn per cycle         
S0-C2           1             21,585      branches                  #    1.781 M/sec                  
S0-C2           1              4,318      branch-misses             #   20.00% of all branches        
S0-C3           1              12.12 msec cpu-clock                 #    0.976 CPUs utilized          
S0-C3           1                 16      context-switches          #    0.001 M/sec                  
S0-C3           1                  0      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                 99      page-faults               #    0.008 M/sec                  
S0-C3           1          2,927,727      cycles                    #    0.241 GHz                    
S0-C3           1            732,380      instructions              #    0.25  insn per cycle         
S0-C3           1             90,483      branches                  #    7.463 M/sec                  
S0-C3           1             15,992      branch-misses             #   17.67% of all branches        

       0.012426340 seconds time elapsed

================================================================================
perf stat -o sqlite_4_threads.txt  --per-core -a taskset -c 0-3 ./sqlite_benchmark 4
-- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index...................... -- Speedtest1 for SQLite 3.31.1 2020-01-27 19:55:54 3bfa9cc97da10598521b342961df8f
 100 - 13000 INSERTs into table with no index......................    0.096s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.096s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.098s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.097s
 110 - 13000 ordered INSERTS with one index/PK.....................    0.145s
 120 - 13000 unordered INSERTS with one index/PK...................    0.147s
 120 - 13000 unordered INSERTS with one index/PK...................    0.147s
 120 - 13000 unordered INSERTS with one index/PK...................    0.146s
 120 - 13000 unordered INSERTS with one index/PK...................    0.196s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.197s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.197s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.197s
 130 - 25 SELECTS, numeric BETWEEN, unindexed......................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.114s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.113s
 140 - 10 SELECTS, LIKE, unindexed.................................    0.202s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.201s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.202s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.208s
 142 - 10 SELECTS w/ORDER BY, unindexed............................    0.330s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.333s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.332s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.334s
 145 - 10 SELECTS w/ORDER BY and LIMIT, unindexed..................    0.171s
 150 - CREATE INDEX five times.....................................    0.171s
 150 - CREATE INDEX five times.....................................    0.173s
 150 - CREATE INDEX five times.....................................    0.175s
 150 - CREATE INDEX five times.....................................    0.218s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.219s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.220s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.220s
 160 - 2600 SELECTS, numeric BETWEEN, indexed......................    0.106s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.105s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.108s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.106s
 161 - 2600 SELECTS, numeric BETWEEN, PK...........................    0.104s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.107s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.105s
 170 - 2600 SELECTS, text BETWEEN, indexed.........................    0.223s
 180 - 13000 INSERTS with three indexes............................    0.224s
 180 - 13000 INSERTS with three indexes............................    0.227s
 180 - 13000 INSERTS with three indexes............................    0.226s
 180 - 13000 INSERTS with three indexes............................    0.245s
 190 - DELETE and REFILL one table.................................    0.246s
 190 - DELETE and REFILL one table.................................    0.253s
 190 - DELETE and REFILL one table.................................    0.249s
 190 - DELETE and REFILL one table.................................    0.253s
 200 - VACUUM......................................................    0.252s
 200 - VACUUM......................................................    0.254s
 200 - VACUUM......................................................    0.256s
 200 - VACUUM......................................................    0.369s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.370s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.370s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.373s
 210 - ALTER TABLE ADD COLUMN, and query...........................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.008s
 230 - 2600 UPDATES, numeric BETWEEN, indexed......................    0.088s
 240 - 13000 UPDATES of individual rows............................    0.089s
 240 - 13000 UPDATES of individual rows............................    0.088s
 240 - 13000 UPDATES of individual rows............................    0.089s
 240 - 13000 UPDATES of individual rows............................    0.153s
 250 - One big UPDATE of the whole 13000-row table.................    0.153s
 250 - One big UPDATE of the whole 13000-row table.................    0.154s
 250 - One big UPDATE of the whole 13000-row table.................    0.155s
 250 - One big UPDATE of the whole 13000-row table.................    0.043s
 260 - Query added column after filling............................    0.042s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.043s
 260 - Query added column after filling............................    0.044s
 260 - Query added column after filling............................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.006s
 270 - 2600 DELETEs, numeric BETWEEN, indexed......................    0.221s
 280 - 13000 DELETEs of individual rows............................    0.220s
 280 - 13000 DELETEs of individual rows............................    0.228s
 280 - 13000 DELETEs of individual rows............................    0.232s
 280 - 13000 DELETEs of individual rows............................    0.205s
 290 - Refill two 13000-row tables using REPLACE...................    0.204s
 290 - Refill two 13000-row tables using REPLACE...................    0.204s
 290 - Refill two 13000-row tables using REPLACE...................    0.207s
 290 - Refill two 13000-row tables using REPLACE...................    0.604s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.603s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.612s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.617s
 300 - Refill a 13000-row table using (b&1)==(a&1).................    0.278s
 310 - 2600 four-ways joins........................................    0.279s
 310 - 2600 four-ways joins........................................    0.285s
 310 - 2600 four-ways joins........................................    0.290s
 310 - 2600 four-ways joins........................................    0.475s
 320 - subquery in result set......................................    0.477s
 320 - subquery in result set......................................    0.478s
 320 - subquery in result set......................................    0.476s
 320 - subquery in result set......................................    0.880s
 400 - 26000 REPLACE ops on an IPK.................................    0.885s
 400 - 26000 REPLACE ops on an IPK.................................    0.893s
 400 - 26000 REPLACE ops on an IPK.................................    0.898s
 400 - 26000 REPLACE ops on an IPK.................................    0.324s
 410 - 26000 SELECTS on an IPK.....................................    0.325s
 410 - 26000 SELECTS on an IPK.....................................    0.326s
 410 - 26000 SELECTS on an IPK.....................................    0.328s
 410 - 26000 SELECTS on an IPK.....................................    0.207s
 500 - 26000 REPLACE on TEXT PK....................................    0.207s
 500 - 26000 REPLACE on TEXT PK....................................    0.207s
 500 - 26000 REPLACE on TEXT PK....................................    0.206s
 500 - 26000 REPLACE on TEXT PK....................................    0.329s
 510 - 26000 SELECTS on a TEXT PK..................................    0.328s
 510 - 26000 SELECTS on a TEXT PK..................................    0.329s
 510 - 26000 SELECTS on a TEXT PK..................................    0.330s
 510 - 26000 SELECTS on a TEXT PK..................................    0.337s
 520 - 26000 SELECT DISTINCT.......................................    0.335s
 520 - 26000 SELECT DISTINCT.......................................    0.340s
 520 - 26000 SELECT DISTINCT.......................................    0.335s
 520 - 26000 SELECT DISTINCT.......................................    0.231s
 980 - PRAGMA integrity_check......................................    0.230s
 980 - PRAGMA integrity_check......................................    0.235s
 980 - PRAGMA integrity_check......................................    0.244s
 980 - PRAGMA integrity_check......................................    0.463s
 990 - ANALYZE.....................................................    0.462s
 990 - ANALYZE.....................................................    0.463s
 990 - ANALYZE.....................................................    0.072s
       TOTAL.......................................................    7.704s
   0.072s
       TOTAL.......................................................    7.699s
   0.461s
 990 - ANALYZE.....................................................    0.072s
       TOTAL.......................................................    7.769s
   0.072s
       TOTAL.......................................................    7.804s
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::pthread_create() succeeded for command ./speedtest1 --size 130
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
SUCCESS::system(./speedtest1 --size 130) succeeded
# started on Wed Mar  3 05:58:02 2021


 Performance counter stats for 'system wide':

S0-C0           1           7,843.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,474      context-switches          #    0.188 K/sec                  
S0-C0           1                 90      cpu-migrations            #    0.011 K/sec                  
S0-C0           1              1,936      page-faults               #    0.247 K/sec                  
S0-C0           1      1,602,117,372      cycles                    #    0.204 GHz                    
S0-C0           1        612,644,171      instructions              #    0.38  insn per cycle         
S0-C0           1        608,508,366      branches                  #   77.583 M/sec                  
S0-C0           1         86,056,495      branch-misses             #   14.14% of all branches        
S0-C1           1           7,843.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                705      context-switches          #    0.090 K/sec                  
S0-C1           1                121      cpu-migrations            #    0.015 K/sec                  
S0-C1           1              1,807      page-faults               #    0.230 K/sec                  
S0-C1           1      1,552,894,149      cycles                    #    0.198 GHz                    
S0-C1           1        604,985,746      instructions              #    0.39  insn per cycle         
S0-C1           1        607,427,368      branches                  #   77.445 M/sec                  
S0-C1           1         86,272,213      branch-misses             #   14.20% of all branches        
S0-C2           1           7,843.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                647      context-switches          #    0.082 K/sec                  
S0-C2           1                110      cpu-migrations            #    0.014 K/sec                  
S0-C2           1              1,906      page-faults               #    0.243 K/sec                  
S0-C2           1      1,475,805,483      cycles                    #    0.188 GHz                    
S0-C2           1        602,398,274      instructions              #    0.41  insn per cycle         
S0-C2           1        607,101,185      branches                  #   77.404 M/sec                  
S0-C2           1         86,404,700      branch-misses             #   14.23% of all branches        
S0-C3           1           7,843.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                691      context-switches          #    0.088 K/sec                  
S0-C3           1                 99      cpu-migrations            #    0.013 K/sec                  
S0-C3           1              1,814      page-faults               #    0.231 K/sec                  
S0-C3           1      1,474,246,832      cycles                    #    0.188 GHz                    
S0-C3           1        601,151,998      instructions              #    0.41  insn per cycle         
S0-C3           1        607,019,461      branches                  #   77.393 M/sec                  
S0-C3           1         86,401,171      branch-misses             #   14.23% of all branches        

       7.843627522 seconds time elapsed

================================================================================
perf stat -o go_word2vec_4_threads.txt  --per-core -a taskset -c 0-3 ./go_word2vec.sh 4
/home/mendel/sd_card/i-benchmarks/golang/bin
Save trained vectors to example/word_vectors_sg.txt
# started on Wed Mar  3 05:58:10 2021


 Performance counter stats for 'system wide':

S0-C0           1          36,830.74 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,108      context-switches          #    0.166 K/sec                  
S0-C0           1                 49      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              9,364      page-faults               #    0.254 K/sec                  
S0-C0           1      2,022,845,193      cycles                    #    0.055 GHz                    
S0-C0           1      2,218,678,845      instructions              #    1.10  insn per cycle         
S0-C0           1      2,168,568,671      branches                  #   58.879 M/sec                  
S0-C0           1         57,898,849      branch-misses             #    2.67% of all branches        
S0-C1           1          36,830.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,856      context-switches          #    0.213 K/sec                  
S0-C1           1                 43      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                309      page-faults               #    0.008 K/sec                  
S0-C1           1      1,582,046,549      cycles                    #    0.043 GHz                    
S0-C1           1      3,087,586,054      instructions              #    1.95  insn per cycle         
S0-C1           1      1,863,250,894      branches                  #   50.590 M/sec                  
S0-C1           1         32,109,265      branch-misses             #    1.72% of all branches        
S0-C2           1          36,830.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              7,780      context-switches          #    0.211 K/sec                  
S0-C2           1                 53      cpu-migrations            #    0.001 K/sec                  
S0-C2           1             22,251      page-faults               #    0.604 K/sec                  
S0-C2           1      3,866,005,048      cycles                    #    0.105 GHz                    
S0-C2           1      3,344,894,688      instructions              #    0.87  insn per cycle         
S0-C2           1      2,265,195,394      branches                  #   61.503 M/sec                  
S0-C2           1         63,329,524      branch-misses             #    2.80% of all branches        
S0-C3           1          36,830.73 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              6,241      context-switches          #    0.169 K/sec                  
S0-C3           1                 26      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              2,144      page-faults               #    0.058 K/sec                  
S0-C3           1      2,054,096,505      cycles                    #    0.056 GHz                    
S0-C3           1      3,345,811,921      instructions              #    1.63  insn per cycle         
S0-C3           1      1,893,013,235      branches                  #   51.398 M/sec                  
S0-C3           1         35,382,672      branch-misses             #    1.87% of all branches        

      36.831138354 seconds time elapsed

================================================================================
================================================================================
Running run_forest_importances_faces test
perf stat -o ../output/run_forest_importances_faces.log --per-core -a taskset -c 0-3 ./run_forest_importances_faces.sh -n 4

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.374s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.546s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.567s

=================================================
Pixel importances with a parallel forest of trees
=================================================

This example shows the use of forests of trees to evaluate the importance
of the pixels in an image classification task (faces). The hotter the pixel,
the more important.

The code below also illustrates how the construction and the computation
of the predictions can be parallelized within multiple jobs.

Fitting ExtraTreesClassifier on faces data with 1 cores...
done in 12.543s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 05:58:47 2021


 Performance counter stats for 'system wide':

S0-C0           1          21,693.30 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              4,262      context-switches          #    0.196 K/sec                  
S0-C0           1                 72      cpu-migrations            #    0.003 K/sec                  
S0-C0           1             40,117      page-faults               #    0.002 M/sec                  
S0-C0           1      2,416,100,925      cycles                    #    0.111 GHz                    
S0-C0           1      2,356,626,895      instructions              #    0.98  insn per cycle         
S0-C0           1        730,832,220      branches                  #   33.689 M/sec                  
S0-C0           1        184,252,464      branch-misses             #   25.21% of all branches        
S0-C1           1          21,693.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,573      context-switches          #    0.073 K/sec                  
S0-C1           1                 73      cpu-migrations            #    0.003 K/sec                  
S0-C1           1             39,599      page-faults               #    0.002 M/sec                  
S0-C1           1      2,312,279,664      cycles                    #    0.107 GHz                    
S0-C1           1      2,449,353,716      instructions              #    1.06  insn per cycle         
S0-C1           1        743,803,108      branches                  #   34.287 M/sec                  
S0-C1           1        184,922,416      branch-misses             #   24.86% of all branches        
S0-C2           1          21,693.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,549      context-switches          #    0.071 K/sec                  
S0-C2           1                 67      cpu-migrations            #    0.003 K/sec                  
S0-C2           1             41,399      page-faults               #    0.002 M/sec                  
S0-C2           1      2,397,046,870      cycles                    #    0.110 GHz                    
S0-C2           1      2,372,003,925      instructions              #    0.99  insn per cycle         
S0-C2           1        733,564,229      branches                  #   33.815 M/sec                  
S0-C2           1        184,597,973      branch-misses             #   25.16% of all branches        
S0-C3           1          21,693.31 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,903      context-switches          #    0.088 K/sec                  
S0-C3           1                 71      cpu-migrations            #    0.003 K/sec                  
S0-C3           1             37,506      page-faults               #    0.002 M/sec                  
S0-C3           1      2,228,635,274      cycles                    #    0.103 GHz                    
S0-C3           1      2,341,810,224      instructions              #    1.05  insn per cycle         
S0-C3           1        730,808,544      branches                  #   33.688 M/sec                  
S0-C3           1        183,629,865      branch-misses             #   25.13% of all branches        

      21.693692184 seconds time elapsed

================================================================================
Running run_multioutput_face_completion test
perf stat -o ../output/run_multioutput_face_completion.log --per-core -a taskset -c 0-3 ./run_multioutput_face_completion.sh -n 4

==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.



==============================================
Face completion with a multi-output estimators
==============================================

This example shows the use of multi-output estimator to complete images.
The goal is to predict the lower half of a face given its upper half.

The first column of images shows true faces. The next columns illustrate
how extremely randomized trees, k nearest neighbors, linear
regression and ridge regression complete the lower half of those faces.


/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 05:59:09 2021


 Performance counter stats for 'system wide':

S0-C0           1          51,810.88 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              8,603      context-switches          #    0.166 K/sec                  
S0-C0           1                 99      cpu-migrations            #    0.002 K/sec                  
S0-C0           1            119,772      page-faults               #    0.002 M/sec                  
S0-C0           1      2,908,412,141      cycles                    #    0.056 GHz                    
S0-C0           1      3,718,126,886      instructions              #    1.28  insn per cycle         
S0-C0           1      1,544,812,906      branches                  #   29.816 M/sec                  
S0-C0           1        148,240,925      branch-misses             #    9.60% of all branches        
S0-C1           1          51,810.88 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,490      context-switches          #    0.067 K/sec                  
S0-C1           1                102      cpu-migrations            #    0.002 K/sec                  
S0-C1           1            118,637      page-faults               #    0.002 M/sec                  
S0-C1           1      2,659,919,806      cycles                    #    0.051 GHz                    
S0-C1           1      3,723,879,746      instructions              #    1.40  insn per cycle         
S0-C1           1      1,545,342,342      branches                  #   29.827 M/sec                  
S0-C1           1        147,536,529      branch-misses             #    9.55% of all branches        
S0-C2           1          51,810.88 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,240      context-switches          #    0.063 K/sec                  
S0-C2           1                 99      cpu-migrations            #    0.002 K/sec                  
S0-C2           1            119,595      page-faults               #    0.002 M/sec                  
S0-C2           1      2,672,821,426      cycles                    #    0.052 GHz                    
S0-C2           1      3,668,391,986      instructions              #    1.37  insn per cycle         
S0-C2           1      1,538,158,961      branches                  #   29.688 M/sec                  
S0-C2           1        146,515,675      branch-misses             #    9.53% of all branches        
S0-C3           1          51,810.88 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,502      context-switches          #    0.068 K/sec                  
S0-C3           1                104      cpu-migrations            #    0.002 K/sec                  
S0-C3           1            120,896      page-faults               #    0.002 M/sec                  
S0-C3           1      2,732,759,052      cycles                    #    0.053 GHz                    
S0-C3           1      3,673,616,046      instructions              #    1.34  insn per cycle         
S0-C3           1      1,538,953,299      branches                  #   29.703 M/sec                  
S0-C3           1        147,011,982      branch-misses             #    9.55% of all branches        

      51.811357082 seconds time elapsed

================================================================================
Running run_logistic_path test
perf stat -o ../output/run_logistic_path.log --per-core -a taskset -c 0-3 ./run_logistic_path.sh -n 4

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 34.257s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 34.868s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 36.345s

==============================================
Regularization path of L1- Logistic Regression
==============================================


Train l1-penalized logistic regression models on a binary classification
problem derived from the Iris dataset.

The models are ordered from strongest regularized to least regularized. The 4
coefficients of the models are collected and plotted as a "regularization
path": on the left-hand side of the figure (strong regularizers), all the
coefficients are exactly 0. When regularization gets progressively looser,
coefficients can get non-zero values one after the other.

Here we choose the SAGA solver because it can efficiently optimize for the
Logistic Regression loss with a non-smooth, sparsity inducing l1 penalty.

Also note that we set a low value for the tolerance to make sure that the model
has converged before collecting the coefficients.

We also use warm_start=True which means that the coefficients of the models are
reused to initialize the next model fit to speed-up the computation of the
full-path.


Computing regularization path ...
This took 36.377s
/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 06:00:01 2021


 Performance counter stats for 'system wide':

S0-C0           1          43,557.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,499      context-switches          #    0.149 K/sec                  
S0-C0           1                 69      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             18,790      page-faults               #    0.431 K/sec                  
S0-C0           1      3,679,606,717      cycles                    #    0.084 GHz                    
S0-C0           1      3,838,695,053      instructions              #    1.04  insn per cycle         
S0-C0           1      2,581,230,400      branches                  #   59.260 M/sec                  
S0-C0           1        478,246,615      branch-misses             #   18.53% of all branches        
S0-C1           1          43,557.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,580      context-switches          #    0.082 K/sec                  
S0-C1           1                 71      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             23,627      page-faults               #    0.542 K/sec                  
S0-C1           1      4,165,976,563      cycles                    #    0.096 GHz                    
S0-C1           1      3,704,669,024      instructions              #    0.89  insn per cycle         
S0-C1           1      2,576,742,909      branches                  #   59.157 M/sec                  
S0-C1           1        480,348,548      branch-misses             #   18.64% of all branches        
S0-C2           1          43,557.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,208      context-switches          #    0.097 K/sec                  
S0-C2           1                 65      cpu-migrations            #    0.001 K/sec                  
S0-C2           1             29,907      page-faults               #    0.687 K/sec                  
S0-C2           1      4,215,435,004      cycles                    #    0.097 GHz                    
S0-C2           1        102,801,677      instructions              #    0.02  insn per cycle         
S0-C2           1      2,651,668,445      branches                  #   60.878 M/sec                  
S0-C2           1        443,133,214      branch-misses             #   16.71% of all branches        
S0-C3           1          43,557.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,567      context-switches          #    0.059 K/sec                  
S0-C3           1                 60      cpu-migrations            #    0.001 K/sec                  
S0-C3           1             24,013      page-faults               #    0.551 K/sec                  
S0-C3           1      3,306,413,846      cycles                    #    0.076 GHz                    
S0-C3           1        383,258,829      instructions              #    0.12  insn per cycle         
S0-C3           1      2,673,178,323      branches                  #   61.371 M/sec                  
S0-C3           1        508,357,334      branch-misses             #   19.02% of all branches        

      43.557838345 seconds time elapsed

================================================================================
Running run_plot_svm_nonlinear test
perf stat -o ../output/run_plot_svm_nonlinear.log --per-core -a taskset -c 0-3 ./run_plot_svm_nonlinear.sh -n 4

==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.


==============
Non-linear SVM
==============

Perform binary classification using non-linear SVC
with RBF kernel. The target to predict is a XOR of the
inputs.

The color map illustrates the decision function learned by the SVC.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 06:00:44 2021


 Performance counter stats for 'system wide':

S0-C0           1          14,475.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              2,560      context-switches          #    0.177 K/sec                  
S0-C0           1                 69      cpu-migrations            #    0.005 K/sec                  
S0-C0           1             28,421      page-faults               #    0.002 M/sec                  
S0-C0           1      1,493,670,218      cycles                    #    0.103 GHz                    
S0-C0           1         38,227,912      instructions              #    0.03  insn per cycle         
S0-C0           1        894,643,547      branches                  #   61.805 M/sec                  
S0-C0           1         78,304,891      branch-misses             #    8.75% of all branches        
S0-C1           1          14,475.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,214      context-switches          #    0.084 K/sec                  
S0-C1           1                 56      cpu-migrations            #    0.004 K/sec                  
S0-C1           1             28,519      page-faults               #    0.002 M/sec                  
S0-C1           1      1,508,199,765      cycles                    #    0.104 GHz                    
S0-C1           1         14,864,080      instructions              #    0.01  insn per cycle         
S0-C1           1        893,337,651      branches                  #   61.714 M/sec                  
S0-C1           1         77,769,406      branch-misses             #    8.71% of all branches        
S0-C2           1          14,475.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,198      context-switches          #    0.083 K/sec                  
S0-C2           1                 67      cpu-migrations            #    0.005 K/sec                  
S0-C2           1             27,741      page-faults               #    0.002 M/sec                  
S0-C2           1      1,501,543,597      cycles                    #    0.104 GHz                    
S0-C2           1         77,342,311      instructions              #    0.05  insn per cycle         
S0-C2           1        900,085,965      branches                  #   62.180 M/sec                  
S0-C2           1         78,585,831      branch-misses             #    8.73% of all branches        
S0-C3           1          14,475.38 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,525      context-switches          #    0.105 K/sec                  
S0-C3           1                 65      cpu-migrations            #    0.004 K/sec                  
S0-C3           1             29,483      page-faults               #    0.002 M/sec                  
S0-C3           1      1,628,030,619      cycles                    #    0.112 GHz                    
S0-C3           1          8,367,290      instructions              #    0.01  insn per cycle         
S0-C3           1        891,336,360      branches                  #   61.576 M/sec                  
S0-C3           1         77,978,128      branch-misses             #    8.75% of all branches        

      14.475745907 seconds time elapsed

================================================================================
Running run_plot_theilsen test
perf stat -o ../output/run_plot_theilsen.log --per-core -a taskset -c 0-3 ./run_plot_theilsen.sh -n 4

====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.


====================
Theil-Sen Regression
====================

Computes a Theil-Sen Regression on a synthetic dataset.

See :ref:`theil_sen_regression` for more information on the regressor.

Compared to the OLS (ordinary least squares) estimator, the Theil-Sen
estimator is robust against outliers. It has a breakdown point of about 29.3%
in case of a simple linear regression which means that it can tolerate
arbitrary corrupted data (outliers) of up to 29.3% in the two-dimensional
case.

The estimation of the model is done by calculating the slopes and intercepts
of a subpopulation of all possible combinations of p subsample points. If an
intercept is fitted, p must be greater than or equal to n_features + 1. The
final slope and intercept is then defined as the spatial median of these
slopes and intercepts.

In certain cases Theil-Sen performs better than :ref:`RANSAC
<ransac_regression>` which is also a robust method. This is illustrated in the
second example below where outliers with respect to the x-axis perturb RANSAC.
Tuning the ``residual_threshold`` parameter of RANSAC remedies this but in
general a priori knowledge about the data and the nature of the outliers is
needed.
Due to the computational complexity of Theil-Sen it is recommended to use it
only for small problems in terms of number of samples and features. For larger
problems the ``max_subpopulation`` parameter restricts the magnitude of all
possible combinations of p subsample points to a randomly chosen subset and
therefore also limits the runtime. Therefore, Theil-Sen is applicable to larger
problems with the drawback of losing some of its mathematical properties since
it then works on a random subset.

/home/mendel/sd_card/i-benchmarks/scikit/bin
# started on Wed Mar  3 06:00:59 2021


 Performance counter stats for 'system wide':

S0-C0           1          35,328.76 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              4,255      context-switches          #    0.120 K/sec                  
S0-C0           1                 75      cpu-migrations            #    0.002 K/sec                  
S0-C0           1             44,845      page-faults               #    0.001 M/sec                  
S0-C0           1      2,784,635,030      cycles                    #    0.079 GHz                    
S0-C0           1        934,745,069      instructions              #    0.34  insn per cycle         
S0-C0           1      1,121,076,160      branches                  #   31.733 M/sec                  
S0-C0           1        328,551,391      branch-misses             #   29.31% of all branches        
S0-C1           1          35,328.75 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              2,164      context-switches          #    0.061 K/sec                  
S0-C1           1                 74      cpu-migrations            #    0.002 K/sec                  
S0-C1           1             44,561      page-faults               #    0.001 M/sec                  
S0-C1           1      2,953,111,064      cycles                    #    0.084 GHz                    
S0-C1           1      1,035,682,210      instructions              #    0.35  insn per cycle         
S0-C1           1      1,132,669,634      branches                  #   32.061 M/sec                  
S0-C1           1        330,745,794      branch-misses             #   29.20% of all branches        
S0-C2           1          35,328.76 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,332      context-switches          #    0.094 K/sec                  
S0-C2           1                 66      cpu-migrations            #    0.002 K/sec                  
S0-C2           1             44,905      page-faults               #    0.001 M/sec                  
S0-C2           1      2,829,187,587      cycles                    #    0.080 GHz                    
S0-C2           1        995,855,609      instructions              #    0.35  insn per cycle         
S0-C2           1      1,129,890,139      branches                  #   31.982 M/sec                  
S0-C2           1        331,259,324      branch-misses             #   29.32% of all branches        
S0-C3           1          35,328.76 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,039      context-switches          #    0.086 K/sec                  
S0-C3           1                 69      cpu-migrations            #    0.002 K/sec                  
S0-C3           1             44,676      page-faults               #    0.001 M/sec                  
S0-C3           1      2,778,836,311      cycles                    #    0.079 GHz                    
S0-C3           1      1,000,410,242      instructions              #    0.36  insn per cycle         
S0-C3           1      1,128,020,022      branches                  #   31.929 M/sec                  
S0-C3           1        331,763,335      branch-misses             #   29.41% of all branches        

      35.329203177 seconds time elapsed

================================================================================
================================================================================
perf stat -o 099_go.log --per-core -a taskset -c 0-3 ./spec95_099_go.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:01:34 2021


 Performance counter stats for 'system wide':

S0-C0           1          48,488.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              5,049      context-switches          #    0.104 K/sec                  
S0-C0           1                 12      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                402      page-faults               #    0.008 K/sec                  
S0-C0           1      2,090,372,476      cycles                    #    0.043 GHz                    
S0-C0           1      1,345,057,259      instructions              #    0.64  insn per cycle         
S0-C0           1      2,631,823,814      branches                  #   54.277 M/sec                  
S0-C0           1      1,080,307,860      branch-misses             #   41.05% of all branches        
S0-C1           1          48,488.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,837      context-switches          #    0.038 K/sec                  
S0-C1           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                557      page-faults               #    0.011 K/sec                  
S0-C1           1      2,897,751,746      cycles                    #    0.060 GHz                    
S0-C1           1      1,318,327,454      instructions              #    0.45  insn per cycle         
S0-C1           1      2,628,083,636      branches                  #   54.200 M/sec                  
S0-C1           1      1,079,355,715      branch-misses             #   41.07% of all branches        
S0-C2           1          48,488.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,586      context-switches          #    0.115 K/sec                  
S0-C2           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                254      page-faults               #    0.005 K/sec                  
S0-C2           1      2,849,689,969      cycles                    #    0.059 GHz                    
S0-C2           1      1,340,106,041      instructions              #    0.47  insn per cycle         
S0-C2           1      2,630,866,507      branches                  #   54.257 M/sec                  
S0-C2           1      1,080,582,377      branch-misses             #   41.07% of all branches        
S0-C3           1          48,488.89 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              2,503      context-switches          #    0.052 K/sec                  
S0-C3           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                267      page-faults               #    0.006 K/sec                  
S0-C3           1      2,084,645,452      cycles                    #    0.043 GHz                    
S0-C3           1      1,318,607,505      instructions              #    0.63  insn per cycle         
S0-C3           1      2,628,331,556      branches                  #   54.205 M/sec                  
S0-C3           1      1,079,369,679      branch-misses             #   41.07% of all branches        

      48.489412462 seconds time elapsed

================================================================================
perf stat -o 101_tomcatv.log --per-core -a taskset -c 0-3 ./spec95_101_tomcatv.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:02:23 2021


 Performance counter stats for 'system wide':

S0-C0           1          75,342.44 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             21,649      context-switches          #    0.287 K/sec                  
S0-C0           1                 41      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              4,079      page-faults               #    0.054 K/sec                  
S0-C0           1      2,251,170,875      cycles                    #    0.030 GHz                    
S0-C0           1      3,121,803,061      instructions              #    1.39  insn per cycle         
S0-C0           1        857,244,190      branches                  #   11.378 M/sec                  
S0-C0           1         35,036,410      branch-misses             #    4.09% of all branches        
S0-C1           1          75,342.44 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,586      context-switches          #    0.101 K/sec                  
S0-C1           1                 12      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              3,777      page-faults               #    0.050 K/sec                  
S0-C1           1      2,680,020,150      cycles                    #    0.036 GHz                    
S0-C1           1      3,188,890,093      instructions              #    1.19  insn per cycle         
S0-C1           1        845,908,107      branches                  #   11.228 M/sec                  
S0-C1           1         30,332,253      branch-misses             #    3.59% of all branches        
S0-C2           1          75,342.44 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,307      context-switches          #    0.044 K/sec                  
S0-C2           1                 23      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              3,935      page-faults               #    0.052 K/sec                  
S0-C2           1      3,440,488,792      cycles                    #    0.046 GHz                    
S0-C2           1      3,384,696,864      instructions              #    0.98  insn per cycle         
S0-C2           1        853,165,003      branches                  #   11.324 M/sec                  
S0-C2           1         29,757,705      branch-misses             #    3.49% of all branches        
S0-C3           1          75,342.45 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,310      context-switches          #    0.057 K/sec                  
S0-C3           1                 26      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              3,772      page-faults               #    0.050 K/sec                  
S0-C3           1      2,294,534,820      cycles                    #    0.030 GHz                    
S0-C3           1      3,163,070,359      instructions              #    1.38  insn per cycle         
S0-C3           1        842,922,021      branches                  #   11.188 M/sec                  
S0-C3           1         29,610,418      branch-misses             #    3.51% of all branches        

      75.343107635 seconds time elapsed

================================================================================
perf stat -o 102_swim.log --per-core -a taskset -c 0-3 ./spec95_102_swim.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:03:38 2021


 Performance counter stats for 'system wide':

S0-C0           1          65,834.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,461      context-switches          #    0.098 K/sec                  
S0-C0           1                 13      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              4,087      page-faults               #    0.062 K/sec                  
S0-C0           1      3,697,405,903      cycles                    #    0.056 GHz                    
S0-C0           1      1,792,120,509      instructions              #    0.48  insn per cycle         
S0-C0           1        186,772,766      branches                  #    2.837 M/sec                  
S0-C0           1          4,299,211      branch-misses             #    2.30% of all branches        
S0-C1           1          65,834.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,105      context-switches          #    0.047 K/sec                  
S0-C1           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              3,770      page-faults               #    0.057 K/sec                  
S0-C1           1      3,703,372,473      cycles                    #    0.056 GHz                    
S0-C1           1      1,754,993,431      instructions              #    0.47  insn per cycle         
S0-C1           1        181,647,758      branches                  #    2.759 M/sec                  
S0-C1           1          3,185,451      branch-misses             #    1.75% of all branches        
S0-C2           1          65,834.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              6,425      context-switches          #    0.098 K/sec                  
S0-C2           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              3,775      page-faults               #    0.057 K/sec                  
S0-C2           1      3,960,918,590      cycles                    #    0.060 GHz                    
S0-C2           1      1,781,922,713      instructions              #    0.45  insn per cycle         
S0-C2           1        185,035,166      branches                  #    2.811 M/sec                  
S0-C2           1          3,824,874      branch-misses             #    2.07% of all branches        
S0-C3           1          65,834.47 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,848      context-switches          #    0.058 K/sec                  
S0-C3           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              3,918      page-faults               #    0.060 K/sec                  
S0-C3           1      3,641,763,033      cycles                    #    0.055 GHz                    
S0-C3           1      1,761,882,222      instructions              #    0.48  insn per cycle         
S0-C3           1        182,796,708      branches                  #    2.777 M/sec                  
S0-C3           1          3,330,458      branch-misses             #    1.82% of all branches        

      65.835089786 seconds time elapsed

================================================================================
perf stat -o 103_su2cor.log --per-core -a taskset -c 0-3 ./spec95_103_su2cor.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:04:44 2021


 Performance counter stats for 'system wide':

S0-C0           1         114,320.80 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             30,041      context-switches          #    0.263 K/sec                  
S0-C0           1                 22      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,259      page-faults               #    0.055 K/sec                  
S0-C0           1      2,571,362,120      cycles                    #    0.022 GHz                    
S0-C0           1        112,055,709      instructions              #    0.04  insn per cycle         
S0-C0           1      1,222,922,427      branches                  #   10.697 M/sec                  
S0-C0           1        113,948,297      branch-misses             #    9.32% of all branches        
S0-C1           1         114,320.80 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              6,100      context-switches          #    0.053 K/sec                  
S0-C1           1                 16      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,156      page-faults               #    0.054 K/sec                  
S0-C1           1      1,430,154,721      cycles                    #    0.013 GHz                    
S0-C1           1      4,175,154,072      instructions              #    2.92  insn per cycle         
S0-C1           1      1,190,725,331      branches                  #   10.416 M/sec                  
S0-C1           1        107,210,756      branch-misses             #    9.00% of all branches        
S0-C2           1         114,320.80 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             10,971      context-switches          #    0.096 K/sec                  
S0-C2           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,377      page-faults               #    0.056 K/sec                  
S0-C2           1      1,918,917,883      cycles                    #    0.017 GHz                    
S0-C2           1      4,219,555,683      instructions              #    2.20  insn per cycle         
S0-C2           1      1,196,281,607      branches                  #   10.464 M/sec                  
S0-C2           1        108,137,515      branch-misses             #    9.04% of all branches        
S0-C3           1         114,320.80 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              6,504      context-switches          #    0.057 K/sec                  
S0-C3           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,108      page-faults               #    0.053 K/sec                  
S0-C3           1      1,669,989,206      cycles                    #    0.015 GHz                    
S0-C3           1      4,179,966,542      instructions              #    2.50  insn per cycle         
S0-C3           1      1,191,726,255      branches                  #   10.424 M/sec                  
S0-C3           1        107,169,239      branch-misses             #    8.99% of all branches        

     114.321691058 seconds time elapsed

================================================================================
perf stat -o 104_hydro2d.log --per-core -a taskset -c 0-3 ./spec95_104_hydro2d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:06:39 2021


 Performance counter stats for 'system wide':

S0-C0           1          92,243.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             23,670      context-switches          #    0.257 K/sec                  
S0-C0           1                 43      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,489      page-faults               #    0.027 K/sec                  
S0-C0           1      3,935,987,006      cycles                    #    0.043 GHz                    
S0-C0           1      1,583,427,393      instructions              #    0.40  insn per cycle         
S0-C0           1      2,635,732,488      branches                  #   28.574 M/sec                  
S0-C0           1         25,250,852      branch-misses             #    0.96% of all branches        
S0-C1           1          92,243.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              5,010      context-switches          #    0.054 K/sec                  
S0-C1           1                 41      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,390      page-faults               #    0.026 K/sec                  
S0-C1           1      2,815,996,116      cycles                    #    0.031 GHz                    
S0-C1           1      1,387,125,354      instructions              #    0.49  insn per cycle         
S0-C1           1      2,608,263,923      branches                  #   28.276 M/sec                  
S0-C1           1         19,385,680      branch-misses             #    0.74% of all branches        
S0-C2           1          92,243.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,223      context-switches          #    0.046 K/sec                  
S0-C2           1                 20      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,339      page-faults               #    0.025 K/sec                  
S0-C2           1      3,043,176,016      cycles                    #    0.033 GHz                    
S0-C2           1      1,381,315,266      instructions              #    0.45  insn per cycle         
S0-C2           1      2,607,495,928      branches                  #   28.268 M/sec                  
S0-C2           1         19,091,611      branch-misses             #    0.73% of all branches        
S0-C3           1          92,243.58 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              9,102      context-switches          #    0.099 K/sec                  
S0-C3           1                 20      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,604      page-faults               #    0.028 K/sec                  
S0-C3           1      3,056,790,020      cycles                    #    0.033 GHz                    
S0-C3           1      1,426,710,259      instructions              #    0.47  insn per cycle         
S0-C3           1      2,613,662,495      branches                  #   28.334 M/sec                  
S0-C3           1         20,229,414      branch-misses             #    0.77% of all branches        

      92.244380751 seconds time elapsed

================================================================================
perf stat -o 107_mgrid.log --per-core -a taskset -c 0-3 ./spec95_107_mgrid.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:08:11 2021


 Performance counter stats for 'system wide':

S0-C0           1          88,683.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             10,467      context-switches          #    0.118 K/sec                  
S0-C0           1                 33      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              2,046      page-faults               #    0.023 K/sec                  
S0-C0           1      3,558,490,378      cycles                    #    0.040 GHz                    
S0-C0           1        198,695,587      instructions              #    0.06  insn per cycle         
S0-C0           1        717,811,300      branches                  #    8.094 M/sec                  
S0-C0           1         36,215,681      branch-misses             #    5.05% of all branches        
S0-C1           1          88,683.84 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              4,345      context-switches          #    0.049 K/sec                  
S0-C1           1                 22      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              2,237      page-faults               #    0.025 K/sec                  
S0-C1           1      3,215,383,951      cycles                    #    0.036 GHz                    
S0-C1           1        143,761,735      instructions              #    0.04  insn per cycle         
S0-C1           1        709,994,989      branches                  #    8.006 M/sec                  
S0-C1           1         34,334,146      branch-misses             #    4.84% of all branches        
S0-C2           1          88,683.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,804      context-switches          #    0.043 K/sec                  
S0-C2           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              2,046      page-faults               #    0.023 K/sec                  
S0-C2           1      3,415,436,531      cycles                    #    0.039 GHz                    
S0-C2           1        135,545,797      instructions              #    0.04  insn per cycle         
S0-C2           1        709,014,556      branches                  #    7.995 M/sec                  
S0-C2           1         34,060,385      branch-misses             #    4.80% of all branches        
S0-C3           1          88,683.83 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              9,246      context-switches          #    0.104 K/sec                  
S0-C3           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              2,305      page-faults               #    0.026 K/sec                  
S0-C3           1      3,609,453,667      cycles                    #    0.041 GHz                    
S0-C3           1        183,005,578      instructions              #    0.05  insn per cycle         
S0-C3           1        715,390,245      branches                  #    8.067 M/sec                  
S0-C3           1         35,396,437      branch-misses             #    4.95% of all branches        

      88.684639919 seconds time elapsed

================================================================================
perf stat -o 110_applu.log --per-core -a taskset -c 0-3 ./spec95_110_applu.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:09:40 2021


 Performance counter stats for 'system wide':

S0-C0           1          80,485.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,544      context-switches          #    0.094 K/sec                  
S0-C0           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              7,542      page-faults               #    0.094 K/sec                  
S0-C0           1      1,530,384,404      cycles                    #    0.019 GHz                    
S0-C0           1        411,042,009      instructions              #    0.27  insn per cycle         
S0-C0           1        347,757,312      branches                  #    4.321 M/sec                  
S0-C0           1         18,761,721      branch-misses             #    5.40% of all branches        
S0-C1           1          80,485.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,705      context-switches          #    0.096 K/sec                  
S0-C1           1                  9      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              7,849      page-faults               #    0.098 K/sec                  
S0-C1           1      1,536,215,149      cycles                    #    0.019 GHz                    
S0-C1           1        412,238,751      instructions              #    0.27  insn per cycle         
S0-C1           1        347,447,261      branches                  #    4.317 M/sec                  
S0-C1           1         18,554,182      branch-misses             #    5.34% of all branches        
S0-C2           1          80,485.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,625      context-switches          #    0.045 K/sec                  
S0-C2           1                  7      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              7,697      page-faults               #    0.096 K/sec                  
S0-C2           1      1,515,790,730      cycles                    #    0.019 GHz                    
S0-C2           1        377,276,813      instructions              #    0.25  insn per cycle         
S0-C2           1        342,973,478      branches                  #    4.261 M/sec                  
S0-C2           1         17,621,719      branch-misses             #    5.14% of all branches        
S0-C3           1          80,485.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,592      context-switches          #    0.057 K/sec                  
S0-C3           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              7,544      page-faults               #    0.094 K/sec                  
S0-C3           1      1,514,556,480      cycles                    #    0.019 GHz                    
S0-C3           1        382,279,460      instructions              #    0.25  insn per cycle         
S0-C3           1        343,993,386      branches                  #    4.274 M/sec                  
S0-C3           1         17,749,120      branch-misses             #    5.16% of all branches        

      80.486693903 seconds time elapsed

================================================================================
perf stat -o 125_turb3d.log --per-core -a taskset -c 0-3 ./spec95_125_turb3d.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:11:00 2021


 Performance counter stats for 'system wide':

S0-C0           1          94,301.23 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             21,277      context-switches          #    0.226 K/sec                  
S0-C0           1                 26      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              6,675      page-faults               #    0.071 K/sec                  
S0-C0           1      2,315,344,993      cycles                    #    0.025 GHz                    
S0-C0           1      1,950,942,419      instructions              #    0.84  insn per cycle         
S0-C0           1      3,584,013,282      branches                  #   38.006 M/sec                  
S0-C0           1        291,582,467      branch-misses             #    8.14% of all branches        
S0-C1           1          94,301.24 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,260      context-switches          #    0.035 K/sec                  
S0-C1           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              6,527      page-faults               #    0.069 K/sec                  
S0-C1           1      1,897,383,706      cycles                    #    0.020 GHz                    
S0-C1           1      1,793,599,815      instructions              #    0.95  insn per cycle         
S0-C1           1      3,562,150,385      branches                  #   37.774 M/sec                  
S0-C1           1        287,076,282      branch-misses             #    8.06% of all branches        
S0-C2           1          94,301.23 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1             12,613      context-switches          #    0.134 K/sec                  
S0-C2           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              6,803      page-faults               #    0.072 K/sec                  
S0-C2           1      1,939,680,442      cycles                    #    0.021 GHz                    
S0-C2           1      1,857,938,861      instructions              #    0.96  insn per cycle         
S0-C2           1      3,570,383,044      branches                  #   37.861 M/sec                  
S0-C2           1        288,751,154      branch-misses             #    8.09% of all branches        
S0-C3           1          94,301.24 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              5,815      context-switches          #    0.062 K/sec                  
S0-C3           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              6,579      page-faults               #    0.070 K/sec                  
S0-C3           1      1,920,593,156      cycles                    #    0.020 GHz                    
S0-C3           1      1,808,518,954      instructions              #    0.94  insn per cycle         
S0-C3           1      3,564,471,222      branches                  #   37.799 M/sec                  
S0-C3           1        289,980,722      branch-misses             #    8.14% of all branches        

      94.302127222 seconds time elapsed

================================================================================
perf stat -o 126_gcc.log --per-core -a taskset -c 0-3 ./spec95_126_gcc.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:12:35 2021


 Performance counter stats for 'system wide':

S0-C0           1           7,673.90 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,471      context-switches          #    0.192 K/sec                  
S0-C0           1                 25      cpu-migrations            #    0.003 K/sec                  
S0-C0           1              4,481      page-faults               #    0.584 K/sec                  
S0-C0           1      3,911,407,412      cycles                    #    0.510 GHz                    
S0-C0           1      3,342,345,968      instructions              #    0.85  insn per cycle         
S0-C0           1        457,869,254      branches                  #   59.666 M/sec                  
S0-C0           1        117,293,655      branch-misses             #   25.62% of all branches        
S0-C1           1           7,673.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                698      context-switches          #    0.091 K/sec                  
S0-C1           1                 12      cpu-migrations            #    0.002 K/sec                  
S0-C1           1              4,471      page-faults               #    0.583 K/sec                  
S0-C1           1      3,942,047,152      cycles                    #    0.514 GHz                    
S0-C1           1      3,323,667,495      instructions              #    0.84  insn per cycle         
S0-C1           1        455,513,504      branches                  #   59.359 M/sec                  
S0-C1           1        117,016,465      branch-misses             #   25.69% of all branches        
S0-C2           1           7,673.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,131      context-switches          #    0.278 K/sec                  
S0-C2           1                 15      cpu-migrations            #    0.002 K/sec                  
S0-C2           1              4,322      page-faults               #    0.563 K/sec                  
S0-C2           1      3,898,337,615      cycles                    #    0.508 GHz                    
S0-C2           1      3,332,408,630      instructions              #    0.85  insn per cycle         
S0-C2           1        456,607,308      branches                  #   59.501 M/sec                  
S0-C2           1        117,085,567      branch-misses             #   25.64% of all branches        
S0-C3           1           7,673.91 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                923      context-switches          #    0.120 K/sec                  
S0-C3           1                 25      cpu-migrations            #    0.003 K/sec                  
S0-C3           1              4,613      page-faults               #    0.601 K/sec                  
S0-C3           1      3,939,031,910      cycles                    #    0.513 GHz                    
S0-C3           1      3,326,759,492      instructions              #    0.84  insn per cycle         
S0-C3           1        455,818,009      branches                  #   59.398 M/sec                  
S0-C3           1        116,923,626      branch-misses             #   25.65% of all branches        

       7.674260755 seconds time elapsed

================================================================================
perf stat -o 129_compress.log --per-core -a taskset -c 0-3 ./spec95_129_compress.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:12:42 2021


 Performance counter stats for 'system wide':

S0-C0           1         173,396.51 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             16,056      context-switches          #    0.093 K/sec                  
S0-C0           1                 26      cpu-migrations            #    0.000 K/sec                  
S0-C0           1              9,162      page-faults               #    0.053 K/sec                  
S0-C0           1      1,772,001,242      cycles                    #    0.010 GHz                    
S0-C0           1      1,244,122,046      instructions              #    0.70  insn per cycle         
S0-C0           1      3,668,469,976      branches                  #   21.157 M/sec                  
S0-C0           1        615,095,208      branch-misses             #   16.77% of all branches        
S0-C1           1         173,396.51 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              6,675      context-switches          #    0.038 K/sec                  
S0-C1           1                 10      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              9,418      page-faults               #    0.054 K/sec                  
S0-C1           1      2,068,314,889      cycles                    #    0.012 GHz                    
S0-C1           1      1,159,048,828      instructions              #    0.56  insn per cycle         
S0-C1           1      3,656,588,116      branches                  #   21.088 M/sec                  
S0-C1           1        612,335,610      branch-misses             #   16.75% of all branches        
S0-C2           1         173,396.51 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              6,752      context-switches          #    0.039 K/sec                  
S0-C2           1                 25      cpu-migrations            #    0.000 K/sec                  
S0-C2           1              9,220      page-faults               #    0.053 K/sec                  
S0-C2           1         61,994,601      cycles                    #    0.000 GHz                    
S0-C2           1      1,155,902,890      instructions              #   18.65  insn per cycle         
S0-C2           1      3,656,112,416      branches                  #   21.085 M/sec                  
S0-C2           1        612,239,280      branch-misses             #   16.75% of all branches        
S0-C3           1         173,396.50 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             22,539      context-switches          #    0.130 K/sec                  
S0-C3           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              9,110      page-faults               #    0.053 K/sec                  
S0-C3           1      1,343,914,806      cycles                    #    0.008 GHz                    
S0-C3           1      1,261,331,458      instructions              #    0.94  insn per cycle         
S0-C3           1      3,670,527,563      branches                  #   21.168 M/sec                  
S0-C3           1        615,252,044      branch-misses             #   16.76% of all branches        

     173.397885289 seconds time elapsed

================================================================================
perf stat -o 130_li.log --per-core -a taskset -c 0-3 ./spec95_130_li.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:15:36 2021


 Performance counter stats for 'system wide':

S0-C0           1          77,782.11 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             12,985      context-switches          #    0.167 K/sec                  
S0-C0           1                 27      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                557      page-faults               #    0.007 K/sec                  
S0-C0           1      2,325,962,765      cycles                    #    0.030 GHz                    
S0-C0           1      1,027,254,464      instructions              #    0.44  insn per cycle         
S0-C0           1      1,827,769,076      branches                  #   23.499 M/sec                  
S0-C0           1      1,041,467,889      branch-misses             #   56.98% of all branches        
S0-C1           1          77,782.11 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,589      context-switches          #    0.046 K/sec                  
S0-C1           1                 30      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                343      page-faults               #    0.004 K/sec                  
S0-C1           1      2,093,926,705      cycles                    #    0.027 GHz                    
S0-C1           1        951,652,747      instructions              #    0.45  insn per cycle         
S0-C1           1      1,817,711,312      branches                  #   23.369 M/sec                  
S0-C1           1      1,038,699,169      branch-misses             #   57.14% of all branches        
S0-C2           1          77,782.11 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,946      context-switches          #    0.038 K/sec                  
S0-C2           1                 19      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                291      page-faults               #    0.004 K/sec                  
S0-C2           1      2,261,175,369      cycles                    #    0.029 GHz                    
S0-C2           1        947,648,145      instructions              #    0.42  insn per cycle         
S0-C2           1      1,817,118,996      branches                  #   23.362 M/sec                  
S0-C2           1      1,038,524,134      branch-misses             #   57.15% of all branches        
S0-C3           1          77,782.11 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,952      context-switches          #    0.051 K/sec                  
S0-C3           1                 26      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                438      page-faults               #    0.006 K/sec                  
S0-C3           1      2,124,316,728      cycles                    #    0.027 GHz                    
S0-C3           1        956,476,599      instructions              #    0.45  insn per cycle         
S0-C3           1      1,818,601,075      branches                  #   23.381 M/sec                  
S0-C3           1      1,038,637,297      branch-misses             #   57.11% of all branches        

      77.782900975 seconds time elapsed

================================================================================
perf stat -o 132_ijpeg.log --per-core -a taskset -c 0-3 ./spec95_132_ijpeg.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:16:54 2021


 Performance counter stats for 'system wide':

S0-C0           1          22,170.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              4,521      context-switches          #    0.204 K/sec                  
S0-C0           1                 29      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              2,547      page-faults               #    0.115 K/sec                  
S0-C0           1      3,705,641,569      cycles                    #    0.167 GHz                    
S0-C0           1      1,847,981,208      instructions              #    0.50  insn per cycle         
S0-C0           1        968,778,998      branches                  #   43.697 M/sec                  
S0-C0           1        165,847,366      branch-misses             #   17.12% of all branches        
S0-C1           1          22,170.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              1,196      context-switches          #    0.054 K/sec                  
S0-C1           1                 18      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              2,835      page-faults               #    0.128 K/sec                  
S0-C1           1      2,872,764,603      cycles                    #    0.130 GHz                    
S0-C1           1        243,606,623      instructions              #    0.08  insn per cycle         
S0-C1           1      1,115,869,828      branches                  #   50.332 M/sec                  
S0-C1           1        201,862,306      branch-misses             #   18.09% of all branches        
S0-C2           1          22,170.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,018      context-switches          #    0.046 K/sec                  
S0-C2           1                 12      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              2,587      page-faults               #    0.117 K/sec                  
S0-C2           1      1,701,746,538      cycles                    #    0.077 GHz                    
S0-C2           1      3,706,673,383      instructions              #    2.18  insn per cycle         
S0-C2           1      1,064,855,115      branches                  #   48.031 M/sec                  
S0-C2           1        187,458,609      branch-misses             #   17.60% of all branches        
S0-C3           1          22,170.39 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,309      context-switches          #    0.059 K/sec                  
S0-C3           1                 11      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              3,163      page-faults               #    0.143 K/sec                  
S0-C3           1      3,044,148,978      cycles                    #    0.137 GHz                    
S0-C3           1        249,317,141      instructions              #    0.08  insn per cycle         
S0-C3           1      1,116,718,939      branches                  #   50.370 M/sec                  
S0-C3           1        201,740,282      branch-misses             #   18.07% of all branches        

      22.170831304 seconds time elapsed

================================================================================
perf stat -o 134_perl.log --per-core -a taskset -c 0-3 ./spec95_134_perl.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:17:16 2021


 Performance counter stats for 'system wide':

S0-C0           1          30,571.98 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             20,880      context-switches          #    0.683 K/sec                  
S0-C0           1                 35      cpu-migrations            #    0.001 K/sec                  
S0-C0           1              9,153      page-faults               #    0.299 K/sec                  
S0-C0           1      1,068,319,784      cycles                    #    0.035 GHz                    
S0-C0           1        951,767,971      instructions              #    0.89  insn per cycle         
S0-C0           1      2,747,116,788      branches                  #   89.857 M/sec                  
S0-C0           1        482,566,853      branch-misses             #   17.57% of all branches        
S0-C1           1          30,571.98 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,333      context-switches          #    0.109 K/sec                  
S0-C1           1                 23      cpu-migrations            #    0.001 K/sec                  
S0-C1           1              9,466      page-faults               #    0.310 K/sec                  
S0-C1           1        391,301,613      cycles                    #    0.013 GHz                    
S0-C1           1        806,877,012      instructions              #    2.06  insn per cycle         
S0-C1           1      2,726,973,678      branches                  #   89.198 M/sec                  
S0-C1           1        491,734,122      branch-misses             #   18.03% of all branches        
S0-C2           1          30,571.98 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              1,668      context-switches          #    0.055 K/sec                  
S0-C2           1                 18      cpu-migrations            #    0.001 K/sec                  
S0-C2           1              9,202      page-faults               #    0.301 K/sec                  
S0-C2           1        920,845,281      cycles                    #    0.030 GHz                    
S0-C2           1        789,596,019      instructions              #    0.86  insn per cycle         
S0-C2           1      2,724,748,616      branches                  #   89.126 M/sec                  
S0-C2           1        477,122,425      branch-misses             #   17.51% of all branches        
S0-C3           1          30,571.98 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              1,332      context-switches          #    0.044 K/sec                  
S0-C3           1                 17      cpu-migrations            #    0.001 K/sec                  
S0-C3           1              9,245      page-faults               #    0.302 K/sec                  
S0-C3           1        550,718,467      cycles                    #    0.018 GHz                    
S0-C3           1        788,525,010      instructions              #    1.43  insn per cycle         
S0-C3           1      2,724,726,346      branches                  #   89.125 M/sec                  
S0-C3           1        491,363,587      branch-misses             #   18.03% of all branches        

      30.572478081 seconds time elapsed

================================================================================
perf stat -o 141_apsi.log --per-core -a taskset -c 0-3 ./spec95_141_apsi.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:17:47 2021


 Performance counter stats for 'system wide':

S0-C0           1          66,648.25 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              7,761      context-switches          #    0.116 K/sec                  
S0-C0           1                 31      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                922      page-faults               #    0.014 K/sec                  
S0-C0           1        694,973,330      cycles                    #    0.010 GHz                    
S0-C0           1      2,097,856,362      instructions              #    3.02  insn per cycle         
S0-C0           1        872,171,022      branches                  #   13.086 M/sec                  
S0-C0           1         40,574,378      branch-misses             #    4.65% of all branches        
S0-C1           1          66,648.25 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,982      context-switches          #    0.060 K/sec                  
S0-C1           1                 26      cpu-migrations            #    0.000 K/sec                  
S0-C1           1              1,223      page-faults               #    0.018 K/sec                  
S0-C1           1        352,088,466      cycles                    #    0.005 GHz                    
S0-C1           1      2,055,990,821      instructions              #    5.84  insn per cycle         
S0-C1           1        866,546,977      branches                  #   13.002 M/sec                  
S0-C1           1         39,091,576      branch-misses             #    4.51% of all branches        
S0-C2           1          66,648.25 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              3,562      context-switches          #    0.053 K/sec                  
S0-C2           1                 36      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                934      page-faults               #    0.014 K/sec                  
S0-C2           1      4,201,931,467      cycles                    #    0.063 GHz                    
S0-C2           1      2,050,997,371      instructions              #    0.49  insn per cycle         
S0-C2           1        865,899,640      branches                  #   12.992 M/sec                  
S0-C2           1         39,139,525      branch-misses             #    4.52% of all branches        
S0-C3           1          66,648.25 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              4,487      context-switches          #    0.067 K/sec                  
S0-C3           1                 21      cpu-migrations            #    0.000 K/sec                  
S0-C3           1              1,066      page-faults               #    0.016 K/sec                  
S0-C3           1        727,211,963      cycles                    #    0.011 GHz                    
S0-C3           1      2,057,288,413      instructions              #    2.83  insn per cycle         
S0-C3           1        867,040,264      branches                  #   13.009 M/sec                  
S0-C3           1         39,285,622      branch-misses             #    4.53% of all branches        

      66.648981720 seconds time elapsed

================================================================================
perf stat -o 145_fpppp.log --per-core -a taskset -c 0-3 ./spec95_145_fpppp.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:18:53 2021


 Performance counter stats for 'system wide':

S0-C0           1         135,791.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             13,251      context-switches          #    0.098 K/sec                  
S0-C0           1                 12      cpu-migrations            #    0.000 K/sec                  
S0-C0           1                375      page-faults               #    0.003 K/sec                  
S0-C0           1         18,292,694      cycles                    #    0.000 GHz                    
S0-C0           1      3,686,425,228      instructions              #  201.52  insn per cycle         
S0-C0           1      1,265,255,894      branches                  #    9.318 M/sec                  
S0-C0           1        121,213,298      branch-misses             #    9.58% of all branches        
S0-C1           1         135,791.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,467      context-switches          #    0.055 K/sec                  
S0-C1           1                  8      cpu-migrations            #    0.000 K/sec                  
S0-C1           1                281      page-faults               #    0.002 K/sec                  
S0-C1           1      4,058,420,494      cycles                    #    0.030 GHz                    
S0-C1           1      3,630,515,438      instructions              #    0.89  insn per cycle         
S0-C1           1      1,257,526,970      branches                  #    9.261 M/sec                  
S0-C1           1        119,375,176      branch-misses             #    9.49% of all branches        
S0-C2           1         135,791.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              5,924      context-switches          #    0.044 K/sec                  
S0-C2           1                  6      cpu-migrations            #    0.000 K/sec                  
S0-C2           1                233      page-faults               #    0.002 K/sec                  
S0-C2           1        416,531,328      cycles                    #    0.003 GHz                    
S0-C2           1      3,622,522,977      instructions              #    8.70  insn per cycle         
S0-C2           1      1,256,379,854      branches                  #    9.252 M/sec                  
S0-C2           1        119,081,790      branch-misses             #    9.48% of all branches        
S0-C3           1         135,791.61 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             13,665      context-switches          #    0.101 K/sec                  
S0-C3           1                  5      cpu-migrations            #    0.000 K/sec                  
S0-C3           1                493      page-faults               #    0.004 K/sec                  
S0-C3           1        414,593,259      cycles                    #    0.003 GHz                    
S0-C3           1      3,690,310,570      instructions              #    8.90  insn per cycle         
S0-C3           1      1,265,651,311      branches                  #    9.321 M/sec                  
S0-C3           1        121,409,455      branch-misses             #    9.59% of all branches        

     135.792802841 seconds time elapsed

================================================================================
perf stat -o 146_wave5.log --per-core -a taskset -c 0-3 ./spec95_146_wave5.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:21:09 2021


 Performance counter stats for 'system wide':

S0-C0           1          66,690.76 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              6,065      context-switches          #    0.091 K/sec                  
S0-C0           1                 33      cpu-migrations            #    0.000 K/sec                  
S0-C0           1             10,609      page-faults               #    0.159 K/sec                  
S0-C0           1        779,737,055      cycles                    #    0.012 GHz                    
S0-C0           1      2,553,384,622      instructions              #    3.27  insn per cycle         
S0-C0           1      1,325,813,532      branches                  #   19.880 M/sec                  
S0-C0           1         16,599,854      branch-misses             #    1.25% of all branches        
S0-C1           1          66,690.76 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              7,700      context-switches          #    0.115 K/sec                  
S0-C1           1                 15      cpu-migrations            #    0.000 K/sec                  
S0-C1           1             11,022      page-faults               #    0.165 K/sec                  
S0-C1           1        723,222,391      cycles                    #    0.011 GHz                    
S0-C1           1      2,562,031,730      instructions              #    3.54  insn per cycle         
S0-C1           1      1,326,452,588      branches                  #   19.890 M/sec                  
S0-C1           1         17,400,944      branch-misses             #    1.31% of all branches        
S0-C2           1          66,690.76 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              2,900      context-switches          #    0.043 K/sec                  
S0-C2           1                 16      cpu-migrations            #    0.000 K/sec                  
S0-C2           1             11,556      page-faults               #    0.173 K/sec                  
S0-C2           1      2,444,055,509      cycles                    #    0.037 GHz                    
S0-C2           1      2,532,860,540      instructions              #    1.04  insn per cycle         
S0-C2           1      1,322,592,762      branches                  #   19.832 M/sec                  
S0-C2           1         15,690,909      branch-misses             #    1.19% of all branches        
S0-C3           1          66,690.76 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1              3,521      context-switches          #    0.053 K/sec                  
S0-C3           1                 26      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             10,544      page-faults               #    0.158 K/sec                  
S0-C3           1      3,450,120,411      cycles                    #    0.052 GHz                    
S0-C3           1      2,523,984,732      instructions              #    0.73  insn per cycle         
S0-C3           1      1,322,108,813      branches                  #   19.824 M/sec                  
S0-C3           1         15,953,135      branch-misses             #    1.21% of all branches        

      66.691547566 seconds time elapsed

================================================================================
perf stat -o 147_vortex.log --per-core -a taskset -c 0-3 ./spec95_147_vortex.sh -n 4
/home/mendel/sd_card/i-benchmarks/spec_95/bin
# started on Wed Mar  3 06:22:16 2021


 Performance counter stats for 'system wide':

S0-C0           1          94,625.42 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1             24,868      context-switches          #    0.263 K/sec                  
S0-C0           1                 36      cpu-migrations            #    0.000 K/sec                  
S0-C0           1             11,834      page-faults               #    0.125 K/sec                  
S0-C0           1      2,703,316,541      cycles                    #    0.029 GHz                    
S0-C0           1      3,590,938,933      instructions              #    1.33  insn per cycle         
S0-C0           1      1,563,463,689      branches                  #   16.523 M/sec                  
S0-C0           1        394,728,755      branch-misses             #   25.25% of all branches        
S0-C1           1          94,625.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1              3,314      context-switches          #    0.035 K/sec                  
S0-C1           1                 35      cpu-migrations            #    0.000 K/sec                  
S0-C1           1             11,884      page-faults               #    0.126 K/sec                  
S0-C1           1         61,767,497      cycles                    #    0.001 GHz                    
S0-C1           1      3,399,335,519      instructions              #   55.03  insn per cycle         
S0-C1           1      1,536,863,212      branches                  #   16.242 M/sec                  
S0-C1           1        387,857,482      branch-misses             #   25.24% of all branches        
S0-C2           1          94,625.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1              4,214      context-switches          #    0.045 K/sec                  
S0-C2           1                 24      cpu-migrations            #    0.000 K/sec                  
S0-C2           1             12,100      page-faults               #    0.128 K/sec                  
S0-C2           1        372,610,258      cycles                    #    0.004 GHz                    
S0-C2           1      3,405,275,788      instructions              #    9.14  insn per cycle         
S0-C2           1      1,537,657,684      branches                  #   16.250 M/sec                  
S0-C2           1        384,146,374      branch-misses             #   24.98% of all branches        
S0-C3           1          94,625.43 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1             11,091      context-switches          #    0.117 K/sec                  
S0-C3           1                 18      cpu-migrations            #    0.000 K/sec                  
S0-C3           1             11,977      page-faults               #    0.127 K/sec                  
S0-C3           1        850,212,060      cycles                    #    0.009 GHz                    
S0-C3           1      3,452,566,516      instructions              #    4.06  insn per cycle         
S0-C3           1      1,544,163,002      branches                  #   16.319 M/sec                  
S0-C3           1        390,806,048      branch-misses             #   25.31% of all branches        

      94.626354387 seconds time elapsed

================================================================================
perf stat -o aes_benchmark.log --per-core -a taskset -c 0-3 ./aes_benchmark 4
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
SUCCESS::pthread_create() succeeded
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
AES Tests: SUCCEEDED
# started on Wed Mar  3 06:23:51 2021


 Performance counter stats for 'system wide':

S0-C0           1           6,475.23 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C0           1              1,210      context-switches          #    0.187 K/sec                  
S0-C0           1                 11      cpu-migrations            #    0.002 K/sec                  
S0-C0           1                490      page-faults               #    0.076 K/sec                  
S0-C0           1      4,120,848,775      cycles                    #    0.636 GHz                    
S0-C0           1      3,444,375,080      instructions              #    0.84  insn per cycle         
S0-C0           1        179,113,764      branches                  #   27.661 M/sec                  
S0-C0           1          3,186,069      branch-misses             #    1.78% of all branches        
S0-C1           1           6,475.23 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C1           1                429      context-switches          #    0.066 K/sec                  
S0-C1           1                  4      cpu-migrations            #    0.001 K/sec                  
S0-C1           1                388      page-faults               #    0.060 K/sec                  
S0-C1           1      4,081,466,388      cycles                    #    0.630 GHz                    
S0-C1           1      3,432,914,518      instructions              #    0.84  insn per cycle         
S0-C1           1        177,557,856      branches                  #   27.421 M/sec                  
S0-C1           1          2,810,509      branch-misses             #    1.58% of all branches        
S0-C2           1           6,475.23 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C2           1                342      context-switches          #    0.053 K/sec                  
S0-C2           1                  4      cpu-migrations            #    0.001 K/sec                  
S0-C2           1                394      page-faults               #    0.061 K/sec                  
S0-C2           1      4,078,676,271      cycles                    #    0.630 GHz                    
S0-C2           1      3,432,333,344      instructions              #    0.84  insn per cycle         
S0-C2           1        177,500,673      branches                  #   27.412 M/sec                  
S0-C2           1          2,794,658      branch-misses             #    1.57% of all branches        
S0-C3           1           6,475.23 msec cpu-clock                 #    1.000 CPUs utilized          
S0-C3           1                465      context-switches          #    0.072 K/sec                  
S0-C3           1                  4      cpu-migrations            #    0.001 K/sec                  
S0-C3           1                388      page-faults               #    0.060 K/sec                  
S0-C3           1      4,082,467,641      cycles                    #    0.630 GHz                    
S0-C3           1      3,433,614,259      instructions              #    0.84  insn per cycle         
S0-C3           1        177,691,319      branches                  #   27.442 M/sec                  
S0-C3           1          2,820,645      branch-misses             #    1.59% of all branches        

       6.475575620 seconds time elapsed

================================================================================
This benchmark has been compiled to use 16 threads. You have to repcompile it if you want to use different number of threads. See ../install/setup.sh for details.
================================================================================
================================================================================
Printing results
File: NaiveBayes_perf_output_1614751082325962418.txt
instructions: 22762133
=(2987620+7141084+4557104+8076325)
frequencies: 0.403
=(0.237+0.516+0.312+0.549)/4
ipcs:0.33
=1*(0.30+0.32+0.34+0.34)/4

File: kmeans_perf_output_1614751082541618288.txt
instructions: 6118763
=(930487+756291+722800+3709185)
frequencies: 0.413
=(0.313+0.209+0.204+0.928)/4
ipcs:0.29
=1*(0.24+0.30+0.29+0.33)/4

File: sqlite_4_threads.txt
instructions: 2421180189
=(612644171+604985746+602398274+601151998)
frequencies: 0.195
=(0.204+0.198+0.188+0.188)/4
ipcs:0.40
=1*(0.38+0.39+0.41+0.41)/4

File: lda_perf_output_1614751082233131406.txt
instructions: 5873753
=(321908+588030+4223452+740363)
frequencies: 0.373
=(0.141+0.144+1.009+0.198)/4
ipcs:0.29
=1*(0.18+0.33+0.34+0.30)/4

File: grep_perf_output_1614751082135831075.txt
instructions: 6650998
=(3995302+778731+914852+962113)
frequencies: 0.455
=(1.063+0.186+0.291+0.279)/4
ipcs:0.28
=1*(0.29+0.32+0.24+0.27)/4

File: wordcounts_perf_output_1614751082449290509.txt
instructions: 5761140
=(799633+580738+4255875+124894)
frequencies: 0.367
=(0.246+0.149+1.023+0.052)/4
ipcs:0.28
=1*(0.26+0.32+0.34+0.19)/4

File: md5_perf_output_1614751082635212071.txt
instructions: 5846323
=(248106+4261618+619437+717162)
frequencies: 0.396
=(0.152+1.060+0.173+0.198)/4
ipcs:0.27
=1*(0.14+0.34+0.30+0.31)/4

File: go_word2vec_4_threads.txt
instructions: 11996971508
=(2218678845+3087586054+3344894688+3345811921)
frequencies: 0.065
=(0.055+0.043+0.105+0.056)/4
ipcs:1.39
=1*(1.10+1.95+0.87+1.63)/4

File: word2vec_perf_output_1614750891011317101.txt
instructions: 10273685370
=(2176622010+2051328282+2027009585+4018725493)
frequencies: 0.021
=(0.026+0.019+0.018+0.022)/4
ipcs:1.35
=1*(0.92+1.21+1.24+2.04)/4

File: sort_perf_output_1614751082727475312.txt
instructions: 6001280
=(4361130+749525+158245+732380)
frequencies: 0.406
=(1.123+0.197+0.064+0.241)/4
ipcs:0.27
=1*(0.32+0.31+0.20+0.25)/4

File: word2vec_perf_output_no_branch_1614750891015273642.txt
instructions: 11848772688
=(3412299567+2455276583+2954468610+3026727928)
frequencies: 0.017
=(0.030+0.004+0.014+0.021)/4
ipcs:2.90
=1*(1.15+6.83+2.13+1.49)/4

================================================================================
Finished running benchmarks
================================================================================
